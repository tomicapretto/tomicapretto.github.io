<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Tomi Capretto</title>
<link>https://tomicapretto.github.io/blog.html</link>
<atom:link href="https://tomicapretto.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Fri, 26 Sep 2025 03:00:00 GMT</lastBuildDate>
<item>
  <title>Do rookies get better with each throw? Playing Bayes with NBA free-throw data</title>
  <link>https://tomicapretto.github.io/posts/2025-09-25_freethrows-rookies/</link>
  <description><![CDATA[ 




<p><strong>NOTE</strong>: You also have this <a href="../../posts/2025-09-25_freethrows-rookies/es/index.html">versión en español</a>.</p>
<div id="afa71134" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pymc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytensor.tensor <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pt</span>
<span id="cb1-7"></span>
<span id="cb1-8">c_orange <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f08533"</span></span>
<span id="cb1-9">c_blue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3b78b0"</span></span>
<span id="cb1-10">c_red <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d1352c"</span></span></code></pre></div>
</details>
</div>
<p>While I was <em>scraping</em> data on NBA rookies’ free throws during the 2024–25 season, I came across <a href="https://link.springer.com/article/10.1007/s12662-020-00646-x">this article</a>, which concludes that there’s a “warm-up” effect: basketball players tend to miss their first shots more often than the rest. I found the result both interesting and intuitive, and it made me wonder whether it would be worth running a similar analysis on the data I was collecting.</p>
<p>And well… here we are.</p>
<section id="the-data" class="level2">
<h2 class="anchored" data-anchor-id="the-data">The data</h2>
<p>The following data frame contains information about the free throws taken by NBA rookies during the 2024–25 season. In this case, the relevant columns are the player’s identifier (<code>player_id</code>), the order of the attempt (<code>description</code>), and whether the shot was made (<code>success</code>).</p>
<div id="ccf5ecd3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-2">    pl.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.parquet"</span>)</span>
<span id="cb2-3">    .select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"game_date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matchup"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>)</span>
<span id="cb2-4">)</span>
<span id="cb2-5">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (3_722, 6)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">game_date</th>
<th data-quarto-table-cell-role="th">matchup</th>
<th data-quarto-table-cell-role="th">player_id</th>
<th data-quarto-table-cell-role="th">player_name</th>
<th data-quarto-table-cell-role="th">description</th>
<th data-quarto-table-cell-role="th">success</th>
</tr>
<tr class="even">
<th>date</th>
<th>str</th>
<th>i32</th>
<th>str</th>
<th>str</th>
<th>bool</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2025-04-05</td>
<td>"MEM @ DET"</td>
<td>1641744</td>
<td>"Edey, Zach"</td>
<td>"Free Throw 1 of 2"</td>
<td>false</td>
</tr>
<tr class="even">
<td>2025-04-05</td>
<td>"MEM @ DET"</td>
<td>1641744</td>
<td>"Edey, Zach"</td>
<td>"Free Throw 2 of 2"</td>
<td>false</td>
</tr>
<tr class="odd">
<td>2025-01-18</td>
<td>"PHI @ IND"</td>
<td>1641737</td>
<td>"Bona, Adem"</td>
<td>"Free Throw 1 of 1"</td>
<td>true</td>
</tr>
<tr class="even">
<td>2025-01-18</td>
<td>"PHI @ IND"</td>
<td>1641737</td>
<td>"Bona, Adem"</td>
<td>"Free Throw 1 of 2"</td>
<td>false</td>
</tr>
<tr class="odd">
<td>2025-01-18</td>
<td>"PHI @ IND"</td>
<td>1641737</td>
<td>"Bona, Adem"</td>
<td>"Free Throw 2 of 2"</td>
<td>true</td>
</tr>
<tr class="even">
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr class="odd">
<td>2024-11-06</td>
<td>"MEM vs. LAL"</td>
<td>1642530</td>
<td>"Kawamura, Yuki"</td>
<td>"Free Throw 1 of 2"</td>
<td>true</td>
</tr>
<tr class="even">
<td>2024-11-06</td>
<td>"MEM vs. LAL"</td>
<td>1642530</td>
<td>"Kawamura, Yuki"</td>
<td>"Free Throw 2 of 2"</td>
<td>true</td>
</tr>
<tr class="odd">
<td>2025-03-12</td>
<td>"MEM vs. UTA"</td>
<td>1641744</td>
<td>"Edey, Zach"</td>
<td>"Free Throw 1 of 1"</td>
<td>false</td>
</tr>
<tr class="even">
<td>2024-11-22</td>
<td>"NOP vs. GSW"</td>
<td>1641810</td>
<td>"Reeves, Antonio"</td>
<td>"Free Throw 1 of 2"</td>
<td>true</td>
</tr>
<tr class="odd">
<td>2024-11-22</td>
<td>"NOP vs. GSW"</td>
<td>1641810</td>
<td>"Reeves, Antonio"</td>
<td>"Free Throw 2 of 2"</td>
<td>false</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>In the NBA, free throws can come in series of 1, 2, or 3 attempts. Our first task is to map the values of <code>description</code> to a numeric value representing the order of the shot within its series.</p>
<div id="59dbdd88" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">throw_order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw 1 of 1"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw 1 of 2"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw 1 of 3"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw 2 of 2"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw 2 of 3"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw 3 of 3"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw Clear Path 1 of 2"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw Clear Path 2 of 2"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb3-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw Flagrant 1 of 1"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw Flagrant 1 of 2"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw Flagrant 2 of 2"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb3-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Free Throw Technical"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-14">}</span>
<span id="cb3-15"></span>
<span id="cb3-16">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.with_columns(</span>
<span id="cb3-17">    pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>).replace_strict(throw_order, return_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pl.Int64).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>)</span>
<span id="cb3-18">)</span>
<span id="cb3-19">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (3_722, 7)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">game_date</th>
<th data-quarto-table-cell-role="th">matchup</th>
<th data-quarto-table-cell-role="th">player_id</th>
<th data-quarto-table-cell-role="th">player_name</th>
<th data-quarto-table-cell-role="th">description</th>
<th data-quarto-table-cell-role="th">success</th>
<th data-quarto-table-cell-role="th">order</th>
</tr>
<tr class="even">
<th>date</th>
<th>str</th>
<th>i32</th>
<th>str</th>
<th>str</th>
<th>bool</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2025-04-05</td>
<td>"MEM @ DET"</td>
<td>1641744</td>
<td>"Edey, Zach"</td>
<td>"Free Throw 1 of 2"</td>
<td>false</td>
<td>1</td>
</tr>
<tr class="even">
<td>2025-04-05</td>
<td>"MEM @ DET"</td>
<td>1641744</td>
<td>"Edey, Zach"</td>
<td>"Free Throw 2 of 2"</td>
<td>false</td>
<td>2</td>
</tr>
<tr class="odd">
<td>2025-01-18</td>
<td>"PHI @ IND"</td>
<td>1641737</td>
<td>"Bona, Adem"</td>
<td>"Free Throw 1 of 1"</td>
<td>true</td>
<td>1</td>
</tr>
<tr class="even">
<td>2025-01-18</td>
<td>"PHI @ IND"</td>
<td>1641737</td>
<td>"Bona, Adem"</td>
<td>"Free Throw 1 of 2"</td>
<td>false</td>
<td>1</td>
</tr>
<tr class="odd">
<td>2025-01-18</td>
<td>"PHI @ IND"</td>
<td>1641737</td>
<td>"Bona, Adem"</td>
<td>"Free Throw 2 of 2"</td>
<td>true</td>
<td>2</td>
</tr>
<tr class="even">
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr class="odd">
<td>2024-11-06</td>
<td>"MEM vs. LAL"</td>
<td>1642530</td>
<td>"Kawamura, Yuki"</td>
<td>"Free Throw 1 of 2"</td>
<td>true</td>
<td>1</td>
</tr>
<tr class="even">
<td>2024-11-06</td>
<td>"MEM vs. LAL"</td>
<td>1642530</td>
<td>"Kawamura, Yuki"</td>
<td>"Free Throw 2 of 2"</td>
<td>true</td>
<td>2</td>
</tr>
<tr class="odd">
<td>2025-03-12</td>
<td>"MEM vs. UTA"</td>
<td>1641744</td>
<td>"Edey, Zach"</td>
<td>"Free Throw 1 of 1"</td>
<td>false</td>
<td>1</td>
</tr>
<tr class="even">
<td>2024-11-22</td>
<td>"NOP vs. GSW"</td>
<td>1641810</td>
<td>"Reeves, Antonio"</td>
<td>"Free Throw 1 of 2"</td>
<td>true</td>
<td>1</td>
</tr>
<tr class="odd">
<td>2024-11-22</td>
<td>"NOP vs. GSW"</td>
<td>1641810</td>
<td>"Reeves, Antonio"</td>
<td>"Free Throw 2 of 2"</td>
<td>false</td>
<td>2</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>We can see that first attempts tend to miss more often than second ones — and second attempts, in turn, miss more often than third ones.</p>
<div id="6fa81d15" class="cell center-table-70">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-2">    df</span>
<span id="cb4-3">    .group_by(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>)</span>
<span id="cb4-4">    .agg(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>), pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>().alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>))</span>
<span id="cb4-5">    .with_columns((pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>)).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>))</span>
<span id="cb4-6">    .sort(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>)</span>
<span id="cb4-7">)</span>
<span id="cb4-8">df_summary</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (3, 4)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">order</th>
<th data-quarto-table-cell-role="th">y</th>
<th data-quarto-table-cell-role="th">n</th>
<th data-quarto-table-cell-role="th">p</th>
</tr>
<tr class="even">
<th>i64</th>
<th>u32</th>
<th>u32</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>1435</td>
<td>2069</td>
<td>0.693572</td>
</tr>
<tr class="even">
<td>2</td>
<td>1227</td>
<td>1625</td>
<td>0.755077</td>
</tr>
<tr class="odd">
<td>3</td>
<td>23</td>
<td>28</td>
<td>0.821429</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="pooled-model" class="level2">
<h2 class="anchored" data-anchor-id="pooled-model">Pooled model</h2>
<p>As a first step, we use a model that groups all players’ shots together and treats them as equivalent — more of the same. We define <img src="https://latex.codecogs.com/png.latex?Y_1"> as the number of made first attempts and <img src="https://latex.codecogs.com/png.latex?Y_2"> as the number of made second attempts. Then, <img src="https://latex.codecogs.com/png.latex?%5Cpi_1"> represents the probability of making a first attempt, and <img src="https://latex.codecogs.com/png.latex?%5Cpi_2"> the probability of making a second one.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_1%20&amp;%5Csim%20%5Ctext%7BBinomial%7D(N_1,%20%5Cpi_1)%20%5C%5C%0AY_2%20&amp;%5Csim%20%5Ctext%7BBinomial%7D(N_2,%20%5Cpi_2)%20%5C%5C%0A%5Cpi_1%20&amp;%5Csim%20%5Ctext%7BBeta%7D(4,%202)%20%5C%5C%0A%5Cpi_2%20&amp;%5Csim%20%5Ctext%7BBeta%7D(4,%202)%20%5C%5C%0A%5Cend%7Baligned%7D%0A"></p>
<p>In PyMC, we have:</p>
<div id="d9632925" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_summary.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>].to_numpy()</span>
<span id="cb5-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_summary.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>].to_numpy()</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]}) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb5-5">    pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Beta(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>)</span>
<span id="cb5-6">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Binomial(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pi, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>)</span>
<span id="cb5-7">    idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(chains<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1211</span>, nuts_sampler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nutpie"</span>, progressbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9">model.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-09-25_freethrows-rookies/index_files/figure-html/cell-6-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We compute <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> as the difference between <img src="https://latex.codecogs.com/png.latex?%5Cpi_2"> and <img src="https://latex.codecogs.com/png.latex?%5Cpi_1">, and then analyze the marginal <em>posterior</em> distributions.</p>
<p>First, the diagnostics show no issues with sampling: <img src="https://latex.codecogs.com/png.latex?%5Chat%7BR%7D"> is close to 1, effective sample sizes are adequate, and so on.</p>
<div id="da64b84f" class="cell center-table-70" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">idata.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delta"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>].sel(order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> idata.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>].sel(order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-2">az.summary(idata, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delta"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_3%</th>
<th data-quarto-table-cell-role="th">hdi_97%</th>
<th data-quarto-table-cell-role="th">mcse_mean</th>
<th data-quarto-table-cell-role="th">mcse_sd</th>
<th data-quarto-table-cell-role="th">ess_bulk</th>
<th data-quarto-table-cell-role="th">ess_tail</th>
<th data-quarto-table-cell-role="th">r_hat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">pi[1]</td>
<td>0.694</td>
<td>0.010</td>
<td>0.673</td>
<td>0.712</td>
<td>0.0</td>
<td>0.0</td>
<td>4040.0</td>
<td>2880.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">pi[2]</td>
<td>0.754</td>
<td>0.011</td>
<td>0.733</td>
<td>0.773</td>
<td>0.0</td>
<td>0.0</td>
<td>3996.0</td>
<td>2737.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">delta</td>
<td>0.061</td>
<td>0.015</td>
<td>0.030</td>
<td>0.088</td>
<td>0.0</td>
<td>0.0</td>
<td>4193.0</td>
<td>2918.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>If we focus on the <em>posterior</em> distribution of <img src="https://latex.codecogs.com/png.latex?%5Cdelta">, we can see that the probability of <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> being greater than 0 is equal to 1.</p>
<p>This leads us to our first major conclusion: indeed, the probability of making the second free throw is higher than that of the first. In fact, the success probability increases by an average of about 6%. And with a high degree of certainty, we can say that this improvement lies between 3% and 9%.</p>
<div id="6c65a1c7" class="cell" data-execution_count="7">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-09-25_freethrows-rookies/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="partially-pooled-model" class="level2">
<h2 class="anchored" data-anchor-id="partially-pooled-model">Partially pooled model</h2>
<p>The previous model only allows us to conclude that a <em>rookie</em> is more likely to make a second free throw than a first one (and quantify the size of that difference). However, it doesn’t let us draw conclusions about individual players. For example, we don’t know whether this “warm-up” effect occurs for <em>all</em> of them, or whether its intensity varies from player to player.</p>
<p>One option would be to fit pairs of beta-binomial models like the ones above separately for each player. Unfortunately, since the number of attempts ranges from just one to a few hundred, the resulting posterior distributions can end up being extremely uncertain in some cases, or overly confident in others.</p>
<p>This brings us to the quintessential Bayesian alternative: the hierarchical model. Under this approach, each player has their own success probability, but that probability is drawn from a common distribution shared by all players. This makes the estimates more stable and helps prevent overfitting to individual data, since each player’s posterior distribution is influenced — to some extent — by the information from the rest.</p>
<p>The data we need are the number of attempts and the number of made shots on the first and second try for each player. For simplicity, we’ll focus only on players who attempted at least one series of two free throws.</p>
<div id="67ef624d" class="cell center-table-40" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df_agg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb7-2">    df</span>
<span id="cb7-3">    .group_by(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>)</span>
<span id="cb7-4">    .agg(</span>
<span id="cb7-5">        pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>),</span>
<span id="cb7-6">        pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>().alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>)</span>
<span id="cb7-7">    )</span>
<span id="cb7-8">    .sort(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>)</span>
<span id="cb7-9">)</span>
<span id="cb7-10">selected_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb7-11">    df_agg</span>
<span id="cb7-12">    .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-13">    .get_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span>)</span>
<span id="cb7-14">    .unique()</span>
<span id="cb7-15">    .to_list()</span>
<span id="cb7-16">)</span>
<span id="cb7-17"></span>
<span id="cb7-18">df_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb7-19">    df_agg</span>
<span id="cb7-20">    .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span>).is_in(selected_ids), pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-21">    .sort(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>)</span>
<span id="cb7-22">)</span>
<span id="cb7-23">df_model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (184, 4)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">player_id</th>
<th data-quarto-table-cell-role="th">order</th>
<th data-quarto-table-cell-role="th">y</th>
<th data-quarto-table-cell-role="th">n</th>
</tr>
<tr class="even">
<th>i32</th>
<th>i64</th>
<th>u32</th>
<th>u32</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1630283</td>
<td>1</td>
<td>1</td>
<td>5</td>
</tr>
<tr class="even">
<td>1630283</td>
<td>2</td>
<td>5</td>
<td>5</td>
</tr>
<tr class="odd">
<td>1630542</td>
<td>1</td>
<td>4</td>
<td>5</td>
</tr>
<tr class="even">
<td>1630542</td>
<td>2</td>
<td>4</td>
<td>5</td>
</tr>
<tr class="odd">
<td>1630545</td>
<td>1</td>
<td>9</td>
<td>12</td>
</tr>
<tr class="even">
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr class="odd">
<td>1642502</td>
<td>2</td>
<td>1</td>
<td>2</td>
</tr>
<tr class="even">
<td>1642505</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="odd">
<td>1642505</td>
<td>2</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="even">
<td>1642530</td>
<td>1</td>
<td>4</td>
<td>5</td>
</tr>
<tr class="odd">
<td>1642530</td>
<td>2</td>
<td>3</td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>In distributional form, we can write the model as follows:</p>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0AY_%7Bi1%7D%20&amp;%5Csim%20%5Ctext%7BBinomial%7D(N_%7Bi1%7D,%20%5Cpi_i)%20%5C%5C%0AY_%7Bi2%7D%20&amp;%5Csim%20%5Ctext%7BBinomial%7D(N_%7Bi2%7D,%20%5Ctheta_i)%20%5C%5C%20%5C%5C%0A%0A&amp;%20%5Ctext%7B---%20P(Free%20throw%201%20is%20made)%20---%7D%20%5C%5C%0A%0A%5Cpi_i%20&amp;%5Csim%20%5Ctext%7BBeta%7D(%5Cmu_%5Cpi,%20%5Ckappa_%5Cpi)%20%5C%5C%0A%5Cmu_%5Cpi%20&amp;%5Csim%20%5Ctext%7BBeta%7D(4,%202)%20%5C%5C%0A%5Ckappa_%5Cpi%20&amp;%5Csim%20%5Ctext%7BInverseGamma%7D(0.5%20%5Ccdot%2015,%200.5%20%5Ccdot%2015%20%5Ccdot%2010)%20%5C%5C%20%5C%5C%0A%0A&amp;%20%5Ctext%7B---%20P(Free%20throw%202%20is%20made)%20---%20%7D%20%5C%5C%0A%0A%5Ctheta_i%20&amp;=%20%5Cpi_i%20+%20%5Cdelta_i%20%5C%5C%0A%5Cdelta_i%20&amp;%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%5Cdelta,%20%5Csigma%5E2_%5Cdelta)%20%5C%5C%0A%5Cmu_%5Cdelta%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%200.15%5E2)%20%5C%5C%0A%5Csigma%5E2_%5Cdelta%20&amp;%5Csim%20%5Ctext%7BInverseGamma%7D(0.5%20%5Ccdot%2030,%200.5%20%5Ccdot%2030%20%5Ccdot%200.05)%20%5C%5C%0A%5Cend%7Baligned%7D">
<p>where <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%7B1,%20%5Cdots,%2092%7D"> indexes the players.</p>
<p>In other words, we model the probability of making the second free throw as the sum of the probability of making the first one (<img src="https://latex.codecogs.com/png.latex?%5Cpi_i">) and a player-specific differential (<img src="https://latex.codecogs.com/png.latex?%5Cdelta_i">).</p>
<p>The prior distributions for <img src="https://latex.codecogs.com/png.latex?%5Cmu_%5Cpi"> and <img src="https://latex.codecogs.com/png.latex?%5Cmu_%5Cdelta"> are slightly and moderately informative, respectively. Meanwhile, the priors assigned to <img src="https://latex.codecogs.com/png.latex?%5Ckappa_%5Cpi"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2_%5Cdelta"> are also moderately informative — though in this case, their main role is to promote stability in the sampling of the posterior.</p>
<div id="bc932449" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="annotated-cell-8" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-8-1" class="code-annotation-target">y_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>].to_numpy()</span>
<span id="annotated-cell-8-2">y_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>].to_numpy()</span>
<span id="annotated-cell-8-3">n_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>].to_numpy()</span>
<span id="annotated-cell-8-4">n_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>].to_numpy()</span>
<span id="annotated-cell-8-5"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-8-6" class="code-annotation-target">player_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span>].unique(maintain_order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-8-7">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(player_ids)</span>
<span id="annotated-cell-8-8">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>: player_ids}</span>
<span id="annotated-cell-8-9"></span>
<span id="annotated-cell-8-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_h:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-8-11" class="code-annotation-target">    pi_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Beta(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi_mu"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="annotated-cell-8-12">    pi_kappa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.InverseGamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi_kappa"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-8-13">    pi_alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pi_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi_kappa</span>
<span id="annotated-cell-8-14">    pi_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pi_mu) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi_kappa</span>
<span id="annotated-cell-8-15">    pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Beta(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pi_alpha, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pi_beta, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>)</span>
<span id="annotated-cell-8-16"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-8-17" class="code-annotation-target">    delta_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delta_mu"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>)</span>
<span id="annotated-cell-8-18">    delta_sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.InverseGamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delta_sigma^2"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="annotated-cell-8-19">    delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-8-20" class="code-annotation-target">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delta"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delta_sigma, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>, initval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.zeros(N)</span>
<span id="annotated-cell-8-21">    )</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-8-22" class="code-annotation-target">    theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"theta"</span>, pt.clip(pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> delta, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9999</span>), dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>)</span>
<span id="annotated-cell-8-23"></span>
<span id="annotated-cell-8-24"></span>
<span id="annotated-cell-8-25">    pm.Binomial(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_1"</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pi, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_1, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_1, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>)</span>
<span id="annotated-cell-8-26">    pm.Binomial(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_2"</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_2, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_2, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="1,2,3,4" data-code-annotation="1"><strong>Data preparation:</strong> vectors are used (although 2-dimensional arrays could have been used instead).</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="6,7,8" data-code-annotation="2"><strong>Coordinate preparation:</strong> these represent the different players.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="11,12,13,14,15" data-code-annotation="3"><strong>Construction of <img src="https://latex.codecogs.com/png.latex?%5Cpi_i">:</strong> priors are assigned for the mean and precision, which are then transformed into scale parameters used directly in <code>pm.Beta</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="17,18,19,21,23" data-code-annotation="4"><strong>Construction of <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i">:</strong> for each player, a difference parameter <img src="https://latex.codecogs.com/png.latex?%5Cdelta_i"> is specified.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="20" data-code-annotation="5"><strong>Use of <code>initval</code>:</strong> ensures that the inference algorithm starts from a valid point in the parameter space.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="22" data-code-annotation="6"><strong>Use of <code>pt.clip</code>:</strong> guarantees that <img src="https://latex.codecogs.com/png.latex?%5Cpi_i%20+%20%5Cdelta_i"> stays between 0 and 1. This does not affect the posterior but is necessary to correctly initialize the sampling algorithm.</span>
</dd>
</dl>
</div>
</div>
<p>Finally, here’s what a graphical representation of the model looks like:</p>
<div id="cd7ff322" class="cell" data-execution_count="10">
<div class="cell-output cell-output-display" data-execution_count="10">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-09-25_freethrows-rookies/index_files/figure-html/cell-11-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Thanks to <a href="https://pymc-devs.github.io/nutpie/">nutpie</a>, we can obtain reliable samples from the <em>posterior</em> in just a few seconds.</p>
<p>Although the diagnostics don’t look quite as good as in the pooled model (which is easy to happen in hierarchical models), the values are still acceptable, so we can proceed with our analysis.</p>
<div id="e391709d" class="cell center-table-70" data-execution_count="11">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_h:</span>
<span id="cb8-2">    idata_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(</span>
<span id="cb8-3">        chains<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb8-4">        target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>,</span>
<span id="cb8-5">        nuts_sampler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nutpie"</span>,</span>
<span id="cb8-6">        random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1211</span>,</span>
<span id="cb8-7">        progressbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb8-8">    )</span>
<span id="cb8-9"></span>
<span id="cb8-10">az.summary(idata_h, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi_mu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi_kappa"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delta_mu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delta_sigma^2"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_3%</th>
<th data-quarto-table-cell-role="th">hdi_97%</th>
<th data-quarto-table-cell-role="th">mcse_mean</th>
<th data-quarto-table-cell-role="th">mcse_sd</th>
<th data-quarto-table-cell-role="th">ess_bulk</th>
<th data-quarto-table-cell-role="th">ess_tail</th>
<th data-quarto-table-cell-role="th">r_hat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">pi_mu</td>
<td>0.698</td>
<td>0.015</td>
<td>0.670</td>
<td>0.727</td>
<td>0.000</td>
<td>0.000</td>
<td>1063.0</td>
<td>2206.0</td>
<td>1.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">pi_kappa</td>
<td>28.903</td>
<td>9.035</td>
<td>14.499</td>
<td>45.731</td>
<td>0.286</td>
<td>0.278</td>
<td>1001.0</td>
<td>1623.0</td>
<td>1.00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">delta_mu</td>
<td>0.055</td>
<td>0.016</td>
<td>0.027</td>
<td>0.086</td>
<td>0.001</td>
<td>0.000</td>
<td>497.0</td>
<td>910.0</td>
<td>1.01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">delta_sigma^2</td>
<td>0.002</td>
<td>0.001</td>
<td>0.001</td>
<td>0.003</td>
<td>0.000</td>
<td>0.000</td>
<td>1262.0</td>
<td>2006.0</td>
<td>1.00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The marginal posteriors of the population-level parameters look as follows:</p>
<div id="31602cfd" class="cell" data-execution_count="12">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-09-25_freethrows-rookies/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>At first glance, we can see that, on average, the probability of making a first free throw is around 70%, and that second attempts are, on average, about 6% more likely to go in. While this isn’t a surprising result, it’s reassuring to see that the inferences from the hierarchical model are consistent with our previous findings.</p>
<p>What’s truly interesting about this hierarchical approach is that it allows us to analyze the posterior distributions of <img src="https://latex.codecogs.com/png.latex?%5Cpi_i">, <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i">, and <img src="https://latex.codecogs.com/png.latex?%5Cdelta_i"> at the individual level — that is, for each player.</p>
<p>However, visualizing these distributions for all players can quickly become impractical. To make things more manageable, we selected a representative subset of players based on their <img src="https://latex.codecogs.com/png.latex?N_1"> values (the number of first attempts). Specifically, we kept the 10 players with the highest <img src="https://latex.codecogs.com/png.latex?N_1">, and from the remaining group, we sorted them from lowest to highest and chose every second player to form a more manageable sample.</p>
<div id="843351de" class="cell center-table-60" data-execution_count="13">
<div class="cell-output cell-output-display">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (26, 6)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">player_id</th>
<th data-quarto-table-cell-role="th">player_name</th>
<th data-quarto-table-cell-role="th">y_1</th>
<th data-quarto-table-cell-role="th">y_2</th>
<th data-quarto-table-cell-role="th">n_1</th>
<th data-quarto-table-cell-role="th">n_2</th>
</tr>
<tr class="even">
<th>i32</th>
<th>str</th>
<th>u32</th>
<th>u32</th>
<th>u32</th>
<th>u32</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1642264</td>
<td>"Castle, Stephon"</td>
<td>128</td>
<td>121</td>
<td>192</td>
<td>152</td>
</tr>
<tr class="even">
<td>1642274</td>
<td>"Missi, Yves"</td>
<td>63</td>
<td>64</td>
<td>112</td>
<td>92</td>
</tr>
<tr class="odd">
<td>1642259</td>
<td>"Sarr, Alex"</td>
<td>62</td>
<td>50</td>
<td>88</td>
<td>77</td>
</tr>
<tr class="even">
<td>1642268</td>
<td>"Collier, Isaiah"</td>
<td>56</td>
<td>49</td>
<td>85</td>
<td>69</td>
</tr>
<tr class="odd">
<td>1642258</td>
<td>"Risacher, Zaccharie"</td>
<td>55</td>
<td>47</td>
<td>82</td>
<td>62</td>
</tr>
<tr class="even">
<td>1642271</td>
<td>"Filipowski, Kyle"</td>
<td>47</td>
<td>46</td>
<td>81</td>
<td>62</td>
</tr>
<tr class="odd">
<td>1641744</td>
<td>"Edey, Zach"</td>
<td>54</td>
<td>36</td>
<td>76</td>
<td>51</td>
</tr>
<tr class="even">
<td>1642377</td>
<td>"Wells, Jaylen"</td>
<td>62</td>
<td>44</td>
<td>73</td>
<td>56</td>
</tr>
<tr class="odd">
<td>1641842</td>
<td>"Holland II, Ronald"</td>
<td>51</td>
<td>41</td>
<td>70</td>
<td>52</td>
</tr>
<tr class="even">
<td>1642270</td>
<td>"Clingan, Donovan"</td>
<td>33</td>
<td>29</td>
<td>60</td>
<td>44</td>
</tr>
<tr class="odd">
<td>1641824</td>
<td>"Buzelis, Matas"</td>
<td>45</td>
<td>43</td>
<td>59</td>
<td>49</td>
</tr>
<tr class="even">
<td>1642273</td>
<td>"George, Kyshawn"</td>
<td>39</td>
<td>31</td>
<td>51</td>
<td>42</td>
</tr>
<tr class="odd">
<td>1642266</td>
<td>"Walter, Ja'Kobe"</td>
<td>34</td>
<td>32</td>
<td>47</td>
<td>36</td>
</tr>
<tr class="even">
<td>1642347</td>
<td>"Shead, Jamal"</td>
<td>32</td>
<td>20</td>
<td>42</td>
<td>26</td>
</tr>
<tr class="odd">
<td>1641783</td>
<td>"da Silva, Tristan"</td>
<td>29</td>
<td>26</td>
<td>35</td>
<td>28</td>
</tr>
<tr class="even">
<td>1642272</td>
<td>"McCain, Jared"</td>
<td>23</td>
<td>23</td>
<td>28</td>
<td>25</td>
</tr>
<tr class="odd">
<td>1642348</td>
<td>"Edwards, Justin"</td>
<td>17</td>
<td>15</td>
<td>24</td>
<td>22</td>
</tr>
<tr class="even">
<td>1641810</td>
<td>"Reeves, Antonio"</td>
<td>16</td>
<td>12</td>
<td>21</td>
<td>14</td>
</tr>
<tr class="odd">
<td>1631232</td>
<td>"Brooks Jr., Keion"</td>
<td>12</td>
<td>10</td>
<td>17</td>
<td>13</td>
</tr>
<tr class="even">
<td>1642277</td>
<td>"Furphy, Johnny"</td>
<td>11</td>
<td>7</td>
<td>13</td>
<td>9</td>
</tr>
<tr class="odd">
<td>1641736</td>
<td>"Beekman, Reece"</td>
<td>8</td>
<td>8</td>
<td>11</td>
<td>10</td>
</tr>
<tr class="even">
<td>1642265</td>
<td>"Dillingham, Rob"</td>
<td>4</td>
<td>4</td>
<td>9</td>
<td>6</td>
</tr>
<tr class="odd">
<td>1630574</td>
<td>"Hukporti, Ariel"</td>
<td>2</td>
<td>4</td>
<td>7</td>
<td>6</td>
</tr>
<tr class="even">
<td>1630283</td>
<td>"Kelley, Kylor"</td>
<td>1</td>
<td>5</td>
<td>5</td>
<td>5</td>
</tr>
<tr class="odd">
<td>1641989</td>
<td>"Harkless, Elijah"</td>
<td>2</td>
<td>1</td>
<td>3</td>
<td>3</td>
</tr>
<tr class="even">
<td>1630762</td>
<td>"Wheeler, Phillip"</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>We can then visualize the marginal posteriors of <img src="https://latex.codecogs.com/png.latex?%5Cpi_i">, <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i">, and <img src="https://latex.codecogs.com/png.latex?%5Cdelta_i"> for each selected player. Naturally, as the number of observed shots increases, the posterior distributions become narrower, reflecting a higher level of certainty.</p>
<p>In every case, even when <img src="https://latex.codecogs.com/png.latex?N_1%20=%201"> and <img src="https://latex.codecogs.com/png.latex?N_2%20=%201">, the posterior mean of <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i"> is greater than that of <img src="https://latex.codecogs.com/png.latex?%5Cpi_i">.</p>
<p>From another perspective, the bottom panel shows that the mean of <img src="https://latex.codecogs.com/png.latex?%5Cdelta_i"> is always greater than 0. However, it’s only in cases where we have hundreds of attempts that we can conclude, with probability close to 1, that players are indeed better on their second attempts than on their first.</p>
<div id="99e20d4c" class="cell" data-execution_count="14">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-09-25_freethrows-rookies/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Since we’re Bayesians and use Markov Chain Monte Carlo methods to obtain samples from the posterior, we can compute, for each player, the probability that <img src="https://latex.codecogs.com/png.latex?%5Cdelta_i"> is greater than 0. With these probabilities, we can build the following summary histogram:</p>
<div id="08143049" class="cell" data-execution_count="15">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-09-25_freethrows-rookies/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Then, no matter which rookie we look at, we’ll always conclude that they have a moderate to high probability of being more effective on their second free throws than on their first.</p>
<p>Finally, let’s compare the posterior distribution of <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> from the pooled model with the posterior of <img src="https://latex.codecogs.com/png.latex?%5Cmu_%5Cdelta"> from the partially pooled model, since both represent the same quantity: the average difference in success probability between a second and a first attempt.</p>
<div id="bac92867" class="cell" data-execution_count="16">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-09-25_freethrows-rookies/index_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Fortunately, there are no surprises to report. Both models lead us to practically the same conclusions about the average <img src="https://latex.codecogs.com/png.latex?%5Cdelta">, although it’s worth noting that in the hierarchical model, the posterior is slightly more regularized toward 0 compared to the pooled model.</p>
<p>However, we shouldn’t forget that using a hierarchical model allowed us to obtain posterior distributions for each individual player.</p>
</section>
<section id="final-comments" class="level2">
<h2 class="anchored" data-anchor-id="final-comments">Final comments</h2>
<p>Examples like this are what remind me why I enjoy the Bayesian approach to statistical modeling so much.</p>
<p>While we could have settled for a simple hypothesis test, like the one presented in the <a href="https://link.springer.com/article/10.1007/s12662-020-00646-x">article mentioned above</a>, the flexibility offered by tools like PyMC allows us to go several steps further.</p>
<p>We proposed a hierarchical model (not a trivial one), implemented it in PyMC, and then, together with nutpie, used it to obtain samples from the posterior.</p>
<p>From those samples, we were able to draw several interesting conclusions. Not only the global ones, which confirm that basketball players tend to miss their first free throws more often than their second (consistent with the article’s findings), but also player-specific insights.</p>
<p>And above all, beyond the practical usefulness of the model or the insights we can extract… isn’t it just incredibly fun to <em>play Bayes</em>?</p>


</section>

 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2025-09-25_freethrows-rookies/</guid>
  <pubDate>Fri, 26 Sep 2025 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2025-09-25_freethrows-rookies/imgs/bayes_freethrow.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>In search of the best thermos for mate with Thomas Bayes</title>
  <link>https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/</link>
  <description><![CDATA[ 




<p><strong>NOTE</strong>: This blogpost was automatically translated from this <a href="../../posts/2025-08-14_temperatura-mate/es/index.html">versión en español</a>.</p>
<div id="1342516b" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> preliz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pz</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pymc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xarray <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> xr</span>
<span id="cb1-7"></span>
<span id="cb1-8">random_seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cooling"</span>))</span>
<span id="cb1-9"></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_temperature(time, r, T_0, T_env):</span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> T_env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (T_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> time)</span>
<span id="cb1-13"></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_estimated_curves(idata, x, y, T_env, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C0"</span>, kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> axes <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-17">        fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-19">        fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].figure</span>
<span id="cb1-20"></span>
<span id="cb1-21">    t_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-22">    t_grid_xr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xr.DataArray(t_grid, coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__idx__"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))}, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__idx__"</span>)</span>
<span id="cb1-23"></span>
<span id="cb1-24">    mu_transformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> idata.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t_grid_xr</span>
<span id="cb1-25"></span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> kind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outcome"</span>:</span>
<span id="cb1-27">        coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_transformed.coords</span>
<span id="cb1-28">        dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_transformed.dims</span>
<span id="cb1-29">        draws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(</span>
<span id="cb1-30">            loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_transformed, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>idata.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>].to_numpy()[..., np.newaxis]</span>
<span id="cb1-31">        )</span>
<span id="cb1-32"></span>
<span id="cb1-33">        mu_transformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xr.DataArray(</span>
<span id="cb1-34">            draws,</span>
<span id="cb1-35">            coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords,</span>
<span id="cb1-36">            dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dims</span>
<span id="cb1-37">        )</span>
<span id="cb1-38"></span>
<span id="cb1-39">    mu_original <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(mu_transformed) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> T_env</span>
<span id="cb1-40">    mu_transformed_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_transformed.mean((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>)).to_numpy()</span>
<span id="cb1-41">    mu_transformed_ci50 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_transformed.quantile((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>)).to_numpy()</span>
<span id="cb1-42">    mu_transformed_ci90 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_transformed.quantile((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>)).to_numpy()</span>
<span id="cb1-43"></span>
<span id="cb1-44">    mu_original_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_original.mean((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>)).to_numpy()</span>
<span id="cb1-45">    mu_original_ci50 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_original.quantile((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>)).to_numpy()</span>
<span id="cb1-46">    mu_original_ci90 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_original.quantile((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>)).to_numpy()</span>
<span id="cb1-47"></span>
<span id="cb1-48"></span>
<span id="cb1-49">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t_grid, mu_original_mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-50">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].fill_between(</span>
<span id="cb1-51">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t_grid, y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_original_ci50[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], y2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_original_ci50[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color</span>
<span id="cb1-52">    )</span>
<span id="cb1-53">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].fill_between(</span>
<span id="cb1-54">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t_grid, y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_original_ci90[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], y2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_original_ci90[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color</span>
<span id="cb1-55">    )</span>
<span id="cb1-56"></span>
<span id="cb1-57">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(t_grid, mu_transformed_mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-58">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].fill_between(</span>
<span id="cb1-59">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t_grid, y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_transformed_ci50[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], y2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_transformed_ci50[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color</span>
<span id="cb1-60">    )</span>
<span id="cb1-61">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].fill_between(</span>
<span id="cb1-62">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t_grid, y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_transformed_ci90[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], y2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_transformed_ci90[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color</span>
<span id="cb1-63">    )</span>
<span id="cb1-64"></span>
<span id="cb1-65">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].scatter(x, y, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.33"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-66">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(x, np.log(y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.33"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-67"></span>
<span id="cb1-68">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiempo (horas)"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperatura (°C)"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-69">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiempo (horas)"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">log(T - T_</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">text</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ambiente}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)$"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-70"></span>
<span id="cb1-71">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb1-72">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb1-73">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-74">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-75"></span>
<span id="cb1-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fig, axes</span></code></pre></div>
</details>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>A few weeks ago, while browsing the internet, I came across <a href="https://x.com/nicorioscenteno/status/1621655101164118017">this post</a> on the social network X. There, a farmer described an experiment he was about to conduct to measure the heat retention capacity of several thermoses he had on hand.</p>
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/imgs/posteo.png" class="img-fluid" width="500"></p>
<p>The experiment involved pouring water at 80 °C into each thermos and recording its temperature several times throughout the day. With the collected data, it would be possible to determine which thermos had the best—and which had the worst—heat retention capacity.</p>
<p>After several measurements, the author of the experiment <a href="https://x.com/nicorioscenteno/status/1622039649622319104">shared</a> the results obtained:</p>
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/imgs/posteo2.png" class="img-fluid" width="500"></p>
<p>From these results, it can be concluded that the “nn tapa rosa” thermos was the worst performer, as the water inside lost heat considerably more quickly than in any other thermos.</p>
<p>Now, the inevitable question is: which thermos offers the best heat retention?</p>
<p>To answer this question, we will use a Bayesian model based on Newton’s Law of Cooling.</p>
</section>
<section id="newtons-law-of-cooling" class="level2">
<h2 class="anchored" data-anchor-id="newtons-law-of-cooling">Newton’s Law of Cooling</h2>
<p><strong>Newton’s law of cooling</strong> states that the temperature of an object changes at a rate proportional to the difference between its temperature and the ambient temperature:</p>
<p><span id="eq-newton-cooling"><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7BdT(t)%7D%7Bdt%7D%20=%20r%20%5C,%20(T_%5Ctext%7Benv%7D%20-%20T(t))%0A%5Ctag%7B1%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?r"> is a cooling rate.</p>
<p>One solution to Equation&nbsp;1 is:</p>
<p><span id="eq-newton-cooling-sol"><img src="https://latex.codecogs.com/png.latex?%0AT(t)%20=%20T_%5Ctext%7Benv%7D%20+%20(T(0)-%20T_%5Ctext%7Benv%7D)%20%5C,%20e%5E%7B-rt%7D%0A%5Ctag%7B2%7D"></span></p>
<p>This means that the temperature decays exponentially toward the ambient temperature as time passes.</p>
<p>It can also be noted that the logarithm of the difference between the temperature at time <img src="https://latex.codecogs.com/png.latex?t"> and the ambient temperature is a linear function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%5Cleft(T(t)%20-%20T_%5Ctext%7Benv%7D%5Cright)%20=%20%5Clog%5Cleft(T(0)%20-%20T_%5Ctext%7Benv%7D%5Cright)%20-%20rt%0A"></p>
<p>which can be written more concisely as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%5Cleft(T(t)%20-%20T_%5Ctext%7Benv%7D%5Cright)%20=%20%5Calpha%20-%20%5Cbeta%20t%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%20%5Clog%5Cleft(T(0)%20-%20T_%5Ctext%7Benv%7D%5Cright)"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20=%20r">.</p>
<p>The figure below shows the shape taken by Equation&nbsp;2 for different cooling rates <img src="https://latex.codecogs.com/png.latex?r"> alongside its corresponding transformed version.</p>
<div id="cell-fig-cooling" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">T_0, T_env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb2-2">time_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb2-7">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(</span>
<span id="cb2-8">        time_grid,</span>
<span id="cb2-9">        compute_temperature(time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time_grid, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r, T_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T_0, T_env<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T_env),</span>
<span id="cb2-10">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"$r=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span></span>
<span id="cb2-11">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(</span>
<span id="cb2-13">        time_grid,</span>
<span id="cb2-14">        np.log(compute_temperature(time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time_grid, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r, T_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T_0, T_env<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T_env) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env),</span>
<span id="cb2-15">        label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"$r=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span></span>
<span id="cb2-16">    )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-17"></span>
<span id="cb2-18">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T_env, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.2"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb2-19">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb2-20">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb2-21">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(ylim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.4</span>))</span>
<span id="cb2-22"></span>
<span id="cb2-23">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend()</span>
<span id="cb2-24">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiempo"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperatura"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-25">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiempo"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">log(T(t) - T_</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">text</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ambiente}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)$"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-cooling" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-cooling-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/fig-cooling-output-1.png" id="fig-cooling" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-cooling-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1
</figcaption>
</figure>
</div>
</div>
</div>
<p>The higher the value of <img src="https://latex.codecogs.com/png.latex?r">, the worse the thermos’ ability to retain temperature. In other words, the best thermos will be the one with the lowest value of <img src="https://latex.codecogs.com/png.latex?r"> (assuming that <img src="https://latex.codecogs.com/png.latex?r%20%3E%200">).</p>
</section>
<section id="prior-elicitation" class="level2">
<h2 class="anchored" data-anchor-id="prior-elicitation">Prior elicitation</h2>
<p>In this article, we will work with models in the following way:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Clog(T(t_i)%20-%20T_%5Ctext%7Benv%7D)%20%5Cmid%20t_i%20&amp;%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_i,%20%5Csigma%5E2)%20%5C%5C%0A%5Cmu_i%20&amp;=%20%5Calpha%20-%20%5Cbeta%20t_i%0A%5Cend%7Baligned%7D%0A"></p>
<p>That is, for a given time <img src="https://latex.codecogs.com/png.latex?t_i">, we assume that the logarithm of the difference between the water temperature and the ambient temperature follows a normal distribution.</p>
<p>The parameter of greatest interest is <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, which represents the cooling rate of the water in the thermos. First, we know that its value must be positive, since the initial water temperature drops to the ambient temperature. Furthermore, based on the curves shown in Figure&nbsp;1, we can assume that a reasonable range for this parameter is in the interval <img src="https://latex.codecogs.com/png.latex?(0,%201)">. This range implies that the water in the thermos would reach room temperature, at worst, about 5 hours after filling it.</p>
<p>Using <a href="https://preliz.readthedocs.io/en/latest/">PreliZ</a>, we can obtain the parameters of a gamma distribution that satisfy our requirements.</p>
<div id="9e31efcc" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pz.maxent(pz.Gamma(), lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>, upper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Another unknown parameter in our model is <img src="https://latex.codecogs.com/png.latex?%5Csigma">, the conditional standard deviation. It is important to note that this deviation is not expressed in degrees Celsius, as it describes the variability of <img src="https://latex.codecogs.com/png.latex?%5Clog(T(t_i)%20-%20T_%5Ctext%7Benv%7D)">, and not the variability of <img src="https://latex.codecogs.com/png.latex?T(t_i)">.</p>
<p>Looking at the right panel of Figure&nbsp;1, we can see that the range of variation in the response covers only a few units. Therefore, in this case, we will opt for a moderately informative gamma distribution, which concentrates a high probability in the interval <img src="https://latex.codecogs.com/png.latex?(0.05,%200.3)">.</p>
<div id="034ec8bb" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">pz.maxent(pz.Gamma(), lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, upper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Finally, we could elicitate a prior distribution for <img src="https://latex.codecogs.com/png.latex?%5Calpha">. However, it is not a parameter with an intuitive interpretation.</p>
<p>What we can do is establish a prior for the initial temperature, which implicitly determines a prior for <img src="https://latex.codecogs.com/png.latex?%5Calpha">.</p>
<p>Since in our case we know the water temperature at <img src="https://latex.codecogs.com/png.latex?t%20=%200">, we will consider two approaches:</p>
<ul>
<li><strong>Fixed value</strong> for <img src="https://latex.codecogs.com/png.latex?T(0)">: in this case, <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is fixed to <img src="https://latex.codecogs.com/png.latex?%5Clog(T(0)%20-%20T_%5Ctext%7Benv%7D)">.</li>
<li><strong>Informative distribution</strong> for <img src="https://latex.codecogs.com/png.latex?T(0)">: centered on the observed value. We use a normal distribution with mean <img src="https://latex.codecogs.com/png.latex?T(0)"> and standard deviation of <img src="https://latex.codecogs.com/png.latex?0.3"> °C, which is equivalent to saying that the initial temperature differs by at most one degree from the measured temperature.</li>
</ul>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>From the photo shared in X’s post, the following time and temperature values can be obtained:</p>
<div id="02384a55" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">T_env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb5-2">time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">320</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># en horas</span></span>
<span id="cb5-3">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stanley"</span>: np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">70.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">65.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">60.0</span>]),</span>
<span id="cb5-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aluminio"</span>: np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">62.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">57.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.0</span>]),</span>
<span id="cb5-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lumilagro"</span>: np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">65.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">60.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">55.0</span>]),</span>
<span id="cb5-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nn-rosa"</span>: np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">47.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">37.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.0</span>])</span>
<span id="cb5-8">}</span></code></pre></div>
</div>
<p>It should be noted that the value of the ambient temperature (<code>T_env</code>) is an assumption, as it does not appear in any of the posts.</p>
<div id="cell-fig-data" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb6-2">fig.subplots_adjust(bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (brand, temperatures) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data.items()):</span>
<span id="cb6-5">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(time, temperatures, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"C</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-6">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(time, np.log(temperatures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"C</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-7">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].scatter(time, temperatures, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"C</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>brand)</span>
<span id="cb6-8">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(time, np.log(temperatures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"C</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>brand)</span>
<span id="cb6-9"></span>
<span id="cb6-10">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiempo (horas)"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperatura (°C)"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-11">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiempo (horas)"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">log(T(t) - T_</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">text</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ambiente}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)$"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-12">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb6-13">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb6-14"></span>
<span id="cb6-15">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T_env, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.2"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb6-16"></span>
<span id="cb6-17">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].legend(</span>
<span id="cb6-18">    loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lower center"</span>,</span>
<span id="cb6-19">    ncol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb6-20">    bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>),</span>
<span id="cb6-21">    bbox_transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fig.transFigure,</span>
<span id="cb6-22">    handletextpad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb6-23">    columnspacing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-24">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-data" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/fig-data-output-1.png" id="fig-data" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2
</figcaption>
</figure>
</div>
</div>
</div>
<p>At first glance, the “stanley” thermos maintains the highest temperatures at all times, while the one with the “nn tapa rosa” stands out for its poor performance. The “lumilagro”, on the other hand, performs better than the “aluminio” one: although it started with a lower initial temperature, it cooled down more slowly. Finally, it cannot be said with certainty whether the “stanley” thermos really outperforms the “lumilagro”, since, although its measurements were always higher, it also started with a higher temperature.</p>
<p>On the other hand, the right panel of Figure&nbsp;2 shows a linear trend for each thermos, which is consistent with the use of a linear model on <img src="https://latex.codecogs.com/png.latex?%5Clog(T(t)%20-%20T_%5Ctext%7Benv%7D)">.</p>
</section>
<section id="modelos" class="level2">
<h2 class="anchored" data-anchor-id="modelos">Modelos</h2>
<section id="model-1-a-thermos-known-intercept" class="level3">
<h3 class="anchored" data-anchor-id="model-1-a-thermos-known-intercept">Model 1: A thermos + known intercept</h3>
<p>Before we start working with a model that considers all brands together, let’s work with a model for the brand <code>“stanley”</code> only.</p>
<div id="156f6045" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="annotated-cell-7" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_1:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-7-2" class="code-annotation-target">    T_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Data(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T_0"</span>, data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stanley"</span>].item(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-7-3" class="code-annotation-target">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, np.log(T_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env))</span>
<span id="annotated-cell-7-4">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.3</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="annotated-cell-7-5">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>)</span>
<span id="annotated-cell-7-6">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> time</span>
<span id="annotated-cell-7-7">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log(T - T_env)"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.log(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stanley"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env))</span>
<span id="annotated-cell-7-8"></span>
<span id="annotated-cell-7-9">display(model_1.to_graphviz())</span>
<span id="annotated-cell-7-10"></span>
<span id="annotated-cell-7-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_1:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-7-12" class="code-annotation-target">    idata_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random_seed, target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-7" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="2" data-code-annotation="1">It registers the initial temperature as data within the model so that it displays the corresponding node in the graph.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="3" data-code-annotation="2">It registers <code>alpha</code> with a <code>Deterministic</code> so that its values are stored in the <code>posterior</code> group of InferenceData.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="12" data-code-annotation="3">The same <code>random_seed</code> and a high <code>target_accept</code> value are always used to reduce the chance of divergence.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-8-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [beta, sigma]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fd4cf0b6690244fba96081ce492a8540","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.</code></pre>
</div>
</div>
<p>Next, we use <code>az.summary()</code> to obtain a summary of the marginal posteriors:</p>
<div id="c49f2130" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">az.summary(idata_1, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_3%</th>
<th data-quarto-table-cell-role="th">hdi_97%</th>
<th data-quarto-table-cell-role="th">mcse_mean</th>
<th data-quarto-table-cell-role="th">mcse_sd</th>
<th data-quarto-table-cell-role="th">ess_bulk</th>
<th data-quarto-table-cell-role="th">ess_tail</th>
<th data-quarto-table-cell-role="th">r_hat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">beta</td>
<td>0.059</td>
<td>0.010</td>
<td>0.041</td>
<td>0.081</td>
<td>0.000</td>
<td>0.000</td>
<td>1421.0</td>
<td>1350.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">sigma</td>
<td>0.095</td>
<td>0.047</td>
<td>0.024</td>
<td>0.179</td>
<td>0.001</td>
<td>0.001</td>
<td>921.0</td>
<td>899.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>For both parameters, the effective sample size is large enough, and the chains converge and mix correctly. <sup>1</sup></p>
<div id="cell-fig-posterior-summary-1" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_estimated_curves(idata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>idata_1, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stanley"</span>], T_env<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T_env)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="fig-posterior-summary-1" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-posterior-summary-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/fig-posterior-summary-1-output-1.png" id="fig-posterior-summary-1" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-posterior-summary-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3
</figcaption>
</figure>
</div>
</div>
</div>
<p>In the right panel of Figure&nbsp;3, the fitted regression line is shown along with the 50% and 95% credible intervals on the transformed data scale, while the left panel shows the results on the original scale. The regression line fits the points well, although the uncertainty associated with its estimate increases over time. On the other hand, the absence of uncertainty at $t=0$ is explained by the fact that the intercept has a fixed value.</p>
</section>
<section id="model-2-one-thermos-unknown-intercept" class="level3">
<h3 class="anchored" data-anchor-id="model-2-one-thermos-unknown-intercept">Model 2: One thermos + unknown intercept</h3>
<p>In this second model, we still work with a single thermos. The difference is that instead of fixing the initial temperature to the observed value, we assign it a highly informative prior distribution. This way, we continue incorporating the information we already have, but we don’t force the regression line to pass through a fixed point.</p>
<div id="633429bb" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_2:</span>
<span id="cb11-2">    T_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T_0"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb11-3">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, np.log(T_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env))</span>
<span id="cb11-4">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.34</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.8</span>)</span>
<span id="cb11-5">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>)</span>
<span id="cb11-6">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> time)</span>
<span id="cb11-7">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log(T - T_env)"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.log(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stanley"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env))</span>
<span id="cb11-8"></span>
<span id="cb11-9">display(model_2.to_graphviz())</span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_2:</span>
<span id="cb11-12">    idata_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random_seed, target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-11-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [T_0, beta, sigma]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7ddf3cd721334fa994e94b420d1ccbb9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.</code></pre>
</div>
</div>
<div id="e85dc913" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">az.summary(idata_2, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T_0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_3%</th>
<th data-quarto-table-cell-role="th">hdi_97%</th>
<th data-quarto-table-cell-role="th">mcse_mean</th>
<th data-quarto-table-cell-role="th">mcse_sd</th>
<th data-quarto-table-cell-role="th">ess_bulk</th>
<th data-quarto-table-cell-role="th">ess_tail</th>
<th data-quarto-table-cell-role="th">r_hat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">T_0</td>
<td>79.993</td>
<td>0.508</td>
<td>79.056</td>
<td>80.967</td>
<td>0.010</td>
<td>0.009</td>
<td>2720.0</td>
<td>2448.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">alpha</td>
<td>4.025</td>
<td>0.009</td>
<td>4.008</td>
<td>4.042</td>
<td>0.000</td>
<td>0.000</td>
<td>2720.0</td>
<td>2448.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">beta</td>
<td>0.059</td>
<td>0.010</td>
<td>0.040</td>
<td>0.079</td>
<td>0.000</td>
<td>0.000</td>
<td>1891.0</td>
<td>1432.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">sigma</td>
<td>0.096</td>
<td>0.049</td>
<td>0.022</td>
<td>0.187</td>
<td>0.001</td>
<td>0.001</td>
<td>1399.0</td>
<td>1500.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="a89dae32" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_estimated_curves(idata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>idata_2, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stanley"</span>], T_env<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T_env)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="67572218" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">az.plot_forest([idata_1, idata_2], model_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Modelo 1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Modelo 2"</span>], var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>], combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The marginal posteriors for <code>beta</code> and <code>sigma</code> are practically identical to those from the first model. In other words, the conclusions we can draw about <code>beta</code> and <code>sigma</code> are similar to those obtained when using a fixed initial temperature. In addition, the effective sample sizes are consistently higher than those obtained previously.</p>
</section>
<section id="model-3-all-brands" class="level3">
<h3 class="anchored" data-anchor-id="model-3-all-brands">Model 3: All brands</h3>
<p>Now that we are familiar with the model for a single brand, we can extend it to work with all brands.</p>
<p>Instead of having a single <code>T_0</code>, <code>alpha</code>, and <code>beta</code>, we will have one for each brand. In PyMC, this is achieved using <code>dims</code>, which allows us to work with vectors of random variables instead of scalars.</p>
<div id="d4eeedf3" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="annotated-cell-14" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-14-1" class="code-annotation-target">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(np.concatenate([temps <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> temps <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data.values()]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env)</span>
<span id="annotated-cell-14-2">times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.tile(time, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="annotated-cell-14-3">brand_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.repeat(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="annotated-cell-14-4">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="annotated-cell-14-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brand"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(data)</span>
<span id="annotated-cell-14-6">}</span>
<span id="annotated-cell-14-7"></span>
<span id="annotated-cell-14-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_3:</span>
<span id="annotated-cell-14-9">    T_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T_0"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[v.item(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data.values()], sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brand"</span>)</span>
<span id="annotated-cell-14-10">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, np.log(T_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env), dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brand"</span>)</span>
<span id="annotated-cell-14-11">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.3</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.8</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brand"</span>)</span>
<span id="annotated-cell-14-12">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>)</span>
<span id="annotated-cell-14-13">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, alpha[brand_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta[brand_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> times)</span>
<span id="annotated-cell-14-14">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log(T - T_env)"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span>
<span id="annotated-cell-14-15"></span>
<span id="annotated-cell-14-16">display(model_3.to_graphviz())</span>
<span id="annotated-cell-14-17"></span>
<span id="annotated-cell-14-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_3:</span>
<span id="annotated-cell-14-19">    idata_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random_seed, target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-14" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="1,2,3,4,5,6" data-code-annotation="1">One-dimensional arrays are created with the temperatures, times, and brand index for all brands. In addition, a coordinate dictionary is prepared so that <code>dims="brand"</code> can be used in the model.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-15-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [T_0, beta, sigma]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3fe21cf87a6b48ff85662092f6a1c90f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.</code></pre>
</div>
</div>
<p>Let’s look at the posterior summary returned by <code>az.summary()</code>.</p>
<div id="8ff34e6b" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">az.summary(idata_3, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T_0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_3%</th>
<th data-quarto-table-cell-role="th">hdi_97%</th>
<th data-quarto-table-cell-role="th">mcse_mean</th>
<th data-quarto-table-cell-role="th">mcse_sd</th>
<th data-quarto-table-cell-role="th">ess_bulk</th>
<th data-quarto-table-cell-role="th">ess_tail</th>
<th data-quarto-table-cell-role="th">r_hat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">T_0[stanley]</td>
<td>79.971</td>
<td>0.487</td>
<td>79.047</td>
<td>80.883</td>
<td>0.008</td>
<td>0.008</td>
<td>3452.0</td>
<td>2791.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">T_0[aluminio]</td>
<td>79.895</td>
<td>0.493</td>
<td>79.028</td>
<td>80.855</td>
<td>0.008</td>
<td>0.008</td>
<td>3578.0</td>
<td>3149.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">T_0[lumilagro]</td>
<td>74.971</td>
<td>0.483</td>
<td>74.097</td>
<td>75.889</td>
<td>0.008</td>
<td>0.007</td>
<td>4030.0</td>
<td>3046.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">T_0[nn-rosa]</td>
<td>79.933</td>
<td>0.487</td>
<td>79.015</td>
<td>80.797</td>
<td>0.008</td>
<td>0.008</td>
<td>3840.0</td>
<td>3018.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">beta[stanley]</td>
<td>0.056</td>
<td>0.005</td>
<td>0.047</td>
<td>0.067</td>
<td>0.000</td>
<td>0.000</td>
<td>2920.0</td>
<td>2203.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">beta[aluminio]</td>
<td>0.096</td>
<td>0.005</td>
<td>0.086</td>
<td>0.105</td>
<td>0.000</td>
<td>0.000</td>
<td>2860.0</td>
<td>2534.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">beta[lumilagro]</td>
<td>0.063</td>
<td>0.005</td>
<td>0.053</td>
<td>0.073</td>
<td>0.000</td>
<td>0.000</td>
<td>3685.0</td>
<td>2653.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">beta[nn-rosa]</td>
<td>0.269</td>
<td>0.005</td>
<td>0.259</td>
<td>0.278</td>
<td>0.000</td>
<td>0.000</td>
<td>3425.0</td>
<td>2750.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">sigma</td>
<td>0.050</td>
<td>0.014</td>
<td>0.028</td>
<td>0.075</td>
<td>0.000</td>
<td>0.000</td>
<td>2049.0</td>
<td>2109.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The first thing that stands out is that the posterior means of the initial temperatures fall into two groups: one with values close to 80 and another around 75. This result makes sense, since the initial temperature was 80 °C for all thermoses except the Lumilagro, which was 75 °C.</p>
<p>The <code>beta</code> values for each thermos also show some heterogeneity. In this case, we can conclude that the “nn-rosa” thermos has the highest heat loss (largest <code>beta</code> value), although it’s not possible to determine with certainty which one offers the best heat retention.</p>
<p>Finally, we observe that the effective sample sizes range from 2000 to 4000, exceeding in all cases those obtained in the previous models. This suggests that the posterior has a geometry more accessible to the NUTS sampler used by PyMC.</p>
<p>Using the <code>az.plot_forest()</code> function, we can obtain a summary of the marginal distribution of <code>beta</code> for each brand:</p>
<div id="1ec2edf3" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">az.plot_forest(idata_3, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As mentioned earlier, the “nn-rosa” shows the highest heat loss, followed by the “aluminio” thermos, and finally the “lumilagro” and “stanley” thermoses. At first glance, it might seem that the “stanley” has a better ability to retain heat, although this plot alone does not allow us to draw definitive conclusions.</p>
<p>Although the <code>sigma</code> parameter is not inherently relevant, it is interesting to explore its posterior distribution, as it provides a measure of the random uncertainty around our regression line.</p>
<div id="764917bc" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">az.plot_forest(</span>
<span id="cb21-2">    [idata_2, idata_3],</span>
<span id="cb21-3">    model_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Modelo 2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Modelo 3"</span>],</span>
<span id="cb21-4">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>,</span>
<span id="cb21-5">    combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb21-6">    figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb21-7">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>By using the data from all thermoses in this third model, we obtain an estimate of <code>sigma</code> with considerably less uncertainty.</p>
<p>Finally, we can visualize the estimated curves for each thermos, both on their original scale and on the transformed scale:</p>
<div id="667b84b2" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, brand <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data):</span>
<span id="cb22-2">    fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_estimated_curves(</span>
<span id="cb22-3">        idata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>idata_3.sel(brand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>brand),</span>
<span id="cb22-4">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time,</span>
<span id="cb22-5">        y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[brand],</span>
<span id="cb22-6">        T_env<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>T_env,</span>
<span id="cb22-7">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"C</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb22-8">    )</span>
<span id="cb22-9">    fig.suptitle(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Marca: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>brand<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-19-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-19-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-19-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>First, we can see that the uncertainty in the regression line for the “stanley” brand has decreased. In addition, it seems that for those thermoses whose water temperature approached the ambient temperature more quickly (i.e., those with lower heat retention capacity), the uncertainty is smaller. The clearest example of this behavior is the “nn-rosa” thermos, whose temperature was almost equal to the ambient temperature by the end of the experiment.</p>
</section>
<section id="model-4-all-brands-partial-pooling-for" class="level3">
<h3 class="anchored" data-anchor-id="model-4-all-brands-partial-pooling-for">Model 4: All brands + partial pooling for $$</h3>
<p>Finally, we will create a hierarchical model in which we assume that the cooling rates <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> belong to a common population. By sharing information across thermoses in this way, we expect to obtain more precise and stable posteriors, reflecting both the individual characteristics of each thermos and the overall trend of the population.</p>
<div id="b6cd07d4" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="annotated-cell-19" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-19-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_4:</span>
<span id="annotated-cell-19-2">    T_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T_0"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[v.item(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data.values()], sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brand"</span>)</span>
<span id="annotated-cell-19-3">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, np.log(T_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T_env), dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brand"</span>)</span>
<span id="annotated-cell-19-4"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-19" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-19-5" class="code-annotation-target">    beta_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta_mu"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.8</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-19" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-19-6" class="code-annotation-target">    beta_sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.InverseGamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta_sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="annotated-cell-19-7">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(</span>
<span id="annotated-cell-19-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>,</span>
<span id="annotated-cell-19-9">        alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(beta_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> beta_sigma)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="annotated-cell-19-10">        beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beta_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (beta_sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="annotated-cell-19-11">        dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brand"</span></span>
<span id="annotated-cell-19-12">    )</span>
<span id="annotated-cell-19-13"></span>
<span id="annotated-cell-19-14">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>)</span>
<span id="annotated-cell-19-15">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, alpha[brand_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta[brand_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> times)</span>
<span id="annotated-cell-19-16">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log(T - T_env)"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span>
<span id="annotated-cell-19-17"></span>
<span id="annotated-cell-19-18"></span>
<span id="annotated-cell-19-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_4:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-19" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-19-20" class="code-annotation-target">    idata_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample_prior_predictive(draws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random_seed)</span>
<span id="annotated-cell-19-21">    idata_4.extend(pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random_seed, target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>))</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-19" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-19" data-code-lines="5,7,8,9,10,11,12" data-code-annotation="1">The <code>beta</code> parameters still have a Gamma prior with a common mean and standard deviation. In this case, however, these parameters are unknown and determined by the data.</span>
</dd>
<dt data-target-cell="annotated-cell-19" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-19" data-code-lines="6" data-code-annotation="2">The function <code>pz.maxent(pz.InverseGamma(), lower=0.01, upper=0.2, mass=0.95)</code> is used.</span>
</dd>
<dt data-target-cell="annotated-cell-19" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-19" data-code-lines="20" data-code-annotation="3">Samples from the prior are drawn to generate Figure&nbsp;4.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling: [T_0, beta, beta_mu, beta_sigma, log(T - T_env), sigma]
Initializing NUTS using jitter+adapt_diag...
/home/tomas/miniconda3/envs/pymc-env/lib/python3.12/site-packages/pytensor/tensor/elemwise.py:710: RuntimeWarning: invalid value encountered in log
  variables = ufunc(*ufunc_args, **ufunc_kwargs)
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [T_0, beta_mu, beta_sigma, beta, sigma]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e169c949565f41e8944eec27847a778a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.</code></pre>
</div>
</div>
<p>Below are the marginal posteriors of <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> for both the non-hierarchical and hierarchical models:</p>
<div id="cd727274" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">az.plot_forest(</span>
<span id="cb25-2">    [idata_3, idata_4],</span>
<span id="cb25-3">    model_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Modelo 3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Modelo 4"</span>],</span>
<span id="cb25-4">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>],</span>
<span id="cb25-5">    combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb25-6">    figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb25-7">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Visually, we can conclude that there are no differences between the marginal posteriors of the two models. In other words, the partial pooling provided by the hierarchical model is practically nonexistent.</p>
<p>To understand why no differences are observed between the models, we can examine the prior and posterior of the population mean and standard deviation of <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> (<code>beta_mu</code> and <code>beta_sigma</code>).</p>
<div id="cell-fig-prior-posterior" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">az.plot_dist_comparison(idata_4, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta_mu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta_sigma"</span>], figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="fig-prior-posterior" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-prior-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/fig-prior-posterior-output-1.png" id="fig-prior-posterior" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-prior-posterior-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4
</figcaption>
</figure>
</div>
</div>
</div>
<p>In both cases, the posterior is very similar to the prior. This is because the available information to estimate <code>beta_mu</code> and <code>beta_sigma</code> is insufficient to obtain posteriors with low uncertainty. This result is expected, since the number of groups is very small (only 4). In situations like this, unless strong prior information is available, the hierarchical approach will not yield appreciable differences compared to a model with independent parameters.</p>
</section>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<section id="which-is-the-best-thermos" class="level3">
<h3 class="anchored" data-anchor-id="which-is-the-best-thermos">Which is the best thermos?</h3>
<p>The best thermos is the one with the lowest cooling rate $$.</p>
<p>Based on our model, we can obtain a probabilistic result as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(%5Cbeta_j%20=%20%5Cmin%5Cleft%5C%7B%5Cbeta_1,%20%5Cbeta_2,%20%5Cbeta_3,%20%5Cbeta_4%20%5Cright%5C%7D%20)%20%5Cqquad%20%5Cforall%20j%20%5Cin%20%7B1,%202,%203,%204%7D%0A"></p>
<div id="e719b168" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">beta_argmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata_4.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>].argmin(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-2">p_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(beta_argmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> j).mean().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)]</span>
<span id="cb27-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(data, p_min))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>{'stanley': 0.826, 'aluminio': 0.0, 'lumilagro': 0.174, 'nn-rosa': 0.0}</code></pre>
</div>
</div>
<p>According to our model, there is an 82% probability that the “stanley” thermos is the one that best retains heat.</p>
<p>In practice, it is up to us to decide whether that probability is sufficient to conclude that “stanley” is indeed superior to “lumilagro”. For example, we could also consider the difference in degrees that the “stanley” manages to maintain above the “lumilagro” over time.</p>
<p>Although the result is not particularly surprising, it is also possible to determine probabilistically which is the worst thermos:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(%5Cbeta_j%20=%20%5Cmax%5Cleft%5C%7B%5Cbeta_1,%20%5Cbeta_2,%20%5Cbeta_3,%20%5Cbeta_4%20%5Cright%5C%7D%20)%20%5Cqquad%20%5Cforall%20j%20%5Cin%20%7B1,%202,%203,%204%7D%0A"></p>
<div id="5dac73d0" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">beta_argmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata_4.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>].argmax(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-2">p_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(beta_argmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> j).mean().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)]</span>
<span id="cb29-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(data, p_max))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>{'stanley': 0.0, 'aluminio': 0.0, 'lumilagro': 0.0, 'nn-rosa': 1.0}</code></pre>
</div>
</div>
</section>
</section>
<section id="appendix" class="level2">
<h2 class="anchored" data-anchor-id="appendix">Appendix</h2>
<section id="inference-based-on-uniform-priors" class="level3">
<h3 class="anchored" data-anchor-id="inference-based-on-uniform-priors">Inference based on uniform priors</h3>
<p>It is reasonable to ask whether the effort involved in specifying priors is worthwhile. Below, we fit the multi-brand model using uniform priors and compare the results with those obtained previously.</p>
<div id="749a1d42" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_5:</span>
<span id="cb31-2">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Flat(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brand"</span>)</span>
<span id="cb31-3">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Flat(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brand"</span>)</span>
<span id="cb31-4">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Uniform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, upper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb31-5">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, alpha[brand_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta[brand_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> times)</span>
<span id="cb31-6">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span>
<span id="cb31-7"></span>
<span id="cb31-8">    idata_5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random_seed, target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, progressbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [alpha, beta, sigma]
Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 4 seconds.</code></pre>
</div>
</div>
<div id="7f592572" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">az.plot_forest(</span>
<span id="cb33-2">    [idata_4, idata_5],</span>
<span id="cb33-3">    model_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priors informativos"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priors uniformes"</span>],</span>
<span id="cb33-4">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>],</span>
<span id="cb33-5">    combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb33-6">    figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb33-7">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="9c35e760" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> az.plot_forest(</span>
<span id="cb34-2">    [idata_4, idata_5],</span>
<span id="cb34-3">    model_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priors informativos"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priors uniformes"</span>],</span>
<span id="cb34-4">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>],</span>
<span id="cb34-5">    combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb34-6">    figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb34-7">)</span>
<span id="cb34-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="4711f25a" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> az.plot_forest(</span>
<span id="cb35-2">    [idata_4, idata_5],</span>
<span id="cb35-3">    model_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priors informativos"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priors uniformes"</span>],</span>
<span id="cb35-4">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>],</span>
<span id="cb35-5">    combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb35-6">)</span>
<span id="cb35-7">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/index_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="58f058b9" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">beta_argmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata_5.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>].argmin(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb36-2">p_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(beta_argmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> j).mean().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)]</span>
<span id="cb36-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(data, p_min))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>{'stanley': 0.74575, 'aluminio': 0.001, 'lumilagro': 0.25325, 'nn-rosa': 0.0}</code></pre>
</div>
</div>
<div id="b86f86cc" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">beta_argmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata_5.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>].argmax(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb38-2">p_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(beta_argmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> j).mean().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)]</span>
<span id="cb38-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(data, p_max))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>{'stanley': 0.0, 'aluminio': 0.0, 'lumilagro': 0.0, 'nn-rosa': 1.0}</code></pre>
</div>
</div>
<p>Based on a model with uniform priors, we reach conclusions in the same direction, but with a higher level of uncertainty.</p>
</section>
</section>
<section id="thats-all-folks" class="level2">
<h2 class="anchored" data-anchor-id="thats-all-folks">That’s all folks</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/imgs/thomas_bayes_mate.png" class="img-fluid figure-img" width="500"></p>
<figcaption>A lovely Thomas Bayes enjoying mate</figcaption>
</figure>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>En este blog no hacemos uso de los <em>traceplots</em> porque las cadenas siempre se mezclan bien y resulta suficiente usar el tamaño efectivo de muestra y el <img src="https://latex.codecogs.com/png.latex?%5Chat%7BR%7D">.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/</guid>
  <pubDate>Thu, 14 Aug 2025 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2025-08-14_temperatura-mate/imgs/thomas_bayes_mate.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>When to fix the intercept</title>
  <link>https://tomicapretto.github.io/posts/2025-08-12_regression-with-fixed-intercept/</link>
  <description><![CDATA[ 




<p>I was working on a model where I knew the value of <img src="https://latex.codecogs.com/png.latex?Y"> when <img src="https://latex.codecogs.com/png.latex?X%20=%200">. This left me in the uncomfortable position of deciding whether to give the intercept a strong prior or simply fix it to a constant value. Since I was too lazy to work out the math by hand, I decided to go for a computationally assisted approach to determine whether that choice made sense.</p>
<div id="fe927c4c" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span></code></pre></div>
</details>
</div>
<section id="where-it-fails" class="level2">
<h2 class="anchored" data-anchor-id="where-it-fails">Where it fails</h2>
<p>In the past, I’ve used the <code>heights</code> dataset from Karl Pearson and Alice Lee to teach linear regression. It’s a classic dataset where the goal is to predict a daughter’s height (<img src="https://latex.codecogs.com/png.latex?Y">) from her mother’s height (<img src="https://latex.codecogs.com/png.latex?X">). Let’s have a quick look at it.</p>
<div id="5e9d7d9b" class="cell center-table-40" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">url_heights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/tomicapretto/introduccion_pymc/main/datos/heights.txt"</span></span>
<span id="cb2-2">df_heights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(url_heights, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb2-3">df_heights</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">daughter_height</th>
<th data-quarto-table-cell-role="th">mother_height</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>52.5</td>
<td>59.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>52.5</td>
<td>59.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>53.5</td>
<td>59.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>53.5</td>
<td>59.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>55.5</td>
<td>59.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5519</td>
<td>71.5</td>
<td>70.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5520</td>
<td>73.5</td>
<td>63.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5521</td>
<td>73.5</td>
<td>63.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5522</td>
<td>73.5</td>
<td>63.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5523</td>
<td>73.5</td>
<td>63.5</td>
</tr>
</tbody>
</table>

<p>5524 rows × 2 columns</p>
</div>
</div>
</div>
<div id="434a47fa" class="cell" data-execution_count="3">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-12_regression-with-fixed-intercept/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="model-with-intercept" class="level3">
<h3 class="anchored" data-anchor-id="model-with-intercept">Model with intercept</h3>
<p>A simple linear regression model with both an intercept and a slope is an obvious choice.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY_i%20%5Cmid%20X_i%20=%20x_i%20%5Csim%20%5Ctext%7BNormal%7D(%5Calpha%20+%20%5Cbeta%20x_i,%20%5Csigma%5E2)%0A"></p>
<p>And in Python it just takes us a few lines of code:</p>
<div id="a0c1752f" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_heights[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"daughter_height"</span>].to_numpy()</span>
<span id="cb3-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.column_stack([np.ones_like(y), df_heights[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mother_height"</span>]])</span>
<span id="cb3-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(y, X).fit()</span></code></pre></div>
</div>
<p>The parameter summary is the following:</p>
<div id="51cf7921" class="cell center-table-60" data-execution_count="5">
<div class="cell-output cell-output-display" data-execution_count="5">
<table class="simpletable caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td></td>
<td data-quarto-table-cell-role="th">coef</td>
<td data-quarto-table-cell-role="th">std err</td>
<td data-quarto-table-cell-role="th">t</td>
<td data-quarto-table-cell-role="th">P&gt;|t|</td>
<td data-quarto-table-cell-role="th">[0.025</td>
<td data-quarto-table-cell-role="th">0.975]</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">const</td>
<td>29.7984</td>
<td>0.790</td>
<td>37.703</td>
<td>0.000</td>
<td>28.249</td>
<td>31.348</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">x1</td>
<td>0.5449</td>
<td>0.013</td>
<td>43.125</td>
<td>0.000</td>
<td>0.520</td>
<td>0.570</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>If you’ve ever had to interpret the coefficients of a regression model, you might have said: “The average height of daughters whose mothers are 0 inches tall is 29.8 inches”. Of course, it makes no sense.</p>
</section>
<section id="model-without-intercept" class="level3">
<h3 class="anchored" data-anchor-id="model-without-intercept">Model without intercept</h3>
<p>A natural first reaction might be to question whether you need an intercept at all. In that case, you might go ahead and fit the following model without one:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY_i%20%5Cmid%20X_i%20=%20x_i%20%5Csim%20%5Ctext%7BNormal%7D(%5Cbeta%20x_i,%20%5Csigma%5E2)%0A"></p>
<div id="18cb7875" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">model_no_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(y, X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).fit()</span></code></pre></div>
</div>
<p>Now, the parameter summary contains a single record for the slope:</p>
<div id="a38184bb" class="cell center-table-60" data-execution_count="7">
<div class="cell-output cell-output-display" data-execution_count="7">
<table class="simpletable caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td></td>
<td data-quarto-table-cell-role="th">coef</td>
<td data-quarto-table-cell-role="th">std err</td>
<td data-quarto-table-cell-role="th">t</td>
<td data-quarto-table-cell-role="th">P&gt;|t|</td>
<td data-quarto-table-cell-role="th">[0.025</td>
<td data-quarto-table-cell-role="th">0.975]</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">x1</td>
<td>1.0210</td>
<td>0.001</td>
<td>1871.328</td>
<td>0.000</td>
<td>1.020</td>
<td>1.022</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="comparison" class="level3">
<h3 class="anchored" data-anchor-id="comparison">Comparison</h3>
<p>Instead of focusing on the exact values of the estimated slopes, let’s look at the fitted regression lines overlaid on the original scatterplot.</p>
<div id="4fa28dbe" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb5-2">ax.scatter(df_heights[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mother_height"</span>], df_heights[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"daughter_height"</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb5-3">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mother height (in)"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Daughter height (in)"</span>, xlim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>), ylim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, model.params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C3"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model with unknown $</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">alpha$ ($</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">hat{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">alpha}=29.8$)"</span>)</span>
<span id="cb5-6">ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_no_intercept.params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.3"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model with fixed $</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">alpha$ ($</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">alpha=0$)"</span>)</span>
<span id="cb5-7">ax.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-12_regression-with-fixed-intercept/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>At first glance, the two models produce remarkably different regression lines, but it is not immediately clear which one best describes the association between the heights. To shed some light on this, let’s look at the RMSE for each model:</p>
<div id="ba4203e9" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_rmse(y, y_hat):</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.sqrt(np.mean((y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_hat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb6-3"></span>
<span id="cb6-4">rmse_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_rmse(y, model.predict(X))</span>
<span id="cb6-5">rmse_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_rmse(y, model_no_intercept.predict(X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Model with intercept RMSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rmse_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Model without intercept RMSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rmse_2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model with intercept RMSE: 2.262
Model without intercept RMSE: 2.536</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>The model without an intercept, though initially appealing in theory, ultimately produces larger errors. This is something we could have expected: forcing the intercept to a fixed value, especially when <img src="https://latex.codecogs.com/png.latex?X%20=%200"> lies outside the range of the observed data, can bias the slope estimate.</p>
<p>As George Box famously remarked, <em>all models are wrong, but some are useful</em>. Usefulness often depends on the range of the explanatory variables, and a model that performs well within a given range may fail to do so outside it.</p>
</section>
</section>
<section id="where-it-works" class="level2">
<h2 class="anchored" data-anchor-id="where-it-works">Where it works</h2>
<p>The previous example made it clear that haphazardly fixing the intercept to a value can have unintended consequences.</p>
<p>However, in the problem that motivated this blog post, I do have a solid basis for fixing the intercept to a specific value.</p>
<p>Let’s now run a simulation in which the model we use matches the underlying data generating process and <img src="https://latex.codecogs.com/png.latex?X=0"> lies within the range of observed data.</p>
<p>This turn, we will simulate data using a linear regression model with <img src="https://latex.codecogs.com/png.latex?%5Calpha=2">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta=1">, and <img src="https://latex.codecogs.com/png.latex?%5Csigma=2">.</p>
<p>We will run <img src="https://latex.codecogs.com/png.latex?S=1000"> iterations where we observe <img src="https://latex.codecogs.com/png.latex?N=50"> data points with <img src="https://latex.codecogs.com/png.latex?X%20%5Cin%20%5B0,%2010%5D">. In the first scenario, we will estimate both <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta">. In the second, we will fix <img src="https://latex.codecogs.com/png.latex?%5Calpha"> to its true value, and only estimate <img src="https://latex.codecogs.com/png.latex?%5Cbeta">. In both cases, we will record the point estimates as well as the 95% confidence interval for the slope as reported by <code>statsmodels</code>.</p>
<p>To illustrate, here’s what the simulated data will look like in any given iteration:</p>
<div id="6043a37c" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of data points</span></span>
<span id="cb8-2">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of simulations</span></span>
<span id="cb8-3"></span>
<span id="cb8-4">a_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True intercept</span></span>
<span id="cb8-5">b_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True slope</span></span>
<span id="cb8-6">sigma_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True residual standard deviation</span></span>
<span id="cb8-7"></span>
<span id="cb8-8">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span>
<span id="cb8-9"></span>
<span id="cb8-10">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb8-11">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma_true)</span>
<span id="cb8-12"></span>
<span id="cb8-13">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb8-14">ax.scatter(x, y, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simulated data"</span>)</span>
<span id="cb8-15">ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, a_true), slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>b_true, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C3"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True regression line"</span>)</span>
<span id="cb8-16">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)</span>
<span id="cb8-17">ax.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-12_regression-with-fixed-intercept/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="scenario-1-unknown-intercept" class="level3">
<h3 class="anchored" data-anchor-id="scenario-1-unknown-intercept">Scenario 1: Unknown intercept</h3>
<p>Here we just simulate datasets and estimate <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> via classic OLS.</p>
<p>Let’s run the simulation and explore the sampling distribution of <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Calpha%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D">.</p>
<div id="1c4315f4" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">unknown_intercept_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb9-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intercept"</span>: [],</span>
<span id="cb9-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>: [],</span>
<span id="cb9-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope_ci"</span>: []</span>
<span id="cb9-5">}</span>
<span id="cb9-6"></span>
<span id="cb9-7">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.column_stack([np.ones_like(x),x])</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(S):</span>
<span id="cb9-10">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma_true)</span>
<span id="cb9-11">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(y, X).fit()</span>
<span id="cb9-12">    conf_int <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.conf_int()</span>
<span id="cb9-13"></span>
<span id="cb9-14">    unknown_intercept_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intercept"</span>].append(model.params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].item())</span>
<span id="cb9-15">    unknown_intercept_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>].append(model.params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].item())</span>
<span id="cb9-16">    unknown_intercept_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope_ci"</span>].append(conf_int[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb9-17"></span>
<span id="cb9-18"></span>
<span id="cb9-19">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), sharey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-20">fig.subplots_adjust(wspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb9-21"></span>
<span id="cb9-22">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(unknown_intercept_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intercept"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb9-23">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(unknown_intercept_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb9-24"></span>
<span id="cb9-25">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">hat{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">alpha}$"</span>, yticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[])</span>
<span id="cb9-26">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">hat{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">beta}$"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-27"></span>
<span id="cb9-28">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axvline(a_true, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C3"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-29">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].axvline(b_true, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C3"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-12_regression-with-fixed-intercept/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>There are no surprises here: both distributions are centered around the true values of <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta">.</p>
</section>
<section id="scenaro-2-fixed-intercept" class="level3">
<h3 class="anchored" data-anchor-id="scenaro-2-fixed-intercept">Scenaro 2: Fixed intercept</h3>
<p>In this other scenario, we again simulate datasets and estimate parameters via OLS, but this time we fix the value of the intercept to <img src="https://latex.codecogs.com/png.latex?%5Calpha=2">.</p>
<div id="e242c3e6" class="cell" data-execution_count="12">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">known_intercept_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb10-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>: [],</span>
<span id="cb10-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope_ci"</span>: []</span>
<span id="cb10-4">}</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(S):</span>
<span id="cb10-7">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma_true)</span>
<span id="cb10-8">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a_true, x).fit()</span>
<span id="cb10-9">    known_intercept_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>].append(model.params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].item())</span>
<span id="cb10-10">    known_intercept_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope_ci"</span>].append(model.conf_int()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb10-11"></span>
<span id="cb10-12">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb10-13">ax.hist(known_intercept_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb10-14">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">hat{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">beta}$"</span>, yticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[])</span>
<span id="cb10-15">ax.axvline(b_true, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-12_regression-with-fixed-intercept/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The sampling distribution of <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D"> is again centered on its true value, but it is now more concentrated around that center than before.</p>
<p>To finalize, we can also compare the sampling distribution of the length of the 95% CI for <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D"> between the two scenarios.</p>
<div id="c4c8da4a" class="cell" data-execution_count="13">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">slope_cis_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack(unknown_intercept_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope_ci"</span>])</span>
<span id="cb11-2">slope_cis_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack(known_intercept_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope_ci"</span>])</span>
<span id="cb11-3"></span>
<span id="cb11-4">bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb11-7">ax.hist(</span>
<span id="cb11-8">    np.diff(slope_cis_1, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).flatten(),</span>
<span id="cb11-9">    density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-10">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C0"</span>,</span>
<span id="cb11-11">    bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb11-12">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,</span>
<span id="cb11-13">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model with unknown $</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">alpha$"</span>,</span>
<span id="cb11-14">)</span>
<span id="cb11-15"></span>
<span id="cb11-16">ax.hist(</span>
<span id="cb11-17">    np.diff(slope_cis_2, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).flatten(),</span>
<span id="cb11-18">    density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-19">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1"</span>,</span>
<span id="cb11-20">    bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb11-21">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,</span>
<span id="cb11-22">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model with fixed $</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">alpha$"</span>,</span>
<span id="cb11-23">)</span>
<span id="cb11-24"></span>
<span id="cb11-25">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"95% CI length"</span>, yticks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[])</span>
<span id="cb11-26">ax.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2025-08-12_regression-with-fixed-intercept/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Not only does the sampling distribution of <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D"> have lower uncertainty, but the confidence intervals in each individual iteration are also more concentrated around the estimate.</p>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Even if the intercept’s meaning doesn’t make sense, leaving it out of a regression model is usually a bad idea.</p>
<p>That said, there are scenarios where fixing the intercept to zero or to another meaningful value can be justified. And in such cases, if we are right, doing so may actually improve the estimation of other unknown parameters.</p>


</section>

 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2025-08-12_regression-with-fixed-intercept/</guid>
  <pubDate>Tue, 12 Aug 2025 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2025-08-12_regression-with-fixed-intercept/imgs/cover.png" medium="image" type="image/png" height="110" width="144"/>
</item>
<item>
  <title>Data simulation with PyMC</title>
  <link>https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/</link>
  <description><![CDATA[ 




<p>To simulate data in Python, people generally use NumPy or SciPy. Their interfaces are simple and easy to use. For example, to simulate values from a normal distribution, <code>np.random.normal()</code> is all we need.</p>
<p>But not all the scenarios where one may want to simulate data are as simple as our example above. In statistics, quite often we want to perform parameter recovery studies. These tell us if our model and estimation procedure are able to recover the true value of the parameters of the assumed data generating process.</p>
<p>To perform a parameter recovery study, we roughly follow the steps below:</p>
<ol type="1">
<li>Define model (input variables, parameters, and output variables)</li>
<li>Set model parameters to some plausible values</li>
<li>Simulate values of the outcome variable</li>
<li>Estimate the parameters</li>
<li>Compare the parameter estimates against the true values</li>
</ol>
<p>If we wanted to do this using NumPy, we would need to write the model from scratch using functions in its <code>random</code> module. In general, when our goal is to perform estimation and prediction, we don’t write models from scratch in NumPy. Rather, we use the interface provided by another library that usually comes with the tools needed to do estimation, criticism, prediction, etc.</p>
<p>What the previous paragraph highlights is that, at the end of the day, the model is implemented twice. One implementation is used to carry out simulation and parameter recovery, the other is used to estimate the parameters. As the complexity of the model increases, it becomes increasingly harder to avoid mistakes in the implementation of our model in a pure NumPy or SciPy approach.</p>
<p>Fortunately, for those of us following a Bayesian approach, there’s PyMC. The model representation in PyMC gives users the possibility to do both simulation and estimation using the same model object.</p>
<p>Through a series of examples of increasing complexity, I’m going to show how to simulate data with PyMC in the context of a parameter recovery study. In our journey, we’ll learn about some PyMC specific terminologies and functions including:</p>
<ul>
<li><code>pm.draw()</code></li>
<li><code>pm.do()</code> and <code>pm.observe()</code></li>
<li><code>coords</code> and <code>dims</code></li>
<li><code>pm.Data</code> and <code>pm.Deterministic</code></li>
</ul>
<p>Hopefully, the groupings will make sense by the end of this post.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pymc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span></code></pre></div>
</div>
<div id="cell-3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"happy data simulation"</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A fancy way to determine a seed</span></span>
<span id="cb2-2">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(seed)              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random number generator</span></span></code></pre></div>
</div>
<section id="a-simple-normal-model" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-normal-model">A simple normal model</h2>
<p>It all starts with a very simple model. There’s an outcome variable <img src="https://latex.codecogs.com/png.latex?Y"> which we model with a normal distribution, and we’re interested in the estimation of the mean and standard deviation parameters, <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20%5Cmid%20%5Cmu,%20%5Csigma%20%20%20%20&amp;%5Csim%20%5Ctext%7BNormal%7D(%5Cmu,%20%5Csigma%5E2)%20%5C%5C%0A%5Cmu%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%201%5E2)%20%5C%5C%0A%5Csigma%20%20&amp;%5Csim%20%5Ctext%7BGamma%7D(2,%202)%0A%5Cend%7Baligned%7D%0A"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?i%20=%201,%20%5Cdots,%20N">. In this case, as we’re starting small, we ill use <img src="https://latex.codecogs.com/png.latex?N%20=%2010">.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="annotated-cell-3-2"></span>
<span id="annotated-cell-3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-4" class="code-annotation-target">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-3-5" class="code-annotation-target">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-3-6" class="code-annotation-target">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="annotated-cell-3-7"></span>
<span id="annotated-cell-3-8">model.to_graphviz()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="4" data-code-annotation="1">Prior for <img src="https://latex.codecogs.com/png.latex?%5Cmu"></span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="5" data-code-annotation="2">Prior for <img src="https://latex.codecogs.com/png.latex?%5Csigma"></span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="6" data-code-annotation="3">The observational model. <code>shape=N</code> indicates there are <code>N</code> values of <code>y</code>.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-4-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Note that we have created a PyMC model without any observed data. If you’re already familiar with PyMC, don’t look for the <code>observed</code> keyword in the distribution for <img src="https://latex.codecogs.com/png.latex?Y">, you won’t find it.</p>
<p>To simulate values from a PyMC distribution, there’s the very handy <code>pm.draw()</code> function. It does what its name says: drawing samples from a probability distribution<sup>1</sup>.</p>
<p>Let’s draw a value from the distribution of <img src="https://latex.codecogs.com/png.latex?%5Cmu">:</p>
<div id="cell-10" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pm.draw(mu)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array(0.02122677)</code></pre>
</div>
</div>
<p>You want many values? No problem:</p>
<div id="cell-12" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">pm.draw(mu, draws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([ 0.10972394, -0.46840241,  2.81970857,  0.1552543 ,  0.89596717,
       -0.86260537,  0.31740876, -0.95548771,  0.68387801,  2.33809632])</code></pre>
</div>
</div>
<p>How about reproducibility? It has you covered with <code>random_seed</code>. You can pass an integer seed or a random number generator. I prefer the latter and I will use it throughout this blog post.</p>
<div id="cell-14" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pm.draw(sigma, random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>array(0.66709727)</code></pre>
</div>
</div>
<p>Finally, the last thing I’m going to say about <code>pm.draw()</code> is that it accepts a sequence of random variables. Below, we get a draw for both <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</p>
<div id="cell-16" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">mu_value, sigma_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw([mu, sigma], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb9-2">mu_value, sigma_value</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>(array(-0.64551614), array(0.29948268))</code></pre>
</div>
</div>
<p>The next step is to set these parameter values in the model. This is where the <code>pm.do()</code> function comes into play. The name of the function comes from the causal inference literature and it is used to perform “interventions” in a model graph. For our purposes, we can think of it as a way to assign specific values to model parameters. If you’re curious about it you can have a look at <a href="https://www.pymc-labs.com/blog-posts/causal-analysis-with-pymc-answering-what-if-with-the-new-do-operator/">Causal analysis with PyMC: Answering “What If?” with the new do operator</a> and <a href="https://www.pymc.io/projects/examples/en/latest/causal_inference/interventional_distribution.html">Interventional distributions and graph mutation with the do-operator</a>.</p>
<p>Let’s return to our topic. To assign values to model parameters using <code>pm.do()</code>, we pass it a model instance and a dictionary that maps variable names to values. The output we obtain is a new PyMC model instance.</p>
<div id="cell-18" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">model_fixed_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.do(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>: mu_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>: sigma_value})</span>
<span id="cb11-2">model_fixed_parameters.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-9-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>In this model new instance, the nodes for <code>mu</code> and <code>sigma</code> got updated. They don’t represent random variables anymore, they are now constant values.</p>
<p>Now that the parameter values are fixed, we need to simulate values from the outcome variable <code>y</code>. To do so, we use <code>pm.draw()</code> again. Note that we access the random variable <code>y</code> from the model object, as there’s no global variable that represents it.</p>
<div id="cell-20" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(model_fixed_parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb12-2">y_values</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>array([-0.93216552, -0.37497902,  0.02807845, -0.53793148, -0.99724182,
       -0.77754811, -0.60105837, -0.34428665, -0.63623636, -0.66625698])</code></pre>
</div>
</div>
<p>The next step is to set the “observed” values of the outcome variable in the original model, where <code>mu</code> and <code>sigma</code> are random variables. This is where <code>pm.observe()</code> comes into play. Unlike <code>pm.do()</code>, <code>pm.observe()</code> doesn’t convert random variables into fixed quantities. Instead, it attaches observed values —realizations of these random variables— that are later used to condition inference.</p>
<p>The usage is analog to <code>pm.do()</code>. We pass a model, a dictionary mapping variables to values and it returns a new PyMC model.</p>
<div id="cell-22" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">model_observed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.observe(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y_values})</span>
<span id="cb14-2">model_observed_data.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-11-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Finally, we now can perform inference and evaluate whether the posterior concentrates around the parameter value used to simulate the values of the outcome.</p>
<div id="cell-24" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_observed_data:</span>
<span id="cb15-2">    idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [mu, sigma]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"faeb20a282f5438bb29d8c38b6ba3288","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">az.plot_posterior(idata, ref_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mu_value, sigma_value])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And everything worked just as expected.</p>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p>Since we’re going to follow the same steps in all the examples below, let’s summarise them here for reference.</p>
<ol type="1">
<li>Define model (input variables, parameters, and output variables)</li>
</ol>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb19-4">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-5">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb19-6">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span></code></pre></div>
<ol start="2" type="1">
<li>Set model parameters to some plausible values</li>
</ol>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">mu_value, sigma_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw([mu, sigma], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb20-2">model_fixed_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.do(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>: mu_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>: sigma_value})</span></code></pre></div>
<ol start="3" type="1">
<li>Simulate values of the outcome variable</li>
</ol>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(model_fixed_parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span></code></pre></div>
<ol start="4" type="1">
<li>Estimate the parameters</li>
</ol>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">model_observed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.observe(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y_values})</span>
<span id="cb22-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_observed_data:</span>
<span id="cb22-3">    idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span></code></pre></div>
<ol start="5" type="1">
<li>Compare the parameter estimates against the true values</li>
</ol>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">az.plot_posterior(idata, ref_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mu_value, sigma_value])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>Before moving on to the next example, some clarification notes:</p>
<ul>
<li>You don’t need to use the prior to simulate parameter values. You could do <code>pm.do()</code> with arbitrary values, as long as they are within the parameter domain.</li>
<li>This is not a post about thorough parameter recovery, just the basics to get the idea across. Don’t take it as a gold standard.</li>
</ul>
</section>
</section>
<section id="simple-linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="simple-linear-regression">Simple linear regression</h2>
<p>Let’s work with the following simple linear regression model:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20%5Cmid%20%5Cmu_i%20&amp;%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_i,%20%5Csigma%5E2)%20%5C%5C%0A%5Cmu_i%20&amp;=%20%5Calpha%20+%20%5Cbeta%20x_i%20%5C%5C%0A%5Calpha%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%201%5E2)%20%5C%5C%0A%5Cbeta%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%201%5E2)%20%5C%5C%0A%5Csigma%20%20&amp;%5Csim%20%5Ctext%7BGamma%7D(2,%202)%0A%5Cend%7Baligned%7D%0A"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?i%20=%201,%20%5Cdots,%20N"></p>
<section id="known-covariate-values" class="level3">
<h3 class="anchored" data-anchor-id="known-covariate-values">Known covariate values</h3>
<p>Usually, the values of the covariate are assumed to be fixed and known. We start with a scenario where we have the values for it, and later on, we show how to simulate data for both covariate and outcome variables.</p>
<div id="cell-32" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">x_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(</span>
<span id="cb24-2">    [</span>
<span id="cb24-3">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.786</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.399</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.018</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.657</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.195</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.083</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.651</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.476</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.584</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.194</span>,</span>
<span id="cb24-4">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.282</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.176</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.309</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.022</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.341</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.982</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.904</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.491</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.07</span> , <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.568</span></span>
<span id="cb24-5">    ]</span>
<span id="cb24-6">)</span></code></pre></div>
</div>
<div id="cell-33" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb25-4">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb25-5">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb25-6"></span>
<span id="cb25-7">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_values</span>
<span id="cb25-8">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb25-9"></span>
<span id="cb25-10">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb25-11"></span>
<span id="cb25-12">model.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-15-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The steps below are analogous to the ones above. We only change the random variables from which we sample.</p>
<div id="cell-35" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get plausible values for the parameters</span></span>
<span id="cb26-2">alpha_value, beta_value, sigma_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw([alpha, beta, sigma], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha:"</span>, alpha_value)</span>
<span id="cb26-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta:"</span>, beta_value)</span>
<span id="cb26-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma:"</span>, sigma_value)</span>
<span id="cb26-7"></span>
<span id="cb26-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set parameters to the sampled values</span></span>
<span id="cb26-9">model_fixed_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.do(</span>
<span id="cb26-10">    model,</span>
<span id="cb26-11">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>: alpha_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>: beta_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>: sigma_value}</span>
<span id="cb26-12">)</span>
<span id="cb26-13"></span>
<span id="cb26-14">model_fixed_parameters.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>alpha: 0.6559553890005595
beta: -0.2818584784669223
sigma: 2.9596230424561605</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-16-output-2.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Given the fixed parameter values and the values of the covariate, we simulate values of the response <code>y</code>.</p>
<div id="cell-37" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(model_fixed_parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb28-2">y_values</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>array([ 3.12686173, -0.11044308, -4.05742728,  2.9712478 ,  1.03231454,
       -0.77103352,  0.42986971,  2.32298661,  2.22334492,  4.25858143,
       -1.75237172, -0.51776157,  3.27740227,  1.12482262, -4.2394528 ,
        0.77089266,  4.45871827,  5.20353471,  0.61391209,  3.22912347])</code></pre>
</div>
</div>
<div id="cell-38" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb30-2">ax.scatter(x_values, y_values, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb30-3">ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, alpha_value), slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beta_value, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.3"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># theoretical line curve</span></span>
<span id="cb30-4">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Observe the simulated values of <code>y</code> in the original model:</p>
<div id="cell-40" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">model_observed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.observe(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y_values})</span>
<span id="cb31-2">model_observed_data.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-19-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>and perform inference:</p>
<div id="cell-42" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_observed_data:</span>
<span id="cb32-2">    idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [alpha, beta, sigma]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c3518487c5604099b80def50fbb91982","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.</code></pre>
</div>
</div>
<p>Again, the true parameter value is fairly well contained in the posterior distribution.</p>
<div id="cell-44" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">az.plot_posterior(idata, ref_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[alpha_value, beta_value, sigma_value])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can also simulate some draws of the posterior regression line.</p>
<div id="cell-46" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">posterior_draws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> az.extract(</span>
<span id="cb36-2">    idata, group<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posterior"</span>, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>], num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb36-3">)</span>
<span id="cb36-4"></span>
<span id="cb36-5">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb36-6">ax.scatter(x_values, y_values, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb36-7">ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, alpha_value), slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beta_value, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.3"</span>)</span>
<span id="cb36-8"></span>
<span id="cb36-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a, b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(posterior_draws[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>].to_numpy(), posterior_draws[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>].to_numpy()):</span>
<span id="cb36-10">    ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, a), slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>b, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb36-11"></span>
<span id="cb36-12">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="unknown-covariate-values" class="level3">
<h3 class="anchored" data-anchor-id="unknown-covariate-values">Unknown covariate values</h3>
<p>We may need to simulate values for <code>x</code> either because we don’t yet have values for the covariate or because we want to evaluate different scenarios.</p>
<p>The process is again similar to what we’ve done so far, but now we need to specify a distribution for <code>x</code> to determine how its values are generated. There is a plethora of choices. Here, I’m faling back on a standard normal distribution.</p>
<div id="cell-48" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb37-2"></span>
<span id="cb37-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb37-4">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb37-5">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb37-6">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># there are as many 'x' values as observations</span></span>
<span id="cb37-7"></span>
<span id="cb37-8">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb37-9">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb37-10"></span>
<span id="cb37-11">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb37-12"></span>
<span id="cb37-13">model.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-23-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Everything else stays the same:</p>
<div id="cell-50" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get plausible values for the parameters</span></span>
<span id="cb38-2">alpha_value, beta_value, sigma_value, x_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw([alpha, beta, sigma, x], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha:"</span>, alpha_value)</span>
<span id="cb38-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta:"</span>, beta_value)</span>
<span id="cb38-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma:"</span>, sigma_value)</span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x values:"</span>, x_values, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb38-9"></span>
<span id="cb38-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set parameters to the sampled values</span></span>
<span id="cb38-11">model_fixed_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.do(</span>
<span id="cb38-12">    model,</span>
<span id="cb38-13">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>: alpha_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>: beta_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>: sigma_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: x_values}</span>
<span id="cb38-14">)</span>
<span id="cb38-15"></span>
<span id="cb38-16">model_fixed_parameters.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>alpha: 0.1719973000588151
beta: 0.6008524215503052
sigma: 1.1351657143542704

x values:
[-0.07292669 -0.54826599 -0.46954908  0.26994204  1.00053203  0.65220785
 -1.52515351  0.51970338 -0.51429822 -0.26137883 -0.47653569  0.16923646
 -0.93059417  0.45502837 -1.05738506 -0.61663942 -0.52632527  0.34543959
 -0.04647066  1.32000584]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-24-output-2.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-51" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate values for the outcome variable</span></span>
<span id="cb40-2">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(model_fixed_parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb40-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y values:"</span>, y_values, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>y values:
[ 1.71790428 -0.0682522  -1.26126753 -0.9484205  -0.06096033  0.28471004
 -0.40986102  0.38968251 -2.03112939  1.44298618  0.99584892 -0.46963706
  0.99470417  0.2107016   0.50460528 -0.72376308  1.58806132  0.28525278
  0.71371689  2.99055351]</code></pre>
</div>
</div>
<div id="cell-52" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb42-2">ax.scatter(x_values, y_values, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb42-3">ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, alpha_value), slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beta_value, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.3"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb42-4">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And observe the simulated values of <code>y</code> in the original model.</p>
<div id="cell-54" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">model_observed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.observe(pm.do(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: x_values}), {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y_values})</span>
<span id="cb43-2">model_observed_data.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-27-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Hold on for a second and take a second look at the code above. See that we’re using <strong>both</strong> <code>pm.do()</code> and <code>pm.observe()</code>? We first need to use <code>pm.do()</code> to set the values of <code>x</code> in the original model, and then we use <code>pm.observe()</code> to attach the observed values to the outcome variable <code>y</code>. We can’t pass the values of <code>x</code> through <code>pm.observe()</code> because that would mean they are not fixed values, but realizations from a random variable.</p>
<p>To conclude, let’s explore the posterior.</p>
<div id="cell-57" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_observed_data:</span>
<span id="cb44-2">    idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [alpha, beta, sigma]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"23b95790261a46a48c51375424d17174","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.</code></pre>
</div>
</div>
<div id="cell-58" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">az.plot_posterior(idata, ref_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[alpha_value, beta_value, sigma_value])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-59" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">posterior_draws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> az.extract(</span>
<span id="cb48-2">    idata, group<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posterior"</span>, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>], num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb48-3">)</span>
<span id="cb48-4"></span>
<span id="cb48-5">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb48-6">ax.scatter(x_values, y_values, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb48-7">ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, alpha_value), slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beta_value, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.3"</span>)</span>
<span id="cb48-8"></span>
<span id="cb48-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a, b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(posterior_draws[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>].to_numpy(), posterior_draws[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>].to_numpy()):</span>
<span id="cb48-10">    ax.axline((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, a), slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>b, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb48-11"></span>
<span id="cb48-12">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="normal-model-for-multiple-groups" class="level2">
<h2 class="anchored" data-anchor-id="normal-model-for-multiple-groups">Normal model for multiple groups</h2>
<p>The following model is a simple extension of the first one, where we have multiple groups with different population means.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20%20%20%20%20&amp;%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%7Bj%5Bi%5D%7D,%20%5Csigma%5E2)%20%5C%5C%0A%5Cmu_j%20%20%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%203%5E2)%20&amp;%20%5Ctext%7Bfor%20all%20%7D%20j%20%5C%5C%0A%5Csigma%20%20&amp;%5Csim%20%5Ctext%7BGamma%7D(2,%202)%0A%5Cend%7Baligned%7D%0A"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?i%20=%201,%20%5Cdots,%20N"> and <img src="https://latex.codecogs.com/png.latex?j%20=%201,%20%5Cdots,%20J">.</p>
<p>The indexing notation in <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7Bj%5Bi%5D%7D"> is read as “the value of <img src="https://latex.codecogs.com/png.latex?j"> for the <img src="https://latex.codecogs.com/png.latex?i">-th observation”. You can also see <img src="https://latex.codecogs.com/png.latex?j%5Bi%5D"> as a function call, where you pass the index of an observation and it gives you the value of the group it belongs to.</p>
<section id="known-group-membership" class="level3">
<h3 class="anchored" data-anchor-id="known-group-membership">Known group membership</h3>
<p>Let’s start with a simple example, where:</p>
<ul>
<li>All groups have the same, pre-defined, sample size.</li>
<li>Group memberships are known.</li>
<li>Observations are sorted by group.</li>
</ul>
<div id="cell-63" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">J <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of groups</span></span>
<span id="cb49-2">n_j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of observations per group</span></span>
<span id="cb49-3">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> J <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_j  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total number of observations</span></span>
<span id="cb49-4"></span>
<span id="cb49-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate group indexes</span></span>
<span id="cb49-6">group_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.repeat(np.arange(J), n_j)</span>
<span id="cb49-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group indexes:"</span>)</span>
<span id="cb49-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(group_idx)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Group indexes:
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3
 3 3 3 3 3 3]</code></pre>
</div>
</div>
<p>The first 20 observations are from the first group, the second 20 observations are from the second group, and so on.</p>
<p>Let’s write the model in PyMC. Since we have as many means as groups, we need to pass <code>shape=J</code> when we define the prior for <img src="https://latex.codecogs.com/png.latex?%5Cmu">. Note that we create an intermediate variable <code>mu_indexed</code> that contains the value of <code>mu</code> for each observation, according to their group.</p>
<div id="cell-65" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb51-2">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>J)</span>
<span id="cb51-3">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb51-4">    mu_indexed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu[group_idx]</span>
<span id="cb51-5">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_indexed, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb51-6"></span>
<span id="cb51-7">model.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-32-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-66" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">mu_values, mu_indexed_values, sigma_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw([mu, mu_indexed, sigma], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb52-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu:"</span>, mu_values)</span>
<span id="cb52-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma:"</span>, sigma_value)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mu: [6.05496819 1.16678048 2.30070048 4.72798215]
sigma: 0.5873507289564738</code></pre>
</div>
</div>
<p>As expected, there are 4 values for <code>mu</code>. Let’s have a look at the values for <code>mu_indexed_values</code>.</p>
<div id="cell-68" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">mu_indexed_values</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>array([6.05496819, 6.05496819, 6.05496819, 6.05496819, 6.05496819,
       6.05496819, 6.05496819, 6.05496819, 6.05496819, 6.05496819,
       6.05496819, 6.05496819, 6.05496819, 6.05496819, 6.05496819,
       6.05496819, 6.05496819, 6.05496819, 6.05496819, 6.05496819,
       1.16678048, 1.16678048, 1.16678048, 1.16678048, 1.16678048,
       1.16678048, 1.16678048, 1.16678048, 1.16678048, 1.16678048,
       1.16678048, 1.16678048, 1.16678048, 1.16678048, 1.16678048,
       1.16678048, 1.16678048, 1.16678048, 1.16678048, 1.16678048,
       2.30070048, 2.30070048, 2.30070048, 2.30070048, 2.30070048,
       2.30070048, 2.30070048, 2.30070048, 2.30070048, 2.30070048,
       2.30070048, 2.30070048, 2.30070048, 2.30070048, 2.30070048,
       2.30070048, 2.30070048, 2.30070048, 2.30070048, 2.30070048,
       4.72798215, 4.72798215, 4.72798215, 4.72798215, 4.72798215,
       4.72798215, 4.72798215, 4.72798215, 4.72798215, 4.72798215,
       4.72798215, 4.72798215, 4.72798215, 4.72798215, 4.72798215,
       4.72798215, 4.72798215, 4.72798215, 4.72798215, 4.72798215])</code></pre>
</div>
</div>
<p>The result is not a coincidence. The first 20 values are the first value of <code>mu</code>, the second 20 values are the second value of <code>mu</code>, and so on. This is because observations are sorted by group.</p>
<p>The usage of <code>pm.do()</code> is the same as always.</p>
<div id="cell-70" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">model_fixed_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.do(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>: mu_values, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>: sigma_value})</span>
<span id="cb56-2">model_fixed_parameters.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-35-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And the same logic applies to the simulation of the values of <code>y</code>.</p>
<div id="cell-72" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate values</span></span>
<span id="cb57-2">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(model_fixed_parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb57-3"></span>
<span id="cb57-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot empirical distributions</span></span>
<span id="cb57-5">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb57-6"></span>
<span id="cb57-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(J):</span>
<span id="cb57-8">    ax.hist(y_values[group_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> j], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Group </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb57-9">ax.legend()</span>
<span id="cb57-10">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-36-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now let’s set the observed values, sample the posterior, and, subsequently, explore it.</p>
<div id="cell-74" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">model_observed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.observe(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y_values})</span>
<span id="cb58-2"></span>
<span id="cb58-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_observed_data:</span>
<span id="cb58-4">    idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb58-5"></span>
<span id="cb58-6">az.plot_posterior(idata, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>], ref_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu_values.tolist())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [mu, sigma]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2cad24dedde140afbc759097708d033f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-37-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can also make use of <code>pm.sample_posterior_predictive()</code> to get draws of the posterior predictive distribution:</p>
<div id="cell-76" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_observed_data:</span>
<span id="cb61-2">    idata.extend(pm.sample_posterior_predictive(idata))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling: [y]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"15bbdfe95dfb4aedb479e951b605de7a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
</div>
<p>This allows us to plot the predictive distribution for each group, where we can see they differ in location but not in dispersion.</p>
<div id="cell-78" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb63-2"></span>
<span id="cb63-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(J):</span>
<span id="cb63-4">    predictive_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata.posterior_predictive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>].to_numpy()[..., group_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> j].flatten()</span>
<span id="cb63-5">    ax.hist(predictive_values, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Group </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb63-6">ax.legend()</span>
<span id="cb63-7">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-39-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="unknown-group-membership" class="level3">
<h3 class="anchored" data-anchor-id="unknown-group-membership">Unknown group membership</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20%20%20%20%20&amp;%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%7Bj%5Bi%5D%7D,%20%5Csigma%5E2)%20%5C%5C%0A%5Cmu_j%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%203%5E2)%20&amp;%20%5Ctext%7Bfor%20all%20%7D%20j%20%5C%5C%0A%5Csigma%20%20&amp;%5Csim%20%5Ctext%7BGamma%7D(2,%202)%0A%5Cend%7Baligned%7D%0A"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?i%20=%201,%20%5Cdots,%20N"> and <img src="https://latex.codecogs.com/png.latex?j%20=%201,%20%5Cdots,%20J">.</p>
<p>The model is exactly the same as the one in the previous section. The difference is that we don’t know how many observations belong to each group – we also want to simulate that.</p>
<p>To simulate group memberships we need a distribution that gives us integers between <img src="https://latex.codecogs.com/png.latex?0"> and <img src="https://latex.codecogs.com/png.latex?J-1">. One such distribution is the discrete uniform distribution.</p>
<div id="cell-81" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">J <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of groups</span></span>
<span id="cb64-2">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total number of observations</span></span>
<span id="cb64-3"></span>
<span id="cb64-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb64-5">    group_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.DiscreteUniform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>, lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, upper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>J<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb64-6">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>J)</span>
<span id="cb64-7">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb64-8">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu[group_idx], sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="cb64-9"></span>
<span id="cb64-10">model.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-40-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-82" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">mu_values, sigma_value, group_idx_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw([mu, sigma, group_idx], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb65-2"></span>
<span id="cb65-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu:"</span>, mu_values)</span>
<span id="cb65-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma:"</span>, sigma_value)</span>
<span id="cb65-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group indexes:"</span>, group_idx_values, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mu: [ 4.39222186  3.06006526 -1.82575653  3.42869414]
sigma: 0.36418924500311767
group indexes:
[2 0 0 2 1 3 2 0 2 2 3 3 3 3 3 0 3 0 3 3 3 0 3 1 2 2 1 2 2 0 3 0 3 2 3 0 0
 0 1 0 1 0 0 2 0 0 2 3]</code></pre>
</div>
</div>
<p>Not only are the observations no longer sorted by group, but the group sizes are also different.</p>
<div id="cell-84" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">np.unique(group_idx_values, return_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>(array([0, 1, 2, 3]), array([16,  5, 12, 15]))</code></pre>
</div>
</div>
<p>All the rest is exactly the same:</p>
<div id="cell-86" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fix model parameters and data</span></span>
<span id="cb69-2">model_fixed_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.do(</span>
<span id="cb69-3">    model,</span>
<span id="cb69-4">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>: mu_values, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>: sigma_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>: group_idx_values}</span>
<span id="cb69-5">)</span>
<span id="cb69-6"></span>
<span id="cb69-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display model graph</span></span>
<span id="cb69-8">display(model_fixed_parameters.to_graphviz())</span>
<span id="cb69-9"></span>
<span id="cb69-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate values from the outcome</span></span>
<span id="cb69-11">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(model_fixed_parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb69-12"></span>
<span id="cb69-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fix group indexes and observe the outcome values</span></span>
<span id="cb69-14">model_observed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.observe(</span>
<span id="cb69-15">    pm.do(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>: group_idx_values}),</span>
<span id="cb69-16">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y_values}</span>
<span id="cb69-17">)</span>
<span id="cb69-18"></span>
<span id="cb69-19">display(model_observed_data.to_graphviz())</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-43-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-43-output-2.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And so on…</p>
</section>
</section>
<section id="good-practices" class="level2">
<h2 class="anchored" data-anchor-id="good-practices">Good practices</h2>
<p>Here, I want to mention a few practices that are recommended when you work with PyMC models. They do not change the previous workflow, but make everything we do with our model more robust and, once we are familiar with it, more intuitive.</p>
<section id="use-pm.data-containers-to-register-data-variables" class="level3">
<h3 class="anchored" data-anchor-id="use-pm.data-containers-to-register-data-variables">Use <code>pm.Data</code> containers to register data variables</h3>
<p>After using the do operator to fix parameters as constants, the corresponding nodes will display a <code>Data</code> label, indicating that they represent data rather than random variables</p>
<p>Turns out it’s possible to register all fixed quantities in the model with <code>pm.Data</code> containers. For example, let’s have a look at our simple linear regression model.</p>
<div id="cell-91" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">x_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(</span>
<span id="cb70-2">    [</span>
<span id="cb70-3">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.786</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.399</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.018</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.657</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.195</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.083</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.651</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.476</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.584</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.194</span>,</span>
<span id="cb70-4">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.282</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.176</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.309</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.022</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.341</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.982</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.904</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.491</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.07</span> , <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.568</span></span>
<span id="cb70-5">    ]</span>
<span id="cb70-6">)</span></code></pre></div>
</div>
<div id="cell-92" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="annotated-cell-49" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-49-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="annotated-cell-49-2"></span>
<span id="annotated-cell-49-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-49" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-49-4" class="code-annotation-target">    x_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Data(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, x_values)</span>
<span id="annotated-cell-49-5"></span>
<span id="annotated-cell-49-6">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>)</span>
<span id="annotated-cell-49-7">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>)</span>
<span id="annotated-cell-49-8">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_data <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use 'x_data' instead of 'x'</span></span>
<span id="annotated-cell-49-9">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="annotated-cell-49-10"></span>
<span id="annotated-cell-49-11">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>N)</span>
<span id="annotated-cell-49-12"></span>
<span id="annotated-cell-49-13">model.to_graphviz()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-49" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-49" data-code-lines="4" data-code-annotation="1">Registers <code>"x"</code> in the model.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="44">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-45-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And when we modify the model, the <code>Data</code> for <code>x</code> is still there.</p>
<div id="cell-95" class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate values for the parameters</span></span>
<span id="cb71-2">alpha_value, beta_value, sigma_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw([alpha, beta, sigma], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb71-3"></span>
<span id="cb71-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fix parameter values in the model</span></span>
<span id="cb71-5">model_fixed_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.do(</span>
<span id="cb71-6">    model,</span>
<span id="cb71-7">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>: alpha_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>: beta_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>: sigma_value}</span>
<span id="cb71-8">)</span>
<span id="cb71-9"></span>
<span id="cb71-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate values for the outcome variable</span></span>
<span id="cb71-11">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(model_fixed_parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb71-12"></span>
<span id="cb71-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the outcome values as observed in the original model</span></span>
<span id="cb71-14">model_observed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.observe(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y_values})</span>
<span id="cb71-15"></span>
<span id="cb71-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize graph</span></span>
<span id="cb71-17">model_observed_data.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-46-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="use-coords-and-dims" class="level3">
<h3 class="anchored" data-anchor-id="use-coords-and-dims">Use <code>coords</code> and <code>dims</code></h3>
<p>So far, we have always used <code>shape</code> to indicate the dimensions of a variable. It works fine, but it’s not the recommended approach when using PyMC. A more robust practice is to use <code>dims</code>, which allows us to specify the real-world entities that each dimension of the variable corresponds to.</p>
<p>For example:</p>
<div id="cell-98" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb72-2">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>)</span>
<span id="cb72-3"></span>
<span id="cb72-4">pm.model_to_graphviz(model)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-47-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now it is clear that the length of <code>mu</code> is 4 because there are 4 groups.</p>
<p>This becomes truly powerful when used together with coordinates. While <code>dims</code> defines the dimensions of a variable, <code>coords</code> provides the length of the dimensions and the labels for the positions (or indices) within those dimensions:</p>
<div id="cell-100" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb73-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Big"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Medium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Small"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Very small"</span>]</span>
<span id="cb73-3">}</span>
<span id="cb73-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb73-5">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>)</span>
<span id="cb73-6"></span>
<span id="cb73-7">pm.model_to_graphviz(model)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-48-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Note how it was not necessary to specify the <code>shape</code> explicitly. It was inferred from the coordinates.</p>
<p>If two variables have the same <code>dims</code>, they will have the same shape, and it will be clear their dimensions are mapped to the same entities.</p>
<p>This is how we could have used <code>coords</code> and <code>dims</code> in our simple linear regression model:</p>
<div id="cell-103" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb74-2"></span>
<span id="cb74-3">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb74-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>: np.arange(N)</span>
<span id="cb74-5">}</span>
<span id="cb74-6"></span>
<span id="cb74-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb74-8">    x_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Data(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_values, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="cb74-9"></span>
<span id="cb74-10">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>)</span>
<span id="cb74-11">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>)</span>
<span id="cb74-12">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_data</span>
<span id="cb74-13">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb74-14"></span>
<span id="cb74-15">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="cb74-16"></span>
<span id="cb74-17">model.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-49-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And this is how we could have done it for the normal model for multiple groups:</p>
<div id="cell-105" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">J <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of groups</span></span>
<span id="cb75-2">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total number of observations</span></span>
<span id="cb75-3"></span>
<span id="cb75-4">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb75-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group 1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group 2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group 3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group 4"</span>],</span>
<span id="cb75-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>: np.arange(N)</span>
<span id="cb75-7">}</span>
<span id="cb75-8"></span>
<span id="cb75-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb75-10">    group_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.DiscreteUniform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>, lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, upper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>J<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="cb75-11">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>)</span>
<span id="cb75-12">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb75-13">    pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu[group_idx], sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="cb75-14"></span>
<span id="cb75-15">model.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-50-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-106" class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">mu_values, sigma_value, group_idx_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw([mu, sigma, group_idx], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb76-2"></span>
<span id="cb76-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fix model parameters _and_ data</span></span>
<span id="cb76-4">model_fixed_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.do(</span>
<span id="cb76-5">    model,</span>
<span id="cb76-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>: mu_values, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>: sigma_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>: group_idx_values}</span>
<span id="cb76-7">)</span>
<span id="cb76-8"></span>
<span id="cb76-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate values from the outcome</span></span>
<span id="cb76-10">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(model_fixed_parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb76-11"></span>
<span id="cb76-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Observe the outcome values</span></span>
<span id="cb76-13">model_observed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.observe(</span>
<span id="cb76-14">    pm.do(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>: group_idx_values}),</span>
<span id="cb76-15">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y_values}</span>
<span id="cb76-16">)</span>
<span id="cb76-17"></span>
<span id="cb76-18">model_observed_data.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-51-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-107" class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_observed_data:</span>
<span id="cb77-2">    idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [mu, sigma]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0d4e246546c94c1cb09b445ebe1b152f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.</code></pre>
</div>
</div>
<p>The great thing about <code>coords</code> and <code>dims</code> is that everything is labeled, so we no longer have to mentally map the positions to the names we have in our heads</p>
<div id="cell-109" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">az.summary(idata, kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stats"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_3%</th>
<th data-quarto-table-cell-role="th">hdi_97%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">mu[Group 1]</td>
<td>0.388</td>
<td>0.189</td>
<td>0.028</td>
<td>0.736</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mu[Group 2]</td>
<td>-3.817</td>
<td>0.150</td>
<td>-4.105</td>
<td>-3.550</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mu[Group 3]</td>
<td>-3.890</td>
<td>0.157</td>
<td>-4.173</td>
<td>-3.580</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mu[Group 4]</td>
<td>3.016</td>
<td>0.172</td>
<td>2.680</td>
<td>3.333</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">sigma</td>
<td>0.568</td>
<td>0.062</td>
<td>0.453</td>
<td>0.681</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-110" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">az.plot_posterior(idata, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-54-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Even slicing of the posterior draws becomes easier.</p>
<div id="cell-112" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">idata.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>].sel(group<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group 3"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
html[data-theme=dark],
body[data-theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-index-preview {
  grid-column: 2 / 5;
  color: var(--xr-font-color2);
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data,
.xr-index-data-in:checked ~ .xr-index-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-index-name div,
.xr-index-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2,
.xr-no-icon {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.DataArray 'mu' (chain: 4, draw: 1000)&gt; Size: 32kB
array([[-4.03705149, -3.78900314, -3.76479051, ..., -4.04628137,
        -3.88638045, -4.21007427],
       [-3.74006981, -4.03929702, -4.01893038, ..., -3.92875527,
        -3.76260604, -4.02621378],
       [-3.77833314, -3.85270145, -3.86176492, ..., -3.76218849,
        -3.93732774, -3.91962555],
       [-4.25014046, -3.70552177, -3.99825767, ..., -3.76144302,
        -3.61515607, -3.93889675]])
Coordinates:
  * chain    (chain) int64 32B 0 1 2 3
  * draw     (draw) int64 8kB 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999
    group    &lt;U7 28B 'Group 3'</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.DataArray</div><div class="xr-array-name">'mu'</div><ul class="xr-dim-list"><li><span class="xr-has-index">chain</span>: 4</li><li><span class="xr-has-index">draw</span>: 1000</li></ul></div><ul class="xr-sections"><li class="xr-section-item"><div class="xr-array-wrap"><input id="section-b1bfba80-cf50-4384-b577-be044c7f73bb" class="xr-array-in" type="checkbox" checked=""><label for="section-b1bfba80-cf50-4384-b577-be044c7f73bb" title="Show/hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-array-preview xr-preview"><span>-4.037 -3.789 -3.765 -4.043 -3.829 ... -4.011 -3.761 -3.615 -3.939</span></div><div class="xr-array-data"><pre>array([[-4.03705149, -3.78900314, -3.76479051, ..., -4.04628137,
        -3.88638045, -4.21007427],
       [-3.74006981, -4.03929702, -4.01893038, ..., -3.92875527,
        -3.76260604, -4.02621378],
       [-3.77833314, -3.85270145, -3.86176492, ..., -3.76218849,
        -3.93732774, -3.91962555],
       [-4.25014046, -3.70552177, -3.99825767, ..., -3.76144302,
        -3.61515607, -3.93889675]])</pre></div></div></li><li class="xr-section-item"><input id="section-f680a59a-8795-448d-a5ce-f39756dc7c1c" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-f680a59a-8795-448d-a5ce-f39756dc7c1c" class="xr-section-summary">Coordinates: <span>(3)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">chain</span></div><div class="xr-var-dims">(chain)</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">0 1 2 3</div><input id="attrs-cb880d83-0af3-4437-a95f-27f78c73ea60" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-cb880d83-0af3-4437-a95f-27f78c73ea60" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-20c3a1c3-5891-4b54-9930-2e91d85403ab" class="xr-var-data-in" type="checkbox"><label for="data-20c3a1c3-5891-4b54-9930-2e91d85403ab" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([0, 1, 2, 3])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span class="xr-has-index">draw</span></div><div class="xr-var-dims">(draw)</div><div class="xr-var-dtype">int64</div><div class="xr-var-preview xr-preview">0 1 2 3 4 5 ... 995 996 997 998 999</div><input id="attrs-118c4896-8922-40e4-8e25-4b557aea3328" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-118c4896-8922-40e4-8e25-4b557aea3328" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-2bd065d8-cec8-4b40-9546-ee9b6fca41b8" class="xr-var-data-in" type="checkbox"><label for="data-2bd065d8-cec8-4b40-9546-ee9b6fca41b8" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array([  0,   1,   2, ..., 997, 998, 999])</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>group</span></div><div class="xr-var-dims">()</div><div class="xr-var-dtype">&lt;U7</div><div class="xr-var-preview xr-preview">'Group 3'</div><input id="attrs-d1bd4735-f0cf-4b31-97f6-acba66a298de" class="xr-var-attrs-in" type="checkbox" disabled=""><label for="attrs-d1bd4735-f0cf-4b31-97f6-acba66a298de" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-9ca6d949-a025-425a-bba0-7bca25156801" class="xr-var-data-in" type="checkbox"><label for="data-9ca6d949-a025-425a-bba0-7bca25156801" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"></dl></div><div class="xr-var-data"><pre>array('Group 3', dtype='&lt;U7')</pre></div></li></ul></div></li><li class="xr-section-item"><input id="section-f9e7c2ff-4787-41ee-83a2-415b78f55902" class="xr-section-summary-in" type="checkbox"><label for="section-f9e7c2ff-4787-41ee-83a2-415b78f55902" class="xr-section-summary">Indexes: <span>(2)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"><li class="xr-var-item"><div class="xr-index-name"><div>chain</div></div><div class="xr-index-preview">PandasIndex</div><div></div><input id="index-a618a632-30ee-42b3-ac79-042e740dd9aa" class="xr-index-data-in" type="checkbox"><label for="index-a618a632-30ee-42b3-ac79-042e740dd9aa" title="Show/Hide index repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-index-data"><pre>PandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))</pre></div></li><li class="xr-var-item"><div class="xr-index-name"><div>draw</div></div><div class="xr-index-preview">PandasIndex</div><div></div><input id="index-d1a56009-95ff-466e-9443-fea0bae29e37" class="xr-index-data-in" type="checkbox"><label for="index-d1a56009-95ff-466e-9443-fea0bae29e37" title="Show/Hide index repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-index-data"><pre>PandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,
       ...
       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],
      dtype='int64', name='draw', length=1000))</pre></div></li></ul></div></li><li class="xr-section-item"><input id="section-0e9f876e-9ec5-4ddb-9794-7a0f6e7f0b45" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-0e9f876e-9ec5-4ddb-9794-7a0f6e7f0b45" class="xr-section-summary" title="Expand/collapse section">Attributes: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"></dl></div></li></ul></div></div>
</div>
</div>
</section>
</section>
<section id="a-not-so-trivial-logistic-regression-model" class="level2">
<h2 class="anchored" data-anchor-id="a-not-so-trivial-logistic-regression-model">A not-so-trivial logistic regression model</h2>
<p>Let’s conclude this blog post by applying the concepts discussed in the previous examples to a more advanced example.</p>
<p>Here, we work on a logistic regression model with varying intercepts and slopes. The covariates are given by a grouping variable and a continuous variable representing age.</p>
<section id="initial-attempt" class="level3">
<h3 class="anchored" data-anchor-id="initial-attempt">Initial attempt</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20%5Cmid%20%5Cpi_i%20&amp;%5Csim%20%5Ctext%7BBernoulli%7D(%5Cpi_i)%20%5C%5C%0A%5Cpi_i%20&amp;%20=%20%5Ctext%7Bexpit%7D(%5Calpha_%7Bj%5Bi%5D%7D%20+%20%5Cbeta_%7Bj%5Bi%5D%7D%20%5Ctimes%20%5Ctext%7Bage%7D_i)%20%5C%5C%0A%5Calpha_j%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%201%5E2)%20&amp;%20%5Ctext%7Bfor%20all%20%7D%20j%20%5C%5C%0A%5Cbeta_j%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%201%5E2)%20&amp;%20%5Ctext%7Bfor%20all%20%7D%20j%20%5C%5C%0A%5Cend%7Baligned%7D%0A"></p>
<p>we have <img src="https://latex.codecogs.com/png.latex?J=3"> groups and <img src="https://latex.codecogs.com/png.latex?N=200"> observations in total.</p>
<div id="cell-117" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="annotated-cell-60" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-60-1">J <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="annotated-cell-60-2">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>]</span>
<span id="annotated-cell-60-3">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="annotated-cell-60-4"></span>
<span id="annotated-cell-60-5">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="annotated-cell-60-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>],</span>
<span id="annotated-cell-60-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>: np.arange(N)</span>
<span id="annotated-cell-60-8">}</span>
<span id="annotated-cell-60-9"></span>
<span id="annotated-cell-60-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-60" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-60-11" class="code-annotation-target">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Uniform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, upper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-60" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-60-12" class="code-annotation-target">    group_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Categorical(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="annotated-cell-60-13"></span>
<span id="annotated-cell-60-14">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>)</span>
<span id="annotated-cell-60-15">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>)</span>
<span id="annotated-cell-60-16"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-60" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-60-17" class="code-annotation-target">    pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="annotated-cell-60-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>,</span>
<span id="annotated-cell-60-19">        pm.math.sigmoid(alpha[group_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta[group_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> age),</span>
<span id="annotated-cell-60-20">        dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span></span>
<span id="annotated-cell-60-21">    )</span>
<span id="annotated-cell-60-22"></span>
<span id="annotated-cell-60-23">    pm.Bernoulli(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pi, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="annotated-cell-60-24"></span>
<span id="annotated-cell-60-25">model.to_graphviz()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-60" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-60" data-code-lines="11" data-code-annotation="1">Age is simulated using a uniform distribution between 18 and 70.</span>
</dd>
<dt data-target-cell="annotated-cell-60" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-60" data-code-lines="12" data-code-annotation="2">For group memberships, we move from a uniform to a categorical, which enables us to assign different probabilities to each group.</span>
</dd>
<dt data-target-cell="annotated-cell-60" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-60" data-code-lines="17" data-code-annotation="3">We register the success probability <code>pi</code> in the model graph using <code>pm.Deterministic</code>. Although <code>pi</code> is a random variable, it is represented as deterministic because its values are derived from other random variables and constant values.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="55">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-56-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>At this point, we are quite familiar with what comes next:</p>
<div id="cell-120" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate values for parameters and data</span></span>
<span id="cb83-2">alpha_values, beta_values, age_values, group_idx_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(</span>
<span id="cb83-3">    [alpha, beta, age, group_idx],</span>
<span id="cb83-4">    random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng</span>
<span id="cb83-5">)</span>
<span id="cb83-6"></span>
<span id="cb83-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha:"</span>, alpha_values)</span>
<span id="cb83-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta:"</span>, beta_values)</span>
<span id="cb83-9"></span>
<span id="cb83-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Groups and their frequencies:"</span>)</span>
<span id="cb83-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(np.unique(group_idx_values, return_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb83-12"></span>
<span id="cb83-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fix model parameters and_data</span></span>
<span id="cb83-14">model_fixed_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.do(</span>
<span id="cb83-15">    model,</span>
<span id="cb83-16">    {</span>
<span id="cb83-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>: alpha_values,</span>
<span id="cb83-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>: beta_values,</span>
<span id="cb83-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>: age_values,</span>
<span id="cb83-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>: group_idx_values</span>
<span id="cb83-21">    }</span>
<span id="cb83-22">)</span>
<span id="cb83-23"></span>
<span id="cb83-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate values from the outcome</span></span>
<span id="cb83-25">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(model_fixed_parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb83-26"></span>
<span id="cb83-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fix covariate values and observe the outcome</span></span>
<span id="cb83-28">model_observed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.observe(</span>
<span id="cb83-29">    pm.do(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>: age_values, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>: group_idx_values}),</span>
<span id="cb83-30">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y_values}</span>
<span id="cb83-31">)</span>
<span id="cb83-32"></span>
<span id="cb83-33">model_observed_data.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>alpha: [0.47438197 0.20107513 1.36161128]
beta: [ 0.3889577  -1.65269511  2.58244597]
Groups and their frequencies:
(array([0, 1, 2]), array([98, 58, 44]))</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="56">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-57-output-2.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And, finally, we can get our sampler rolling:</p>
<div id="cell-122" class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_observed_data:</span>
<span id="cb85-2">    idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [alpha, beta]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"34e11160b67946b6864dbb4996442013","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.
There were 3306 divergences after tuning. Increase `target_accept` or reparameterize.
The rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details
The effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details</code></pre>
</div>
</div>
<p>Well, that doesn’t seem to work.</p>
</section>
<section id="taking-the-covariate-scale-into-account" class="level3">
<h3 class="anchored" data-anchor-id="taking-the-covariate-scale-into-account">Taking the covariate scale into account</h3>
<p>The main goal of the blog post is not to show you how to diagnose the model and/or sampler when things are not working, so I will jump straight to the solution.</p>
<p>The sampler above is failing because the scale of the <code>age</code> covariate, combined with the slope parameters, resulted in an extremely large contribution to the linear predictor, which somehow ruined our computation.</p>
<p>One solution is to use a standardized version of age:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20%5Cmid%20%5Cpi_i%20&amp;%5Csim%20%5Ctext%7BBernoulli%7D(%5Cpi_i)%20%5C%5C%0A%5Cpi_i%20&amp;%20=%20%5Ctext%7Bexpit%7D(%5Calpha_%7Bj%5Bi%5D%7D%20+%20%5Cbeta_%7Bj%5Bi%5D%7D%20%5Ctimes%20%5Ctext%7Bage%7D%5E*_i)%20%5C%5C%0A%5Calpha_j%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%201%5E2)%20&amp;%20%5Ctext%7Bfor%20all%20%7D%20j%20%5C%5C%0A%5Cbeta_j%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%201%5E2)%20&amp;%20%5Ctext%7Bfor%20all%20%7D%20j%20%5C%5C%0A%5Cend%7Baligned%7D%0A"></p>
<p>where:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bage%7D%5E*_i%20=%20%5Cfrac%7B%5Ctext%7Bage%7D_i%20-%20%5Ctext%7Bmean%7D(%5Ctext%7Bage%7D)%7D%7B%5Ctext%7Bstd%7D(%5Ctext%7Bage%7D)%7D%0A"></p>
<p>We need to import <code>pytensor.tensor</code> to compute the standard deviation of PyMC random variables.</p>
<div id="cell-127" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytensor.tensor <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pt</span></code></pre></div>
</div>
<div id="cell-128" class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">J <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb89-2">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>]</span>
<span id="cb89-3">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb89-4"></span>
<span id="cb89-5">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb89-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>],</span>
<span id="cb89-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>: np.arange(N)</span>
<span id="cb89-8">}</span>
<span id="cb89-9"></span>
<span id="cb89-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="cb89-11">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Uniform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, upper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="cb89-12">    group_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Categorical(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="cb89-13"></span>
<span id="cb89-14">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>)</span>
<span id="cb89-15">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>)</span>
<span id="cb89-16"></span>
<span id="cb89-17">    age_scaled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="cb89-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age_scaled"</span>, (age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pt.mean(age)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> pt.std(age), dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span></span>
<span id="cb89-19">    )</span>
<span id="cb89-20"></span>
<span id="cb89-21">    pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="cb89-22">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>,</span>
<span id="cb89-23">        pm.math.sigmoid(alpha[group_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta[group_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> age_scaled),</span>
<span id="cb89-24">        dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span></span>
<span id="cb89-25">    )</span>
<span id="cb89-26"></span>
<span id="cb89-27">    pm.Bernoulli(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pi, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="cb89-28"></span>
<span id="cb89-29">model.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-60-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>It’s lovely to see how things come together in the graph. Let’s simulate now.</p>
<div id="cell-130" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fix model parameters and data, use the ones we got before</span></span>
<span id="cb90-2">model_fixed_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.do(</span>
<span id="cb90-3">    model,</span>
<span id="cb90-4">    {</span>
<span id="cb90-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>: alpha_values,</span>
<span id="cb90-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>: beta_values,</span>
<span id="cb90-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>: age_values,</span>
<span id="cb90-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>: group_idx_values</span>
<span id="cb90-9">    }</span>
<span id="cb90-10">)</span>
<span id="cb90-11"></span>
<span id="cb90-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate values from the outcome</span></span>
<span id="cb90-13">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(model_fixed_parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span>
<span id="cb90-14"></span>
<span id="cb90-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fix covariate values and observe the outcome</span></span>
<span id="cb90-16">model_observed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.observe(</span>
<span id="cb90-17">    pm.do(model, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>: age_values, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>: group_idx_values}),</span>
<span id="cb90-18">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y_values}</span>
<span id="cb90-19">)</span>
<span id="cb90-20"></span>
<span id="cb90-21">model_observed_data.to_graphviz()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-61-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Fingers crossed!</p>
<div id="cell-132" class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_observed_data:</span>
<span id="cb91-2">    idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [alpha, beta]</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"74dccd4baf384ceda948d414d84e713b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.</code></pre>
</div>
</div>
<div id="cell-133" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">az.plot_posterior(idata, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, ref_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha_values.tolist())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-63-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-134" class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">az.plot_posterior(idata, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, ref_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>beta_values.tolist())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-64-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The sampler worked perfectly this time and we can also see that the posterior successfully recovered the true parameter values.</p>
</section>
<section id="out-of-model-predictions" class="level3">
<h3 class="anchored" data-anchor-id="out-of-model-predictions">Out of model predictions</h3>
<p>To conclude this blog post, I would like to quickly show one last feature of PyMC that I really like: out of model predictions.</p>
<p>Imagine we want to see how the probability of success changes with age for the different groups. To create such a plot, we need a grid of age values along with posterior draws of <img src="https://latex.codecogs.com/png.latex?%5Cpi"> conditional on each age value and group. However, the age values we currently have are not organized in a grid, they are just random. What should we do?</p>
<p>One can always manually work with the posterior draws to perform the necessary computations. But I usually prefer to let PyMC do that for me.</p>
<p>We are going to create a <strong>new</strong> PyMC model, which is like the previous logistic regression model, but uses the grid of age values that we want. Then, we are going to ask PyMC to “predict” (compute) the values of <img src="https://latex.codecogs.com/png.latex?%5Cpi"> in this model using the draws we obtained with the previous model. That’s the out of model prediction.</p>
<div id="cell-139" class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="annotated-cell-69" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-69" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-69-1" class="code-annotation-target">age_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(age_values)</span>
<span id="annotated-cell-69-2">age_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(age_values)</span>
<span id="annotated-cell-69-3"></span>
<span id="annotated-cell-69-4">age_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">71</span>)</span>
<span id="annotated-cell-69-5">age_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.tile(age_range, J)</span>
<span id="annotated-cell-69-6">group_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.repeat(np.arange(J), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(age_range))</span>
<span id="annotated-cell-69-7"></span>
<span id="annotated-cell-69-8">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="annotated-cell-69-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>],</span>
<span id="annotated-cell-69-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>: np.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(age_values))</span>
<span id="annotated-cell-69-11">}</span>
<span id="annotated-cell-69-12"></span>
<span id="annotated-cell-69-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model:</span>
<span id="annotated-cell-69-14">    age_scaled_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Data(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age_scaled"</span>, (age_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> age_mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> age_std, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="annotated-cell-69-15">    group_idx_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Data(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_idx"</span>, group_idx, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span>)</span>
<span id="annotated-cell-69-16"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-69" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-69-17" class="code-annotation-target">    alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Flat(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>)</span>
<span id="annotated-cell-69-18">    beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Flat(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>)</span>
<span id="annotated-cell-69-19"></span>
<span id="annotated-cell-69-20">    pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="annotated-cell-69-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>,</span>
<span id="annotated-cell-69-22">        pm.math.sigmoid(alpha[group_idx_data] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta[group_idx_data] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> age_scaled_data),</span>
<span id="annotated-cell-69-23">        dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_idx"</span></span>
<span id="annotated-cell-69-24">    )</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-69" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-69-25" class="code-annotation-target"></span>
<span id="annotated-cell-69-26"></span>
<span id="annotated-cell-69-27">model.to_graphviz()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-69" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-69" data-code-lines="1" data-code-annotation="1">Covariate transformations have to be done with the original summaries.</span>
</dd>
<dt data-target-cell="annotated-cell-69" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-69" data-code-lines="17" data-code-annotation="2">The <code>pm.Flat</code> objects represent distributions from which sampling is not possible. We use them to be extra sure the forward sampling below uses the draws available in <code>idata</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-69" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-69" data-code-lines="25" data-code-annotation="3">Since our goal is not to predict values of <code>y</code>, it does not need to be defined in this new model.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="64">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-65-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Notice we do forward sampling specifying we want to sample from <code>pi</code> and setting <code>predictions=True</code>, which gives us a new group.</p>
<div id="cell-142" class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model:</span>
<span id="cb96-2">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample_posterior_predictive(</span>
<span id="cb96-3">        idata, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>], predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rng</span>
<span id="cb96-4">    )[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predictions"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling: []</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ee0040a8a6944afc8e0d27e450a60639","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
</div>
<div id="cell-143" class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="annotated-cell-71" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-71" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-71-1" class="code-annotation-target">pi_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>].mean((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>))</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-71" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-71-2" class="code-annotation-target">pi_lower, pi_upper <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>].quantile((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.975</span>), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>))</span>
<span id="annotated-cell-71-3"></span>
<span id="annotated-cell-71-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="annotated-cell-71-5"></span>
<span id="annotated-cell-71-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j, group <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>]):</span>
<span id="annotated-cell-71-7">    ax.plot(age_range, pi_mean.sel(obs_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>group_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>j), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>group)</span>
<span id="annotated-cell-71-8">    ax.fill_between(</span>
<span id="annotated-cell-71-9">        age_range,</span>
<span id="annotated-cell-71-10">        pi_lower.sel(obs_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>group_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>j),</span>
<span id="annotated-cell-71-11">        pi_upper.sel(obs_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>group_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>j),</span>
<span id="annotated-cell-71-12">        alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="annotated-cell-71-13">    )</span>
<span id="annotated-cell-71-14"></span>
<span id="annotated-cell-71-15">ax.legend(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group"</span>)</span>
<span id="annotated-cell-71-16">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P(Y = 1)"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-71" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-71" data-code-lines="1" data-code-annotation="1">Compute the mean of <img src="https://latex.codecogs.com/png.latex?%5Cpi"> across all chains and draws. It gives the mean for every observation.</span>
</dd>
<dt data-target-cell="annotated-cell-71" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-71" data-code-lines="2" data-code-annotation="2">Compute quantiles of <img src="https://latex.codecogs.com/png.latex?%5Cpi"> across all chains and draws. It gives the bounds for a credible interval of <img src="https://latex.codecogs.com/png.latex?%5Cpi"> for every observation.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/index_files/figure-html/cell-67-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="where-to-go-next" class="level2">
<h2 class="anchored" data-anchor-id="where-to-go-next">Where to go next</h2>
<p>If you, like me, enjoyed exploring these less obvious uses of PyMC, I invite you to check out two other articles I co-authored with Ricardo Vieira. They dive deeper into advanced data simulation and out-of-model predictions with PyMC.</p>
<ul>
<li><a href="https://www.pymc-labs.com/blog-posts/simulating-data-with-pymc/">Simulating data with PyMC</a></li>
<li><a href="https://www.pymc-labs.com/blog-posts/out-of-model-predictions-with-pymc/">Out of model predictions with PyMC</a></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>You could also say it generates values from a random variable↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/</guid>
  <pubDate>Fri, 01 Nov 2024 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2024-11-01_pymc-data-simulation/imgs/cover.png" medium="image" type="image/png" height="87" width="144"/>
</item>
<item>
  <title>How to create a custom family in Bambi?</title>
  <link>https://tomicapretto.github.io/posts/2023-01-14_add_custom_family_bambi/</link>
  <description><![CDATA[ 




<p>Bambi is the project I dedicate the vast majority of my open-source development time. My goal is to make it a little better every time I push to the main branch. Lately I’ve been working to expand the class of models that Bambi supports. Until now, Bambi supported Generalized Linear Mixed Models (GLMMs). After the latest changes<sup>1</sup> Bambi supports a wider class known as Generalized Linear Mixed Models for Location, Scale, and Shape. I also like the terminology used in <a href="https://mc-stan.org/users/interfaces/brms">brms</a>, Distributional Models.</p>
<p>The new additions to the library allow us to work with more flexible custom model families in an easier way. The question is: How to create a custom family in Bambi?</p>
<p>🚨 You don’t have time or simply don’t want to read the whole thing? Here’s your TL;DR</p>
<section id="imports" class="level2">
<h2 class="anchored" data-anchor-id="imports">Imports</h2>
<div id="2ae38f65" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> bambi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bmb</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pymc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bambi.plots <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plot_cap</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.lines <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Line2D</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.special <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> expit</span></code></pre></div>
</div>
</section>
<section id="the-zero-inflated-poisson-distribution" class="level2">
<h2 class="anchored" data-anchor-id="the-zero-inflated-poisson-distribution">The Zero-Inflated Poisson distribution</h2>
<p>I’m going to use the Zero-Inflated Poisson distribution to demonstrate how to add a custom family in Bambi. This distribution applies to random variables that show an excess of zeros when describing the number of events that occur in a certain space or time period.</p>
<p>Quoting Wikipedia <sup>2</sup> <em>“The zero-inflated Poisson (ZIP) model mixes two zero generating processes. The first process generates zeros. The second process is governed by a Poisson distribution that generates counts, some of which may be zero”.</em> The result is a mixture distribution that can be described as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bll%7D%0AP(Y%20=%200)%20=%20(1%20-%20%5Cpsi)%20+%20%5Cpsi%20e%5E%7B-%5Cmu%7D%20%5C%5C%0AP(Y%20=%20y_i)%20=%20%5Cdisplaystyle%20%5Cpsi%20%5Cfrac%7Be%5E%7B-%5Cmu%7D%5Cmu%5Ey_i%7D%7By_i!%7D%20&amp;%20%5Ctext%7Bwith%20%7D%20y_i=1,2,3,%5Cldots%0A%5Cend%7Barray%7D%0A"></p>
<p>Where</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?y_i"> is the outcome, <img src="https://latex.codecogs.com/png.latex?y_i%20%5Cin%20%5Cmathbb%7BZ%7D%5E+"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmu"> is the mean of the Poisson process, <img src="https://latex.codecogs.com/png.latex?%5Cmu%20%5Cge%200"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cpsi"> is the probability of the Poisson process, <img src="https://latex.codecogs.com/png.latex?0%20%3C%20%5Cpsi%20%3C%201"></li>
</ul>
<p>The mean is <img src="https://latex.codecogs.com/png.latex?%5Cpsi%5Cmu"> and the variance is <img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cmu%20+%20%5Cfrac%7B1-%5Cpsi%7D%7B%5Cpsi%7D%5Cmu%5E2">.</p>
</section>
<section id="the-zip-regression-model" class="level2">
<h2 class="anchored" data-anchor-id="the-zip-regression-model">The ZIP Regression model</h2>
<p>We have a response variable <img src="https://latex.codecogs.com/png.latex?Y">, which represents the number of events that occur in a certain space or time period, and <img src="https://latex.codecogs.com/png.latex?p"> predictors <img src="https://latex.codecogs.com/png.latex?X_1,%20%5Ccdots,%20X_p">. In the most general formulation of the model we consider, a function of the parameters in the response distribution is given by a linear combination of the predictors.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20&amp;%5Csim%20%5Ctext%7BZIPoisson%7D(%5Cmu_i,%20%5Cpsi_i)%20%5C%5C%0Ag(%5Cmu_i)%20&amp;=%20%5Cbeta_0%20+%20%5Cbeta_1%20X_%7B1i%7D%20+%20...%20+%20%5Cbeta_p%20X_%7Bpi%7D%5C%5C%0Ah(%5Cpsi_i)%20&amp;=%20%5Calpha_0%20+%20%5Calpha_1%20X_%7B1i%7D%20+%20...%20+%20%5Calpha_p%20X_%7Bpi%7D%0A%5Cend%7Baligned%7D%0A"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?g"> is the link function for the <img src="https://latex.codecogs.com/png.latex?%5Cmu"> parameter</li>
<li><img src="https://latex.codecogs.com/png.latex?h"> is the link function for the <img src="https://latex.codecogs.com/png.latex?%5Cpsi"> parameter</li>
</ul>
<p>It’s possible to see this model written as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20&amp;%5Csim%20%5Ctext%7BZIPoisson%7D(%5Cmu_i,%20%5Cpsi_i)%20%5C%5C%0A%5Cmu_i%20&amp;=%20g%5E%7B-1%7D(%5Cbeta_0%20+%20%5Cbeta_1%20X_%7B1i%7D%20+%20...)%20%5C%5C%0A%5Cpsi_i%20&amp;=%20h%5E%7B-1%7D(%5Calpha_0%20+%20%5Calpha_1%20X_%7B1i%7D%20+%20...)%0A%5Cend%7Baligned%7D%0A"></p>
<p>where the requirement that <img src="https://latex.codecogs.com/png.latex?g"> and <img src="https://latex.codecogs.com/png.latex?h"> are both invertible becomes evident.</p>
</section>
<section id="create-the-zeroinflatedpoisson-family" class="level2">
<h2 class="anchored" data-anchor-id="create-the-zeroinflatedpoisson-family">Create the <code>ZeroInflatedPoisson</code> Family</h2>
<p>It comes one of the most important parts of the blogpost. If you care about creating new model families, this is what you need. Spoiler: it’s very easy.</p>
<p>To create a model family, we first need to understand <em>what is</em> a family. A family is an entity that is defined by the combination of two objects</p>
<ul>
<li>A <strong>likelihood</strong> function – the probability distribution for the response variable</li>
<li>A <strong>link</strong> function for the parameters of the likelihood function.</li>
</ul>
<p>Each of these three objects have their own class in Bambi. Families are created with the <code>Family</code> class, likelihood functions are created with the <code>Likelihood</code> class, and for link functions, well, we have <code>Link</code>.</p>
<section id="create-the-likelihood" class="level3">
<h3 class="anchored" data-anchor-id="create-the-likelihood">Create the likelihood</h3>
<p>Let’s get started with the likelihood function. Here we need:</p>
<ul>
<li>The name of the likelihood, which must be a valid PyMC distribution <sup>3</sup></li>
<li>The names of the parameters in the PyMC distribution</li>
<li>The identification of a <em>parent</em> or <em>main</em> parameter. In regression settings this is usually the mean</li>
</ul>
<p>In our case, we want to use the ZeroInflatedPoisson distribution from PyMC, which has parameters <code>mu</code> and <code>psi</code>, and <code>mu</code> is the parent parameter.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Likelihood(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ZeroInflatedPoisson"</span>, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi"</span>], parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>)</span></code></pre></div>
<p>That’s it! We have our custom likelihood function.</p>
</section>
<section id="create-the-link" class="level3">
<h3 class="anchored" data-anchor-id="create-the-link">Create the link</h3>
<p>Before telling Bambi which link functions we want for the parameters, we need to choose them. I’m going to use the logarithm function for <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and the logit function for <img src="https://latex.codecogs.com/png.latex?%5Cpsi">. In the original formulation of the model we replace <img src="https://latex.codecogs.com/png.latex?g"> with <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Blog%7D"> and <img src="https://latex.codecogs.com/png.latex?h"> with <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Blogit%7D">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20&amp;%5Csim%20%5Ctext%7BZIPoisson%7D(%5Cmu_i,%20%5Cpsi_i)%20%5C%5C%0A%5Ctext%7Blog%7D(%5Cmu_i)%20&amp;=%20%5Cbeta_0%20+%20%5Cbeta_1%20X_%7B1i%7D%20+%20...%20+%20%5Cbeta_p%20X_%7Bpi%7D%20%5C%5C%0A%5Ctext%7Blogit%7D(%5Cpsi_i)%20&amp;=%20%5Calpha_0%20+%20%5Calpha_1%20X_%7B1i%7D%20+%20...%20+%20%5Calpha_p%20X_%7Bpi%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>Next, we define them in code. Here we could use <code>bmb.Link</code>, but it’s not needed in our case because both the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Blog%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Blogit%7D"> link functions are already implemented in Bambi. We just need to pass their names and Bambi will know how to handle it <sup>4</sup>. We create a dictionary where the keys are the names of the parameters and the values are the link functions.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">links <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logit"</span>}</span></code></pre></div>
</section>
<section id="create-the-family" class="level3">
<h3 class="anchored" data-anchor-id="create-the-family">Create the family</h3>
<p>Finally we can put the pieces together to create the family. Here we have all the code again so we see how simple it is. Notice we need to give the family a name. We can pass whatever we want here.</p>
<div id="aab2b373" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Likelihood(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ZeroInflatedPoisson"</span>, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi"</span>], parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>)</span>
<span id="cb4-2">links <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logit"</span>}</span>
<span id="cb4-3">zip_family <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Family(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zip"</span>, likelihood, links)</span>
<span id="cb4-4">zip_family</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>Family: zip
Likelihood: Likelihood(  
  name: ZeroInflatedPoisson,
  params: ['mu', 'psi'],
  parent: mu
)
Link: {'mu': Link(  
  name: log,
  link: &lt;ufunc 'log'&gt;,
  linkinv: &lt;ufunc 'exp'&gt;
), 'psi': Link(  
  name: logit,
  link: &lt;function logit at 0x7f2fecbb7880&gt;,
  linkinv: &lt;function expit at 0x7f2fecbb77f0&gt;
)}</code></pre>
</div>
</div>
<p>When we print the family we get information about the name, the likelihood, and the links. It contains many details for the link functions, but they’re not important now <sup>5</sup>.</p>
<p>Now that we have our brand new custom family, it’s time to test it!</p>
</section>
</section>
<section id="the-simplest-case" class="level2">
<h2 class="anchored" data-anchor-id="the-simplest-case">The simplest case</h2>
<p>We need some data to use our new family. How can we get it? Simulation!</p>
<p>Here we consider the case where we obtain samples from <strong>a single ZIPoisson distribution</strong>. There are no predictors that allow us to distinguish observations. Both <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Cpsi"> are the same for all observations.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20&amp;%5Csim%20%5Ctext%7BZIPoisson%7D(%5Cmu,%20%5Cpsi)%20%5C%5C%0A%5Cmu%20&amp;%5Csim%20%5Ctext%7BSome%20prior%7D%20%5C%5C%0A%5Cpsi%20&amp;%5Csim%20%5Ctext%7BSome%20prior%7D%0A%5Cend%7Baligned%7D%0A"></p>
<section id="simulate-the-data" class="level3">
<h3 class="anchored" data-anchor-id="simulate-the-data">Simulate the data</h3>
<p>To simulate draws from this ZIPoisson distribution we can use plain NumPy in a very a manual way, simply concatenate a bunch of zeros to an array with draws from a Poisson distribution and we’re done.</p>
<div id="7d6fcc62" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121195</span>)</span>
<span id="cb6-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([np.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>), rng.poisson(lam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>)])</span>
<span id="cb6-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>: x})</span></code></pre></div>
</div>
<p>Let’s explore the data now. A simple barchart is enough to get the information we need.</p>
<div id="b08917d9" class="cell" data-execution_count="4">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2023-01-14_add_custom_family_bambi/index_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Definetely, it looks like a Poisson distribution but the bar at zero is unusually high, indicating excess of zeros or zero-inflation.</p>
</section>
<section id="build-and-fit-the-model" class="level3">
<h3 class="anchored" data-anchor-id="build-and-fit-the-model">Build and fit the model</h3>
<p>Without much preamble we’re going to build the model. In this basic model we don’t have predictors for any of the parameters. This means we specify an intercept-only model for <img src="https://latex.codecogs.com/png.latex?%5Cmu">, and a prior distribution for <img src="https://latex.codecogs.com/png.latex?%5Cpsi">. Here I use a Beta distribution that guarantees the values of <img src="https://latex.codecogs.com/png.latex?%5Cpsi"> are bounded between 0 and 1.</p>
<div id="ff463924" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">priors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi"</span>: bmb.Prior(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Beta"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)}</span>
<span id="cb7-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response ~ 1"</span>, df, family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zip_family, priors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>priors)</span>
<span id="cb7-3">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>       Formula: response ~ 1
        Family: zip
          Link: mu = log
  Observations: 1000
        Priors: 
    target = mu
        Common-level effects
            Intercept ~ Normal(mu: 0.0, sigma: 2.5)
        
        Auxiliary parameters
            response_psi ~ Beta(alpha: 3.0, beta: 3.0)</code></pre>
</div>
</div>
<p>And now… let’s get the sampler running!</p>
<div id="18327ad6" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [response_psi, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:05&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 6 seconds.</code></pre>
</div>
</div>
<p>It worked fast, without warnings or errors, I would say that’s a great start. The next question is: does the fit make sense? I’m not going to investigate it thoroughly now. A visualization of the posterior predictive distribution will be enough.</p>
<div id="4658b537" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">model.predict(idata, kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pps"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get draws from the posterior predictive distribution</span></span>
<span id="cb12-2">az.plot_ppc(idata)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2023-01-14_add_custom_family_bambi/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Awesome! Feels like magic. We created a custom family and it just… worked.</p>
</section>
</section>
<section id="a-second-example-now-with-a-predictor" class="level2">
<h2 class="anchored" data-anchor-id="a-second-example-now-with-a-predictor">A second example, now with a predictor</h2>
<p>Let’s keep testing our <code>zip</code> family. Now we’re going to simulate data again. This time we have a numerical predictor that is related with both <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Cpsi">.</p>
<p>The model is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AY_i%20&amp;%5Csim%20%5Ctext%7BZIPoisson%7D(%5Cmu_i,%20%5Cpsi_i)%20%5C%5C%0A%5Ctext%7Blog%7D(%5Cmu_i)%20&amp;=%20%5Cbeta_0%20+%20%5Cbeta_1%20X_%7B1i%7D%20%5C%5C%0A%5Ctext%7Blogit%7D(%5Cpsi_i)%20&amp;=%20%5Calpha_0%20+%20%5Calpha_1%20X_%7B1i%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>but we first need the data…</p>
<section id="simulate-the-data-1" class="level3">
<h3 class="anchored" data-anchor-id="simulate-the-data-1">Simulate the data</h3>
<p>This time we use NumPy to generate random values for the predictor, but we use <code>pm.draw()</code> to get draws from a <code>ZeroInflatedPoisson</code> distribution.</p>
<div id="0a9e057f" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121195</span>)</span>
<span id="cb13-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(rng.uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>))</span>
<span id="cb13-3"></span>
<span id="cb13-4">b0, b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span></span>
<span id="cb13-5">a0, a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span></span>
<span id="cb13-6">mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(b0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x)</span>
<span id="cb13-7">psi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expit(a0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x)</span>
<span id="cb13-8"></span>
<span id="cb13-9">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.draw(pm.ZeroInflatedPoisson.dist(mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, psi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>psi))</span>
<span id="cb13-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: x})</span></code></pre></div>
</div>
<p>Visualizations are the key to understand how the predictor is associated with the parameters of the likelihood.</p>
<div id="7a1eccc5" class="cell" data-execution_count="9">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2023-01-14_add_custom_family_bambi/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Here we have two main takeaways</p>
<ul>
<li>The mean of the Poisson process increases with the value of the predictor</li>
<li>The importance of the Poisson process in the mixture decreases with the value of the predictor</li>
</ul>
<p>Finally, why not displaying the observations in a scatterplot of the predictor versus the response.</p>
<div id="0624fe34" class="cell" data-execution_count="10">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2023-01-14_add_custom_family_bambi/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>See how the response values tend to increase as the predictor is larger, but also it tends to be more observations with a zero count.</p>
</section>
<section id="build-and-fit-the-model-again" class="level3">
<h3 class="anchored" data-anchor-id="build-and-fit-the-model-again">Build and fit the model (again)</h3>
<p>It’s time to define the new model. Since we model both <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Cpsi"> components as a function of the predictor, they both need a model formula. This is when we use <code>bmb.Formula()</code>. The first formula is the one for the <code>parent</code> parameter, which is <img src="https://latex.codecogs.com/png.latex?%5Cmu">, and the following formulas are for the non-parent parameters. In this case, we only have <img src="https://latex.codecogs.com/png.latex?%5Cpsi">. Finally notice we don’t need to create the family again, we just reuse it.</p>
<div id="0c0c4ea3" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">formula <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Formula(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi ~ x"</span>)</span>
<span id="cb14-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(formula, df, family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zip_family)</span>
<span id="cb14-3">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>       Formula: y ~ x
                psi ~ x
        Family: zip
          Link: mu = log
                psi = logit
  Observations: 1000
        Priors: 
    target = mu
        Common-level effects
            Intercept ~ Normal(mu: 0.0, sigma: 5.7176)
            x ~ Normal(mu: 0.0, sigma: 3.0682)
    target = psi
        Common-level effects
            psi_Intercept ~ Normal(mu: 0.0, sigma: 1.0)
            psi_x ~ Normal(mu: 0.0, sigma: 1.0)</code></pre>
</div>
</div>
<p>The model summary contains so much information. It shows the priors for the parameters in the linear predictors of both parameters in different sections. First we have the priors for <code>mu</code> below <code>target = mu</code>, and then the priors for <code>psi</code> below <code>target = psi</code>.</p>
<p>It’s also helpful to show a graph representation of the model.</p>
<div id="eb20e79b" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">model.build()</span>
<span id="cb16-2">model.graph()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2023-01-14_add_custom_family_bambi/index_files/figure-html/cell-13-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Model fitting is the same way as always.</p>
<div id="3d73acec" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121195</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [Intercept, x, psi_Intercept, psi_x]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:10&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 11 seconds.</code></pre>
</div>
</div>
</section>
<section id="evaluate-the-inference" class="level3">
<h3 class="anchored" data-anchor-id="evaluate-the-inference">Evaluate the inference</h3>
<p>Because it’s a simulated scenario, we know the true parameter values. This allows us to verify if the posteriors are recovering them.</p>
<div id="d5b2d3bf" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"constrained"</span>)</span>
<span id="cb20-2">az.plot_posterior(</span>
<span id="cb20-3">    idata,</span>
<span id="cb20-4">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Intercept"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi_Intercept"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi_x"</span>], </span>
<span id="cb20-5">    ref_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[b0, b1, a0, a1],</span>
<span id="cb20-6">    ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axes</span>
<span id="cb20-7">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2023-01-14_add_custom_family_bambi/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Great news! The true values are contained with the 94% HDIs, meaning the model and the inference process is able to recover true parameter values.</p>
</section>
<section id="show-off-bambi-a-little-more" class="level3">
<h3 class="anchored" data-anchor-id="show-off-bambi-a-little-more">Show-off Bambi a little more</h3>
<p>Before concluding I would like to show-off another function I’ve been working recently, <code>plot_cap()</code>. This function allows us to see how a model parameter evolves as we change values of one or more predictors. It’s so flexible we can get plots for both <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Cpsi">.</p>
<div id="e6784d54" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb21-2"></span>
<span id="cb21-3">plot_cap(model, idata, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By default it plots the "parent" parameter</span></span>
<span id="cb21-4">plot_cap(model, idata, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi"</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb21-5"></span>
<span id="cb21-6">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(x, mu, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb21-7">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x, psi, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb21-8"></span>
<span id="cb21-9">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predictor"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb21-10">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predictor"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb21-11">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">mu$"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb21-12">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">psi$"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb21-13"></span>
<span id="cb21-14"></span>
<span id="cb21-15">handles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Line2D([], [], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>), Line2D([], [], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C0"</span>)]</span>
<span id="cb21-16">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimate"</span>)</span>
<span id="cb21-17">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(handles, labels, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper left"</span>)</span>
<span id="cb21-18">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].legend(handles, labels, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2023-01-14_add_custom_family_bambi/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Notice the majority of the code handles Matplotlib specific details. To get the estimated lines and the credible bands we used the same one-liner twice, <code>plot_cap()</code>, and it did the magic for us.</p>
<p>Leaving that parise aside, this is a different way to see the model is recovering parameters very well. We can compare the estimated curves for both parameters with the real ones, and see they’re so close.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>We work a lot to make Bambi as flexible as possible, without asking users to do too much on their end. I think custom families is a subject where all the work starts to pay off. In this blogpost we were able to define a custom family in just three lines of code (!). What’s more, we got so many things for free in exchange for our effort. To mention a few</p>
<ul>
<li>Compute the posterior distribution of parameters of the response distribution
<ul>
<li>This works for both in-sample and out-of-sample data</li>
</ul></li>
<li>Compute the posterior predictive distribution
<ul>
<li>Also works for in-sample or out-of-sample data</li>
</ul></li>
<li>Out of the box visualizations to evaluate model fit</li>
<li>No need to write any PyMC code or low-level code</li>
</ul>
<p>I hope you found this writeup useful and needless to say I’m happy to collect feedback, suggestions, and questions.</p>
</section>
<section id="tl-dr" class="level2">
<h2 class="anchored" data-anchor-id="tl-dr">TL;DR</h2>
<p>If you want a custom family you need to</p>
<ul>
<li>Create a Likelihood instance</li>
<li>Define link functions</li>
<li>Use them to instantiate a Family object</li>
</ul>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Likelihood(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ZeroInflatedPoisson"</span>, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi"</span>], parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>)</span>
<span id="cb22-2">links <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"psi"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logit"</span>}</span>
<span id="cb22-3">zip_family <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Family(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero-inflated-poisson"</span>, likelihood, links)</span></code></pre></div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>See the PR <a href="https://github.com/bambinos/bambi/pull/607">#607</a>↩︎</p></li>
<li id="fn2"><p><a href="https://en.wikipedia.org/wiki/Zero-inflated_model#Zero-inflated_Poisson">https://en.wikipedia.org/wiki/Zero-inflated_model#Zero-inflated_Poisson</a>↩︎</p></li>
<li id="fn3"><p>Custom likelihood functions are also possible but we don’t cover them here↩︎</p></li>
<li id="fn4"><p>It’s possible to create custom link functions with <code>bmb.Link</code> as well↩︎</p></li>
<li id="fn5"><p>If you’re curious, check the docs. If you’re awesome, provide feedback 😄↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2023-01-14_add_custom_family_bambi/</guid>
  <pubDate>Sat, 14 Jan 2023 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2023-01-14_add_custom_family_bambi/imgs/ppcheck.png" medium="image" type="image/png" height="123" width="144"/>
</item>
<item>
  <title>Let’s use tidypolars more</title>
  <link>https://tomicapretto.github.io/posts/2022-06-26_tidypolars/</link>
  <description><![CDATA[ 




<section id="lets-use-tidypolars-more" class="level1">
<h1>Let’s use tidypolars more</h1>
<p>In this blogpost I’m going to show how to perform the same task with <a href="https://pandas.pydata.org/">pandas</a>, the most popular library for data analysis in Python, and <a href="https://tidypolars.readthedocs.io/en/latest/">tidypolars</a>, a new library to do data analysis with tabular data inspired on the tidyverse.</p>
<p>The task consists of computing a variable transformation that relies on grouped aggregations. In particular, we will be computing the standardized version of a numeric variable by group.</p>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> palmerpenguins</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tidypolars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tp</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tidypolars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> col</span></code></pre></div>
</div>
<p>I’m going to work with the famous palmer penguins dataset. In Python this can be loaded very easily thanks to the <code>palmerpenguins</code> library.</p>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> palmerpenguins.load_penguins()</span>
<span id="cb2-2">data</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">species</th>
<th data-quarto-table-cell-role="th">island</th>
<th data-quarto-table-cell-role="th">bill_length_mm</th>
<th data-quarto-table-cell-role="th">bill_depth_mm</th>
<th data-quarto-table-cell-role="th">flipper_length_mm</th>
<th data-quarto-table-cell-role="th">body_mass_g</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">year</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Adelie</td>
<td>Torgersen</td>
<td>39.1</td>
<td>18.7</td>
<td>181.0</td>
<td>3750.0</td>
<td>male</td>
<td>2007</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Adelie</td>
<td>Torgersen</td>
<td>39.5</td>
<td>17.4</td>
<td>186.0</td>
<td>3800.0</td>
<td>female</td>
<td>2007</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Adelie</td>
<td>Torgersen</td>
<td>40.3</td>
<td>18.0</td>
<td>195.0</td>
<td>3250.0</td>
<td>female</td>
<td>2007</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Adelie</td>
<td>Torgersen</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>2007</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Adelie</td>
<td>Torgersen</td>
<td>36.7</td>
<td>19.3</td>
<td>193.0</td>
<td>3450.0</td>
<td>female</td>
<td>2007</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">339</td>
<td>Chinstrap</td>
<td>Dream</td>
<td>55.8</td>
<td>19.8</td>
<td>207.0</td>
<td>4000.0</td>
<td>male</td>
<td>2009</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">340</td>
<td>Chinstrap</td>
<td>Dream</td>
<td>43.5</td>
<td>18.1</td>
<td>202.0</td>
<td>3400.0</td>
<td>female</td>
<td>2009</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">341</td>
<td>Chinstrap</td>
<td>Dream</td>
<td>49.6</td>
<td>18.2</td>
<td>193.0</td>
<td>3775.0</td>
<td>male</td>
<td>2009</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">342</td>
<td>Chinstrap</td>
<td>Dream</td>
<td>50.8</td>
<td>19.0</td>
<td>210.0</td>
<td>4100.0</td>
<td>male</td>
<td>2009</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">343</td>
<td>Chinstrap</td>
<td>Dream</td>
<td>50.2</td>
<td>18.7</td>
<td>198.0</td>
<td>3775.0</td>
<td>female</td>
<td>2009</td>
</tr>
</tbody>
</table>

<p>344 rows × 8 columns</p>
</div>
</div>
</div>
<section id="data-wrangling-with-pandas" class="level2">
<h2 class="anchored" data-anchor-id="data-wrangling-with-pandas">Data wrangling with <strong>pandas</strong></h2>
<p>Before seeing an example using tidypolars I’m going to perform some basic data wrangling with pandas. One of the first things one usually do with a data frame is exploring its first rows visually. The <code>.head()</code> method comes very handy.</p>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">species</th>
<th data-quarto-table-cell-role="th">island</th>
<th data-quarto-table-cell-role="th">bill_length_mm</th>
<th data-quarto-table-cell-role="th">bill_depth_mm</th>
<th data-quarto-table-cell-role="th">flipper_length_mm</th>
<th data-quarto-table-cell-role="th">body_mass_g</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">year</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Adelie</td>
<td>Torgersen</td>
<td>39.1</td>
<td>18.7</td>
<td>181.0</td>
<td>3750.0</td>
<td>male</td>
<td>2007</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Adelie</td>
<td>Torgersen</td>
<td>39.5</td>
<td>17.4</td>
<td>186.0</td>
<td>3800.0</td>
<td>female</td>
<td>2007</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Adelie</td>
<td>Torgersen</td>
<td>40.3</td>
<td>18.0</td>
<td>195.0</td>
<td>3250.0</td>
<td>female</td>
<td>2007</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Adelie</td>
<td>Torgersen</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>2007</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Adelie</td>
<td>Torgersen</td>
<td>36.7</td>
<td>19.3</td>
<td>193.0</td>
<td>3450.0</td>
<td>female</td>
<td>2007</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>I’m going to work with the <code>species</code>, <code>sex</code>, and <code>body_mass_g</code> columns only. To subset the dataframe we only need to pass the name of these columns as a list within brackets.</p>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>]].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-2">data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">species</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">body_mass_g</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Adelie</td>
<td>male</td>
<td>3750.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Adelie</td>
<td>female</td>
<td>3800.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Adelie</td>
<td>female</td>
<td>3250.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Adelie</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Adelie</td>
<td>female</td>
<td>3450.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>I add the <code>.reset_index(drop=True)</code> to avoid some <code>SettingWithCopyWarning</code>s later. I also want to drop any observations with missing values so I use <code>.dropna()</code> to do that.</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.dropna()</span></code></pre></div>
</div>
<p>Suppose now I want to standardize the variable <code>body_mass_g</code>. Pandas vectorized operations make it extremely easy. One can save the result in a new column in a very intuitive way as well.</p>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_z"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].mean()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].std()</span>
<span id="cb6-2">data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">species</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">body_mass_g</th>
<th data-quarto-table-cell-role="th">body_mass_z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Adelie</td>
<td>male</td>
<td>3750.0</td>
<td>-0.567621</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Adelie</td>
<td>female</td>
<td>3800.0</td>
<td>-0.505525</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Adelie</td>
<td>female</td>
<td>3250.0</td>
<td>-1.188572</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>Adelie</td>
<td>female</td>
<td>3450.0</td>
<td>-0.940192</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>Adelie</td>
<td>male</td>
<td>3650.0</td>
<td>-0.691811</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We could consider it is more appropiate to standardize considering the <code>species</code> variable. We still perform the same operation than above, but we do it within each group.</p>
<p>The way to perform such operations in pandas is to use the <code>.groupby()</code> method. Then one can select the desired column and compute the aggregation.</p>
<p>For example, to compute the mean body mass by species we can do the following.</p>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">data.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].mean()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>species
Adelie       3706.164384
Chinstrap    3733.088235
Gentoo       5092.436975
Name: body_mass_g, dtype: float64</code></pre>
</div>
</div>
<p>We obtained a pandas Series with three values, the mean for each species. If we want to obtain a Series of the same length than the original data, it is, for each row the mean of the species the observation belongs to, we can use <code>.transform()</code>.</p>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">data.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>0      3706.164384
1      3706.164384
2      3706.164384
4      3706.164384
5      3706.164384
          ...     
339    3733.088235
340    3733.088235
341    3733.088235
342    3733.088235
343    3733.088235
Name: body_mass_g, Length: 333, dtype: float64</code></pre>
</div>
</div>
<p>The same can be done with other transformations such as the standard deviation.</p>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">data.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>0      458.620135
1      458.620135
2      458.620135
4      458.620135
5      458.620135
          ...    
339    384.335081
340    384.335081
341    384.335081
342    384.335081
343    384.335081
Name: body_mass_g, Length: 333, dtype: float64</code></pre>
</div>
</div>
<p>Now, putting all the pieces together, we can compute the standardized body mass by species.</p>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_z"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb13-2">    (data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> data.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)) </span>
<span id="cb13-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> data.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>)</span>
<span id="cb13-4">)</span>
<span id="cb13-5">data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">species</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">body_mass_g</th>
<th data-quarto-table-cell-role="th">body_mass_z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Adelie</td>
<td>male</td>
<td>3750.0</td>
<td>0.095582</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Adelie</td>
<td>female</td>
<td>3800.0</td>
<td>0.204604</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Adelie</td>
<td>female</td>
<td>3250.0</td>
<td>-0.994645</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>Adelie</td>
<td>female</td>
<td>3450.0</td>
<td>-0.558555</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>Adelie</td>
<td>male</td>
<td>3650.0</td>
<td>-0.122464</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>It’s also possible to add more variables to the groups. For example, this is how we can perform the same compution considering groups given by species and sex.</p>
<div id="cell-22" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_z"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb14-2">    (data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> data.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)) </span>
<span id="cb14-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> data.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>)</span>
<span id="cb14-4">)</span>
<span id="cb14-5">data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">species</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">body_mass_g</th>
<th data-quarto-table-cell-role="th">body_mass_z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Adelie</td>
<td>male</td>
<td>3750.0</td>
<td>-0.846261</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Adelie</td>
<td>female</td>
<td>3800.0</td>
<td>1.600580</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Adelie</td>
<td>female</td>
<td>3250.0</td>
<td>-0.441145</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>Adelie</td>
<td>female</td>
<td>3450.0</td>
<td>0.301301</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>Adelie</td>
<td>male</td>
<td>3650.0</td>
<td>-1.134602</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>And finally, I can sort by the standardized body mass in ascending order.</p>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">data.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_z"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">species</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">body_mass_g</th>
<th data-quarto-table-cell-role="th">body_mass_z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">314</td>
<td>Chinstrap</td>
<td>female</td>
<td>2700.0</td>
<td>-2.899080</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">192</td>
<td>Gentoo</td>
<td>female</td>
<td>3950.0</td>
<td>-2.591611</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">195</td>
<td>Gentoo</td>
<td>male</td>
<td>4750.0</td>
<td>-2.346530</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">298</td>
<td>Chinstrap</td>
<td>female</td>
<td>2900.0</td>
<td>-2.198147</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">119</td>
<td>Adelie</td>
<td>male</td>
<td>3325.0</td>
<td>-2.071711</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">114</td>
<td>Adelie</td>
<td>female</td>
<td>3900.0</td>
<td>1.971803</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">109</td>
<td>Adelie</td>
<td>male</td>
<td>4775.0</td>
<td>2.109234</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284</td>
<td>Chinstrap</td>
<td>female</td>
<td>4150.0</td>
<td>2.182685</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">313</td>
<td>Chinstrap</td>
<td>male</td>
<td>4800.0</td>
<td>2.377631</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">169</td>
<td>Gentoo</td>
<td>male</td>
<td>6300.0</td>
<td>2.603039</td>
</tr>
</tbody>
</table>

<p>333 rows × 4 columns</p>
</div>
</div>
</div>
</section>
<section id="data-wrangling-with-tidypolars" class="level2">
<h2 class="anchored" data-anchor-id="data-wrangling-with-tidypolars">Data wrangling with <strong>tidypolars</strong></h2>
<p>Now it’s time to see the same operations performed with tidypolars. Tidypolars is inspired on the <a href="https://www.tidyverse.org/"><code>tidyverse</code></a>, a set of packages following a consistent design phillosophy that has revolutionated the way we do data science in R and other languages as well.</p>
<p>Its description says &gt; tidypolars is a data frame library built on top of the blazingly fast <a href="https://github.com/pola-rs/polars">polars</a> library that gives access to methods and functions familiar to R tidyverse users.</p>
<p>Tidypolars does not rely on any pandas data structure because it’s built on top of polars, not pandas. In addition, it works with a new data frame structure called <code>Tibble</code>, borrowing its name from the <code>tibble</code> in the R package of the same name.</p>
<p>We can convert a pandas DataFrame to a tibble with the <code>.from_pandas()</code> function.</p>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">tibble <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tp.from_pandas(palmerpenguins.load_penguins())</span>
<span id="cb16-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(tibble)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tidypolars.tibble.Tibble</code></pre>
</div>
</div>
<p>We still have a <code>.head()</code> method that prints the first rows. The representation is very similar to a pandas data frame.</p>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">tibble.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

    .dataframe td {
        white-space: pre;
    }

    .dataframe td {
        line-height: 95%;
    }

    .dataframe td {
        padding-top: 0;
    }

    .dataframe td {
        padding-bottom: 0;
    }
</style>
<small>shape: (5, 8)</small><table class="dataframe table table-sm table-striped small">

<thead>
<tr>
<th>
species
</th>
<th>
island
</th>
<th>
bill_length_mm
</th>
<th>
bill_depth_mm
</th>
<th>
flipper_length_mm
</th>
<th>
body_mass_g
</th>
<th>
sex
</th>
<th>
year
</th>
</tr>
<tr>
<td>
str
</td>
<td>
str
</td>
<td>
f64
</td>
<td>
f64
</td>
<td>
f64
</td>
<td>
f64
</td>
<td>
str
</td>
<td>
i64
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
39.1
</td>
<td>
18.7
</td>
<td>
181.0
</td>
<td>
3750.0
</td>
<td>
"male"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
39.5
</td>
<td>
17.4
</td>
<td>
186.0
</td>
<td>
3800.0
</td>
<td>
"female"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
40.3
</td>
<td>
18.0
</td>
<td>
195.0
</td>
<td>
3250.0
</td>
<td>
"female"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
null
</td>
<td>
null
</td>
<td>
null
</td>
<td>
null
</td>
<td>
null
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
36.7
</td>
<td>
19.3
</td>
<td>
193.0
</td>
<td>
3450.0
</td>
<td>
"female"
</td>
<td>
2007
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>To filter rows we can use the <code>.filter()</code> method. In the next chunk of code we use <code>col("*")</code> to select all columns, <code>tp.is_not_null()</code> to flag observations with non-null values, and <code>.filter()</code> to use those booleans to actually perform the filtering.</p>
<p><strong>Update:</strong> See <a href="">this issue</a> where the main author of tidypolars lets me know that we can use the <code>.drop_null()</code> method instead.</p>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">tibble.drop_null()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

    .dataframe td {
        white-space: pre;
    }

    .dataframe td {
        line-height: 95%;
    }

    .dataframe td {
        padding-top: 0;
    }

    .dataframe td {
        padding-bottom: 0;
    }
</style>
<small>shape: (333, 8)</small><table class="dataframe table table-sm table-striped small">

<thead>
<tr>
<th>
species
</th>
<th>
island
</th>
<th>
bill_length_mm
</th>
<th>
bill_depth_mm
</th>
<th>
flipper_length_mm
</th>
<th>
body_mass_g
</th>
<th>
sex
</th>
<th>
year
</th>
</tr>
<tr>
<td>
str
</td>
<td>
str
</td>
<td>
f64
</td>
<td>
f64
</td>
<td>
f64
</td>
<td>
f64
</td>
<td>
str
</td>
<td>
i64
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
39.1
</td>
<td>
18.7
</td>
<td>
181.0
</td>
<td>
3750.0
</td>
<td>
"male"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
39.5
</td>
<td>
17.4
</td>
<td>
186.0
</td>
<td>
3800.0
</td>
<td>
"female"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
40.3
</td>
<td>
18.0
</td>
<td>
195.0
</td>
<td>
3250.0
</td>
<td>
"female"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
36.7
</td>
<td>
19.3
</td>
<td>
193.0
</td>
<td>
3450.0
</td>
<td>
"female"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
39.3
</td>
<td>
20.6
</td>
<td>
190.0
</td>
<td>
3650.0
</td>
<td>
"male"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
38.9
</td>
<td>
17.8
</td>
<td>
181.0
</td>
<td>
3625.0
</td>
<td>
"female"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
39.2
</td>
<td>
19.6
</td>
<td>
195.0
</td>
<td>
4675.0
</td>
<td>
"male"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
41.1
</td>
<td>
17.6
</td>
<td>
182.0
</td>
<td>
3200.0
</td>
<td>
"female"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
38.6
</td>
<td>
21.2
</td>
<td>
191.0
</td>
<td>
3800.0
</td>
<td>
"male"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
34.6
</td>
<td>
21.1
</td>
<td>
198.0
</td>
<td>
4400.0
</td>
<td>
"male"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
36.6
</td>
<td>
17.8
</td>
<td>
185.0
</td>
<td>
3700.0
</td>
<td>
"female"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"Torgersen"
</td>
<td>
38.7
</td>
<td>
19.0
</td>
<td>
195.0
</td>
<td>
3450.0
</td>
<td>
"female"
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
45.2
</td>
<td>
16.6
</td>
<td>
191.0
</td>
<td>
3250.0
</td>
<td>
"female"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
49.3
</td>
<td>
19.9
</td>
<td>
203.0
</td>
<td>
4050.0
</td>
<td>
"male"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
50.2
</td>
<td>
18.8
</td>
<td>
202.0
</td>
<td>
3800.0
</td>
<td>
"male"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
45.6
</td>
<td>
19.4
</td>
<td>
194.0
</td>
<td>
3525.0
</td>
<td>
"female"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
51.9
</td>
<td>
19.5
</td>
<td>
206.0
</td>
<td>
3950.0
</td>
<td>
"male"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
46.8
</td>
<td>
16.5
</td>
<td>
189.0
</td>
<td>
3650.0
</td>
<td>
"female"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
45.7
</td>
<td>
17.0
</td>
<td>
195.0
</td>
<td>
3650.0
</td>
<td>
"female"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
55.8
</td>
<td>
19.8
</td>
<td>
207.0
</td>
<td>
4000.0
</td>
<td>
"male"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
43.5
</td>
<td>
18.1
</td>
<td>
202.0
</td>
<td>
3400.0
</td>
<td>
"female"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
49.6
</td>
<td>
18.2
</td>
<td>
193.0
</td>
<td>
3775.0
</td>
<td>
"male"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
50.8
</td>
<td>
19.0
</td>
<td>
210.0
</td>
<td>
4100.0
</td>
<td>
"male"
</td>
<td>
2009
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"Dream"
</td>
<td>
50.2
</td>
<td>
18.7
</td>
<td>
198.0
</td>
<td>
3775.0
</td>
<td>
"female"
</td>
<td>
2009
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>It’s very easy to select columns with the <code>.select()</code> method.</p>
<div id="cell-32" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">tibble.select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

    .dataframe td {
        white-space: pre;
    }

    .dataframe td {
        line-height: 95%;
    }

    .dataframe td {
        padding-top: 0;
    }

    .dataframe td {
        padding-bottom: 0;
    }
</style>
<small>shape: (344, 3)</small><table class="dataframe table table-sm table-striped small">

<thead>
<tr>
<th>
species
</th>
<th>
sex
</th>
<th>
body_mass_g
</th>
</tr>
<tr>
<td>
str
</td>
<td>
str
</td>
<td>
f64
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3750.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3800.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3250.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
null
</td>
<td>
null
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3450.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3650.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3625.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4675.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
null
</td>
<td>
3475.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
null
</td>
<td>
4250.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
null
</td>
<td>
3300.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
null
</td>
<td>
3700.0
</td>
</tr>
<tr>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3250.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4050.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
3800.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3525.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
3950.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3650.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3650.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4000.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3400.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
3775.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4100.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3775.0
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>What’s even better, we can chain these operations. This is where one can start seeing how powerful this approach is.</p>
<div id="cell-34" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">(</span>
<span id="cb21-2">    tibble</span>
<span id="cb21-3">    .drop_null()</span>
<span id="cb21-4">    .select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>)</span>
<span id="cb21-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

    .dataframe td {
        white-space: pre;
    }

    .dataframe td {
        line-height: 95%;
    }

    .dataframe td {
        padding-top: 0;
    }

    .dataframe td {
        padding-bottom: 0;
    }
</style>
<small>shape: (333, 3)</small><table class="dataframe table table-sm table-striped small">

<thead>
<tr>
<th>
species
</th>
<th>
sex
</th>
<th>
body_mass_g
</th>
</tr>
<tr>
<td>
str
</td>
<td>
str
</td>
<td>
f64
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3750.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3800.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3250.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3450.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3650.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3625.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4675.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3200.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3800.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4400.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3700.0
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3450.0
</td>
</tr>
<tr>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3250.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4050.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
3800.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3525.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
3950.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3650.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3650.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4000.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3400.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
3775.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4100.0
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
3775.0
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>We then have the <code>.summarise()</code> method to compute summaries (or aggregations) by groups. Note we use functions available in the tidypolars namespace such as <code>tp.mean()</code>.</p>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">(</span>
<span id="cb22-2">    tibble</span>
<span id="cb22-3">    .drop_null()</span>
<span id="cb22-4">    .select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>)</span>
<span id="cb22-5">    .summarise(</span>
<span id="cb22-6">        body_mass_mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tp.mean(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>),</span>
<span id="cb22-7">        by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span></span>
<span id="cb22-8">    )</span>
<span id="cb22-9">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

    .dataframe td {
        white-space: pre;
    }

    .dataframe td {
        line-height: 95%;
    }

    .dataframe td {
        padding-top: 0;
    }

    .dataframe td {
        padding-bottom: 0;
    }
</style>
<small>shape: (3, 2)</small><table class="dataframe table table-sm table-striped small">

<thead>
<tr>
<th>
species
</th>
<th>
body_mass_mean
</th>
</tr>
<tr>
<td>
str
</td>
<td>
f64
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
"Adelie"
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
3733.088235
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>If we want to get a behavior similar to <code>.groupby()</code> and <code>.transform()</code> in pandas, we can use another verb, <code>mutate()</code>.</p>
<div id="cell-38" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">(</span>
<span id="cb23-2">    tibble</span>
<span id="cb23-3">    .drop_null()</span>
<span id="cb23-4">    .select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>)</span>
<span id="cb23-5">    .mutate(</span>
<span id="cb23-6">        body_mass_mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tp.mean(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>),</span>
<span id="cb23-7">        by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span></span>
<span id="cb23-8">    )</span>
<span id="cb23-9">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

    .dataframe td {
        white-space: pre;
    }

    .dataframe td {
        line-height: 95%;
    }

    .dataframe td {
        padding-top: 0;
    }

    .dataframe td {
        padding-bottom: 0;
    }
</style>
<small>shape: (333, 4)</small><table class="dataframe table table-sm table-striped small">

<thead>
<tr>
<th>
species
</th>
<th>
sex
</th>
<th>
body_mass_g
</th>
<th>
body_mass_mean
</th>
</tr>
<tr>
<td>
str
</td>
<td>
str
</td>
<td>
f64
</td>
<td>
f64
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4500.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5700.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4450.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5700.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5400.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4550.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4800.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5200.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4400.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5150.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4650.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5550.0
</td>
<td>
5092.436975
</td>
</tr>
<tr>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3400.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3475.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3050.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3725.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3000.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3650.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4250.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3475.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3450.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3750.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3700.0
</td>
<td>
3706.164384
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4000.0
</td>
<td>
3706.164384
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>This verb is very powerful. We can compute more complex expressions, such as the one involved in the standardization of a variable.</p>
<div id="cell-40" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">(</span>
<span id="cb24-2">    tibble</span>
<span id="cb24-3">    .drop_null()</span>
<span id="cb24-4">    .select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>)</span>
<span id="cb24-5">    .mutate(</span>
<span id="cb24-6">        body_mass_z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tp.mean(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> tp.sd(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>),</span>
<span id="cb24-7">        by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span></span>
<span id="cb24-8">    )</span>
<span id="cb24-9">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

    .dataframe td {
        white-space: pre;
    }

    .dataframe td {
        line-height: 95%;
    }

    .dataframe td {
        padding-top: 0;
    }

    .dataframe td {
        padding-bottom: 0;
    }
</style>
<small>shape: (333, 4)</small><table class="dataframe table table-sm table-striped small">

<thead>
<tr>
<th>
species
</th>
<th>
sex
</th>
<th>
body_mass_g
</th>
<th>
body_mass_z
</th>
</tr>
<tr>
<td>
str
</td>
<td>
str
</td>
<td>
f64
</td>
<td>
f64
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4500.0
</td>
<td>
-1.181386
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5700.0
</td>
<td>
1.211549
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4450.0
</td>
<td>
-1.281092
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5700.0
</td>
<td>
1.211549
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5400.0
</td>
<td>
0.613315
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4550.0
</td>
<td>
-1.0816
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4800.0
</td>
<td>
-0.583152
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5200.0
</td>
<td>
0.214493
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4400.0
</td>
<td>
-1.380797
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5150.0
</td>
<td>
0.114787
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4650.0
</td>
<td>
-0.882269
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
5550.0
</td>
<td>
0.912432
</td>
</tr>
<tr>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3400.0
</td>
<td>
-0.667577
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3475.0
</td>
<td>
-0.504043
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3050.0
</td>
<td>
-1.430736
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3725.0
</td>
<td>
0.041
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3000.0
</td>
<td>
-1.539759
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3650.0
</td>
<td>
-0.122464
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4250.0
</td>
<td>
1.185808
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3475.0
</td>
<td>
-0.504043
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3450.0
</td>
<td>
-0.558555
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3750.0
</td>
<td>
0.095582
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3700.0
</td>
<td>
-0.013441
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4000.0
</td>
<td>
0.640695
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>And finally, we can use the <code>.arrange()</code> verb to sort observations by the standardized body mass in ascending order.</p>
<div id="cell-42" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">(</span>
<span id="cb25-2">    tibble</span>
<span id="cb25-3">    .drop_null()</span>
<span id="cb25-4">    .select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>)</span>
<span id="cb25-5">    .mutate(</span>
<span id="cb25-6">        body_mass_z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tp.mean(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> tp.sd(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>),</span>
<span id="cb25-7">        by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span></span>
<span id="cb25-8">    )</span>
<span id="cb25-9">    .arrange(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_z"</span>)</span>
<span id="cb25-10">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

    .dataframe td {
        white-space: pre;
    }

    .dataframe td {
        line-height: 95%;
    }

    .dataframe td {
        padding-top: 0;
    }

    .dataframe td {
        padding-bottom: 0;
    }
</style>
<small>shape: (333, 4)</small><table class="dataframe table table-sm table-striped small">

<thead>
<tr>
<th>
species
</th>
<th>
sex
</th>
<th>
body_mass_g
</th>
<th>
body_mass_z
</th>
</tr>
<tr>
<td>
str
</td>
<td>
str
</td>
<td>
f64
</td>
<td>
f64
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
2700.0
</td>
<td>
-2.687988
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
3950.0
</td>
<td>
-2.278148
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
2900.0
</td>
<td>
-2.167609
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4150.0
</td>
<td>
-1.879326
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2850.0
</td>
<td>
-1.866827
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2850.0
</td>
<td>
-1.866827
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4200.0
</td>
<td>
-1.7796
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4200.0
</td>
<td>
-1.7796
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4200.0
</td>
<td>
-1.7796
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2900.0
</td>
<td>
-1.757804
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2900.0
</td>
<td>
-1.757804
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2900.0
</td>
<td>
-1.757804
</td>
</tr>
<tr>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
6050.0
</td>
<td>
1.909489
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4600.0
</td>
<td>
1.948967
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4600.0
</td>
<td>
1.948967
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4500.0
</td>
<td>
1.995425
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4650.0
</td>
<td>
2.0579
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4675.0
</td>
<td>
2.112501
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4550.0
</td>
<td>
2.1255
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4700.0
</td>
<td>
2.167013
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4725.0
</td>
<td>
2.221524
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4775.0
</td>
<td>
2.330547
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
6300.0
</td>
<td>
2.408017
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4800.0
</td>
<td>
2.775994
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>We can make it even clearer if we wrap the standardization operation within a function.</p>
<div id="cell-44" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> standardize(name):</span>
<span id="cb26-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (col(name) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tp.mean(name)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> tp.sd(name)</span>
<span id="cb26-3"></span>
<span id="cb26-4">(</span>
<span id="cb26-5">    tibble</span>
<span id="cb26-6">    .drop_null()</span>
<span id="cb26-7">    .select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>)</span>
<span id="cb26-8">    .mutate(</span>
<span id="cb26-9">        body_mass_z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>standardize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>),</span>
<span id="cb26-10">        by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span></span>
<span id="cb26-11">    )</span>
<span id="cb26-12">    .arrange(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_z"</span>)</span>
<span id="cb26-13">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

    .dataframe td {
        white-space: pre;
    }

    .dataframe td {
        line-height: 95%;
    }

    .dataframe td {
        padding-top: 0;
    }

    .dataframe td {
        padding-bottom: 0;
    }
</style>
<small>shape: (333, 4)</small><table class="dataframe table table-sm table-striped small">

<thead>
<tr>
<th>
species
</th>
<th>
sex
</th>
<th>
body_mass_g
</th>
<th>
body_mass_z
</th>
</tr>
<tr>
<td>
str
</td>
<td>
str
</td>
<td>
f64
</td>
<td>
f64
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
2700.0
</td>
<td>
-2.687988
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
3950.0
</td>
<td>
-2.278148
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
2900.0
</td>
<td>
-2.167609
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4150.0
</td>
<td>
-1.879326
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2850.0
</td>
<td>
-1.866827
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2850.0
</td>
<td>
-1.866827
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4200.0
</td>
<td>
-1.7796
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4200.0
</td>
<td>
-1.7796
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4200.0
</td>
<td>
-1.7796
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2900.0
</td>
<td>
-1.757804
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2900.0
</td>
<td>
-1.757804
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2900.0
</td>
<td>
-1.757804
</td>
</tr>
<tr>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
6050.0
</td>
<td>
1.909489
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4600.0
</td>
<td>
1.948967
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4600.0
</td>
<td>
1.948967
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4500.0
</td>
<td>
1.995425
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4650.0
</td>
<td>
2.0579
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4675.0
</td>
<td>
2.112501
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4550.0
</td>
<td>
2.1255
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4700.0
</td>
<td>
2.167013
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4725.0
</td>
<td>
2.221524
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4775.0
</td>
<td>
2.330547
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
6300.0
</td>
<td>
2.408017
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4800.0
</td>
<td>
2.775994
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>If we want to carry on the <code>.mutate()</code> operation grouped by more than one variable, we can simply pass the names in a list.</p>
</section>
<section id="comparison" class="level2">
<h2 class="anchored" data-anchor-id="comparison">Comparison</h2>
<p>Let’s see both approaches in action so we can better appreciate the differences.</p>
<section id="with-pandas" class="level3">
<h3 class="anchored" data-anchor-id="with-pandas">With <strong>pandas</strong></h3>
<div id="cell-47" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> palmerpenguins.load_penguins()</span>
<span id="cb27-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>]].dropna().reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb27-3">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_z"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb27-4">    (data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> data.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)) </span>
<span id="cb27-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> data.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>)</span>
<span id="cb27-6">)</span>
<span id="cb27-7">data.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_z"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">species</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">body_mass_g</th>
<th data-quarto-table-cell-role="th">body_mass_z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">303</td>
<td>Chinstrap</td>
<td>female</td>
<td>2700.0</td>
<td>-2.899080</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">185</td>
<td>Gentoo</td>
<td>female</td>
<td>3950.0</td>
<td>-2.591611</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">188</td>
<td>Gentoo</td>
<td>male</td>
<td>4750.0</td>
<td>-2.346530</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">287</td>
<td>Chinstrap</td>
<td>female</td>
<td>2900.0</td>
<td>-2.198147</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">113</td>
<td>Adelie</td>
<td>male</td>
<td>3325.0</td>
<td>-2.071711</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">108</td>
<td>Adelie</td>
<td>female</td>
<td>3900.0</td>
<td>1.971803</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">103</td>
<td>Adelie</td>
<td>male</td>
<td>4775.0</td>
<td>2.109234</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">273</td>
<td>Chinstrap</td>
<td>female</td>
<td>4150.0</td>
<td>2.182685</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">302</td>
<td>Chinstrap</td>
<td>male</td>
<td>4800.0</td>
<td>2.377631</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">163</td>
<td>Gentoo</td>
<td>male</td>
<td>6300.0</td>
<td>2.603039</td>
</tr>
</tbody>
</table>

<p>333 rows × 4 columns</p>
</div>
</div>
</div>
</section>
<section id="with-tidypolars" class="level3">
<h3 class="anchored" data-anchor-id="with-tidypolars">With <strong>tidypolars</strong></h3>
<div id="cell-49" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> standardize(name):</span>
<span id="cb28-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (col(name) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tp.mean(name)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> tp.sd(name)</span></code></pre></div>
</div>
<div id="cell-50" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">tibble <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tp.from_pandas(palmerpenguins.load_penguins())</span>
<span id="cb29-2">(</span>
<span id="cb29-3">    tibble</span>
<span id="cb29-4">    .drop_null()</span>
<span id="cb29-5">    .select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>)</span>
<span id="cb29-6">    .mutate(</span>
<span id="cb29-7">        body_mass_z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>standardize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_g"</span>),</span>
<span id="cb29-8">        by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex"</span>]</span>
<span id="cb29-9">    )</span>
<span id="cb29-10">    .arrange(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_mass_z"</span>)</span>
<span id="cb29-11">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }

    .dataframe td {
        white-space: pre;
    }

    .dataframe td {
        line-height: 95%;
    }

    .dataframe td {
        padding-top: 0;
    }

    .dataframe td {
        padding-bottom: 0;
    }
</style>
<small>shape: (333, 4)</small><table class="dataframe table table-sm table-striped small">

<thead>
<tr>
<th>
species
</th>
<th>
sex
</th>
<th>
body_mass_g
</th>
<th>
body_mass_z
</th>
</tr>
<tr>
<td>
str
</td>
<td>
str
</td>
<td>
f64
</td>
<td>
f64
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
2700.0
</td>
<td>
-2.899
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
3950.0
</td>
<td>
-2.591611
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
4750.0
</td>
<td>
-2.3465
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
2900.0
</td>
<td>
-2.198147
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3325.0
</td>
<td>
-2.071711
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2850.0
</td>
<td>
-1.926035
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
2850.0
</td>
<td>
-1.926035
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
3250.0
</td>
<td>
-1.902511
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
4150.0
</td>
<td>
-1.881329
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
4925.0
</td>
<td>
-1.787708
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
3425.0
</td>
<td>
-1.7833
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
3300.0
</td>
<td>
-1.764442
</td>
</tr>
<tr>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4650.0
</td>
<td>
1.748808
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
6050.0
</td>
<td>
1.804721
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4675.0
</td>
<td>
1.820893
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
5200.0
</td>
<td>
1.847652
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"female"
</td>
<td>
5200.0
</td>
<td>
1.847652
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4700.0
</td>
<td>
1.892979
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4725.0
</td>
<td>
1.965064
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"female"
</td>
<td>
3900.0
</td>
<td>
1.971803
</td>
</tr>
<tr>
<td>
"Adelie"
</td>
<td>
"male"
</td>
<td>
4775.0
</td>
<td>
2.109234
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"female"
</td>
<td>
4150.0
</td>
<td>
2.182685
</td>
</tr>
<tr>
<td>
"Chinstrap"
</td>
<td>
"male"
</td>
<td>
4800.0
</td>
<td>
2.377631
</td>
</tr>
<tr>
<td>
"Gentoo"
</td>
<td>
"male"
</td>
<td>
6300.0
</td>
<td>
2.603039
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>Pandas is great, so many people love it, and it will be the most used tool to work with tabular data in Python for a long time. In my case, it made me struggle a lot when I started to do data analysis in Python after working several years with R. Later, and fortunately, I began to understand how it worked and I became better at it.</p>
<p>However, I never felt as comfortable with pandas as I do with <code>dplyr</code> syntax. Maybe it’s my R background? I don’t know. I just know that one of the things I enjoy the most in R is how easy and clear is to compose data manipulation operations with <code>dplyr</code> and friends. And having that expressiveness in Python is fantastic.</p>


</section>
</section>
</section>

 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2022-06-26_tidypolars/</guid>
  <pubDate>Sun, 26 Jun 2022 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2022-06-26_tidypolars/imgs/tidypolars_logo.png" medium="image" type="image/png" height="166" width="144"/>
</item>
<item>
  <title>Hierarchical modeling with the LKJ prior in PyMC</title>
  <link>https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/</link>
  <description><![CDATA[ 




<section id="hierarchical-modeling-with-the-lkj-prior-in-pymc" class="level1">
<h1>Hierarchical modeling with the LKJ prior in PyMC</h1>
<p>Throughout this blogpost, I will be working with the famous <strong>sleepstudy</strong> dataset. I’m going to estimate a <strong>hierarchical linear regression</strong> with both <strong>varying intercepts</strong> and <strong>varying slopes</strong>. The goal is to understand <strong>how to place non-independent priors for the group-specific effects in PyMC</strong> as efficiently as possible.</p>
<p>The sleepstudy dataset is derived from the study described in Belenky et al.&nbsp;(2003) and popularized in the lme4 R package. This dataset contains the <strong>average reaction time</strong> per day (in milliseconds) on a series of tests for the most sleep-deprived group in a sleep deprivation study. The first two days of the study are considered as adaptation and training, the third day is a baseline, and sleep deprivation started after day 3. The subjects in this group were restricted to 3 hours of sleep per night.</p>
<p>With that said, let’s get into the code!</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> aesara.tensor <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> at</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pymc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span></code></pre></div>
</div>
<div id="cell-3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb2-2">az.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arviz-darkgrid"</span>)</span>
<span id="cb2-3">mpl.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.facecolor"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span></span></code></pre></div>
</div>
<p>Let’s get started by downloading and exploring sleepstudy dataset.</p>
<div id="cell-5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/lme4/sleepstudy.csv"</span></span>
<span id="cb3-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<p>The following is a description of the variables we have in the dataset.</p>
<ul>
<li><strong>Reaction:</strong> Average of the reaction time measurements on a given subject for a given day.</li>
<li><strong>Days:</strong> Number of days of sleep deprivation.</li>
<li><strong>Subject:</strong> The subject ID.</li>
</ul>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"There are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> observations."</span>)</span>
<span id="cb4-2">data.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>There are 180 observations.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Reaction</th>
<th data-quarto-table-cell-role="th">Days</th>
<th data-quarto-table-cell-role="th">Subject</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>249.5600</td>
<td>0</td>
<td>308</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2</td>
<td>258.7047</td>
<td>1</td>
<td>308</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>250.8006</td>
<td>2</td>
<td>308</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>321.4398</td>
<td>3</td>
<td>308</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>356.8519</td>
<td>4</td>
<td>308</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Days range from </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Days'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Days'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"There are J=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Subject'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> subjects."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Days range from 0 to 9.
There are J=18 subjects.</code></pre>
</div>
</div>
<p>Let’s explore the evolution of the reaction times through the days for every subject.</p>
<div id="cell-10" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_data(data, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>)):</span>
<span id="cb8-2">    fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>figsize, sharey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-3">    fig.subplots_adjust(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.075</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.975</span>, bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.075</span>, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.925</span>, wspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (subject, ax) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subject"</span>].unique(), axes.ravel())):</span>
<span id="cb8-6">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.index[data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subject"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> subject].tolist()</span>
<span id="cb8-7">        days <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.loc[idx, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Days"</span>].values</span>
<span id="cb8-8">        reaction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.loc[idx, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reaction"</span>].values</span>
<span id="cb8-9"></span>
<span id="cb8-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot observed data points</span></span>
<span id="cb8-11">        ax.scatter(days, reaction, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C0"</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb8-12"></span>
<span id="cb8-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a title</span></span>
<span id="cb8-14">        ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Subject: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>subject<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb8-15"></span>
<span id="cb8-16">    ax.xaxis.set_ticks([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>])</span>
<span id="cb8-17">    fig.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Days"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb8-18">    fig.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reaction time (ms)"</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)</span>
<span id="cb8-19"></span>
<span id="cb8-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fig, axes</span></code></pre></div>
</div>
<div id="cell-11" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">plot_data(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>For most of the subjects, there’s a clear positive association between Days and Reaction time. <strong>Reaction times increase as people accumulate more days of sleep deprivation</strong>. Participants differ in the initial reaction times as well as in the association between sleep deprivation and reaction time. Reaction times increase faster for some subjects and slower for others. Finally, the relationship between Days and Reaction time presents some deviations from linearity within the panels, but these are neither substantial nor systematic.</p>
<section id="the-model" class="level2">
<h2 class="anchored" data-anchor-id="the-model">The model</h2>
<p>The model we’re going to build today is a hierarchical linear regression, with a Gaussian likelihood. In the following description, I use the greek letter <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> to refer to common effects and the roman letter <img src="https://latex.codecogs.com/png.latex?u"> to refer to group-specific (or varying) effects.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_%7Bij%7D%20=%20%5Cbeta_0%20+%20u_%7B0j%7D%20+%20%5Cleft(%20%5Cbeta_1%20+%20u_%7B1j%7D%20%5Cright)%20%5Ccdot%20%7B%5Ctext%7BDays%7D%7D%20+%20%5Cepsilon_i%0A"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ay_%7Bij%7D%20&amp;=%20%5Ctext%7BReaction%20time%20for%20the%20subject%20%7D%20j%20%5Ctext%7B%20on%20day%20%7D%20i%20%5C%5C%0A%5Cbeta_0%20&amp;=%20%5Ctext%7BIntercept%20common%20to%20all%20subjects%7D%20%5C%5C%0A%5Cbeta_1%20&amp;=%20%5Ctext%7BDays%20slope%20common%20to%20all%20subjects%7D%20%5C%5C%0Au_%7B0j%7D%20&amp;=%20%5Ctext%7BIntercept%20deviation%20of%20the%20subject%20%7D%20j%20%5C%5C%0Au_%7B1j%7D%20&amp;=%20%5Ctext%7BDays%20slope%20deviation%20of%20the%20subject%20%7D%20j%20%5C%5C%0A%5Cepsilon_i%20&amp;=%20%5Ctext%7BResidual%20random%20error%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>we also have</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ai%20=%201,%20%5Ccdots,%2010%20%5C%5C%0Aj%20=%201,%20%5Ccdots,%2018%0A%5Cend%7Baligned%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?i"> indexes Days and <img src="https://latex.codecogs.com/png.latex?j"> indexes subjects.</p>
<p>From the mathematical description we notice both the intercept and the slope are made of two components. The intercept is made of a common or global intercept <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0"> and subject-specific deviations <img src="https://latex.codecogs.com/png.latex?u_%7B0j%7D">. The same logic applies for the slope with both <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1"> and <img src="https://latex.codecogs.com/png.latex?u_%7B1j%7D">.</p>
</section>
<section id="priors" class="level2">
<h2 class="anchored" data-anchor-id="priors">Priors</h2>
<section id="common-effects" class="level3">
<h3 class="anchored" data-anchor-id="common-effects">Common effects</h3>
<p>For the common effects, we Guassian independent priors.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0A%5Cbeta_0%20%5Csim%20%5Ctext%7BNormal%7D%5Cleft(%5Cbar%7By%7D,%20%5Csigma_%7B%5Cbeta_0%7D%5Cright)%20%5C%5C%0A%5Cbeta_1%20%5Csim%20%5Ctext%7BNormal%7D%5Cleft(0,%20%5Csigma_%7B%5Cbeta_1%7D%5Cright)%0A%5Cend%7Barray%7D%0A"></p>
<p><a href="https://github.com/bambinos/bambi">Bambi</a> centers the prior for the intercept at <img src="https://latex.codecogs.com/png.latex?%5Cbar%7By%7D">, so do we. For <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cbeta_0%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cbeta_1%7D"> I’m going to use 50 and 10 respectively. We’ll use these same priors for all the variants of the model above.</p>
</section>
<section id="residual-error" class="level3">
<h3 class="anchored" data-anchor-id="residual-error">Residual error</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cepsilon_i%20&amp;%5Csim%20%5Ctext%7BNormal%7D(0,%20%5Csigma)%20%5C%5C%0A%5Csigma%20&amp;%5Csim%20%5Ctext%7BHalfStudentT%7D(%5Cnu,%20%5Csigma_%5Cepsilon)%0A%5Cend%7Baligned%7D%0A"></p>
<p>Where <img src="https://latex.codecogs.com/png.latex?%5Cnu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma_%5Cepsilon">, both positive constants, represent the degrees of freedom and the scale parameter, respectively.</p>
</section>
<section id="group-specific-effects" class="level3">
<h3 class="anchored" data-anchor-id="group-specific-effects">Group-specific effects</h3>
<p>Throughout this post we’ll propose the following variants for the priors of the group-specific effects.</p>
<ul>
<li>Independent priors.</li>
<li>Correlated priors.
<ul>
<li>Using <code>LKJCholeskyCov</code>.</li>
<li>Using <code>LKJCorr</code>.</li>
<li>Usign <code>LKJCorr</code> with non-trivial standard deviation.</li>
</ul></li>
</ul>
<p>Each of them will be described in more detail in its own section.</p>
<p>Then we create <code>subjects</code> and <code>subjects_idx</code>. These represent the subject IDs and their indexes. These are used with the distribution of the group-specific coefficients. We also have the <code>coords</code> that we pass to the model and the mean of the prior for the intercept</p>
<div id="cell-19" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subjects and subjects index</span></span>
<span id="cb10-2">subjects, subjects_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.unique(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subject"</span>], return_inverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Coordinates to handle dimensions of PyMC distributions and use better labels</span></span>
<span id="cb10-5">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>: subjects}</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Response mean -- Used in the prior for the intercept</span></span>
<span id="cb10-8">y_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reaction"</span>].mean()</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Days variable</span></span>
<span id="cb10-11">days <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Days"</span>].values</span></code></pre></div>
</div>
</section>
</section>
<section id="model-1-independent-priors" class="level2">
<h2 class="anchored" data-anchor-id="model-1-independent-priors">Model 1: Independent priors</h2>
<section id="group-specific-effects-independent-priors" class="level3">
<h3 class="anchored" data-anchor-id="group-specific-effects-independent-priors">Group-specific effects: Independent priors</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Blr%7D%0Au_%7B0j%7D%20%5Csim%20%5Ctext%7BNormal%7D%20%5Cleft(0,%20%5Csigma_%7Bu_0%7D%5Cright)%20&amp;%20%5Ctext%7Bfor%20all%20%7D%20j:1,...,%2018%20%5C%5C%0Au_%7B1j%7D%20%5Csim%20%5Ctext%7BNormal%7D%20%5Cleft(0,%20%5Csigma_%7Bu_1%7D%5Cright)%20&amp;%20%5Ctext%7Bfor%20all%20%7D%20j:1,...,%2018%0A%5Cend%7Barray%7D%0A"></p>
<p>where the hyperpriors are</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0A%5Csigma_%7Bu_0%7D%20%5Csim%20%5Ctext%7BHalfNormal%7D%20%5Cleft(%5Ctau_0%5Cright)%20%5C%5C%0A%5Csigma_%7Bu_1%7D%20%5Csim%20%5Ctext%7BHalfNormal%7D%20%5Cleft(%5Ctau_1%5Cright)%0A%5Cend%7Barray%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Ctau_0"> and <img src="https://latex.codecogs.com/png.latex?%5Ctau_1"> represent the standard deviations of the hyperpriors. These are fixed positive constants. We set them to the same values than <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cbeta_0%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cbeta_1%7D"> respectively.</p>
<div id="cell-21" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_independent:</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Common effects</span></span>
<span id="cb11-3">    β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β0"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_mean, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb11-4">    β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β1"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb11-5">    </span>
<span id="cb11-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group-specific effects</span></span>
<span id="cb11-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Intercept</span></span>
<span id="cb11-8">    σ_u0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfNormal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u0"</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb11-9">    u0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u0"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>σ_u0, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)</span>
<span id="cb11-10">    </span>
<span id="cb11-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Slope</span></span>
<span id="cb11-12">    σ_u1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfNormal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u1"</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)   </span>
<span id="cb11-13">    u1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u1"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>σ_u1, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)</span>
<span id="cb11-14">   </span>
<span id="cb11-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct intercept and slope</span></span>
<span id="cb11-16">    intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intercept"</span>, β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u0[subjects_idx]) </span>
<span id="cb11-17">    slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>, (β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u1[subjects_idx]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> days) </span>
<span id="cb11-18">    </span>
<span id="cb11-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Conditional mean</span></span>
<span id="cb11-20">    μ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"μ"</span>, intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> slope)</span>
<span id="cb11-21">    </span>
<span id="cb11-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Residual standard deviation</span></span>
<span id="cb11-23">    σ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfStudentT(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ"</span>, nu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb11-24">    </span>
<span id="cb11-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Response</span></span>
<span id="cb11-26">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>μ, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>σ, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reaction"</span>])</span></code></pre></div>
</div>
<div id="cell-22" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">pm.model_to_graphviz(model_independent)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-11-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-23" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_independent:</span>
<span id="cb13-2">    idata_independent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(draws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, chains<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 2 jobs)
NUTS: [β0, β1, σ_u0, u0, σ_u1, u1, σ]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="8000" class="" max="8000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [8000/8000 00:31&lt;00:00 Sampling 4 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 33 seconds.</code></pre>
</div>
</div>
<div id="cell-24" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">az.plot_trace(</span>
<span id="cb16-2">    idata_independent, </span>
<span id="cb16-3">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u1"</span>],</span>
<span id="cb16-4">    combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb16-5">    chain_prop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ls"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>}</span>
<span id="cb16-6">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_predictions(data, idata, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>)):</span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data</span></span>
<span id="cb17-3">    fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_data(data, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>figsize)</span>
<span id="cb17-4">    </span>
<span id="cb17-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract predicted mean</span></span>
<span id="cb17-6">    reaction_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"μ"</span>]</span>
<span id="cb17-7"></span>
<span id="cb17-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> subject, ax <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(subjects, axes.ravel()):</span>
<span id="cb17-9">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subject"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> subject).values</span>
<span id="cb17-10">        days <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.loc[idx, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Days"</span>].values</span>
<span id="cb17-11"></span>
<span id="cb17-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot highest density interval / credibility interval</span></span>
<span id="cb17-13">        az.plot_hdi(days, reaction_mean[..., idx], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C0"</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb17-14"></span>
<span id="cb17-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot mean regression line</span></span>
<span id="cb17-16">        ax.plot(days, reaction_mean[..., idx].mean((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>)), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C0"</span>)</span>
<span id="cb17-17">    </span>
<span id="cb17-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fig ,axes</span></code></pre></div>
</div>
<div id="cell-26" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">plot_predictions(data, idata_independent)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="correlated-priors" class="level2">
<h2 class="anchored" data-anchor-id="correlated-priors">Correlated priors</h2>
<p>Instead of placing independent priors on <img src="https://latex.codecogs.com/png.latex?u_%7B0j%7D"> and <img src="https://latex.codecogs.com/png.latex?u_%7B1j%7D">, we place a multivariate normal prior on <img src="https://latex.codecogs.com/png.latex?%5Bu_%7B0j%7D,%20u_%7B1j%7D%5D%5ET">, which allows for correlated group-specific effects.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Blr%7D%0A%20%20%20%20%5Cleft%5B%0A%20%20%20%20%20%20%20%20%5Cbegin%7Barray%7D%7Bc%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20u_%7B0j%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20u_%7B0j%7D%0A%20%20%20%20%20%20%20%20%5Cend%7Barray%7D%0A%20%20%20%20%5Cright%5D%0A%20%20%20%20%5Csim%20%5Ctext%7BMvNormal%7D%0A%20%20%20%20%5Cleft(%0A%20%20%20%20%20%20%20%20%5Cleft%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Cbegin%7Barray%7D%7Bc%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Barray%7D%0A%20%20%20%20%20%20%20%20%5Cright%5D,%0A%20%20%20%20%20%20%20%20%5CSigma%20=%0A%20%20%20%20%20%20%20%20%5Cleft%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Cbegin%7Barray%7D%7Bcc%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Csigma_%7Bu_0%7D%5E2%20&amp;%20%5Ctext%7Bcov%7D(u_0,%20u_1)%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Ctext%7Bcov%7D(u_0,%20u_1)%20&amp;%20%5Csigma_%7Bu_1%7D%5E2%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Barray%7D%0A%20%20%20%20%20%20%20%20%5Cright%5D%0A%20%20%20%20%5Cright)%0A%20%20%20%20&amp;%0A%20%20%20%20%5Ctext%7Bfor%20all%20%7D%20j:1,...,%2018%0A%5Cend%7Barray%7D%0A"></p>
<p>and we use the same hyperpriors</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0A%5Csigma_%7Bu_0%7D%20%5Csim%20%5Ctext%7BHalfNormal%7D%20%5Cleft(%5Ctau_0%5Cright)%20%5C%5C%0A%5Csigma_%7Bu_1%7D%20%5Csim%20%5Ctext%7BHalfNormal%7D%20%5Cleft(%5Ctau_1%5Cright)%0A%5Cend%7Barray%7D%0A"></p>
<section id="prior-on-correlation-matrices" class="level3">
<h3 class="anchored" data-anchor-id="prior-on-correlation-matrices">Prior on correlation matrices</h3>
<p>In practice, we do not set a prior for the covariance matrix <img src="https://latex.codecogs.com/png.latex?%5CSigma">. Instead, we set a prior on the correlation matrix <img src="https://latex.codecogs.com/png.latex?%5COmega"> and use the following decomposition to recover the covariance matrix</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%20%20%20%20%5CSigma%20&amp;%20=%0A%20%20%20%20%5Cbegin%7Bpmatrix%7D%0A%20%20%20%20%20%20%20%20%5Csigma_%7Bu_0%7D%20&amp;%200%20%5C%5C%0A%20%20%20%20%20%20%20%200%20&amp;%20%5Csigma_%7Bu_1%7D%0A%20%20%20%20%5Cend%7Bpmatrix%7D%0A%20%20%20%20%5Cbegin%7Bpmatrix%7D%201%20&amp;%20%5Crho_%7Bu_0,%20u_1%7D%20%5C%5C%20%5Crho_%7Bu_0,%20u_1%7D%20&amp;%201%20%5Cend%7Bpmatrix%7D%0A%20%20%20%20%5Cbegin%7Bpmatrix%7D%0A%20%20%20%20%20%20%20%20%5Csigma_%7Bu_0%7D%20&amp;%200%20%5C%5C%0A%20%20%20%20%20%20%20%200%20&amp;%20%5Csigma_%7Bu_1%7D%0A%20%20%20%20%5Cend%7Bpmatrix%7D%20%5C%5C%0A%20%20%20%20%20%20&amp;%20=%20%5Ctext%7Bdiag%7D(%5Csigma_u)%20%5C%20%5COmega%20%5C%20%5Ctext%7Bdiag%7D(%5Csigma_u)%0A%5Cend%7Bsplit%7D%0A"></p>
<p>A very popular and flexible alternative is to place an LKJ prior on the correlation matrix.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5COmega%20%5Csim%20%5Ctext%7BLKJ%7D(%5Ceta),%20%5C%20%5C%20%20%5Ceta%20%3E%200%0A"></p>
<p>LKJ stands for the <a href="https://en.wikipedia.org/wiki/Lewandowski-Kurowicka-Joe_distribution">Lewandowski-Kurowicka-Joe distribution</a>. If <img src="https://latex.codecogs.com/png.latex?%5Ceta%20=%201"> (our default choice), the prior is jointly uniform over all correlation matrices of the same dimension as <img src="https://latex.codecogs.com/png.latex?%5COmega">. If <img src="https://latex.codecogs.com/png.latex?%5Ceta%20%3E%201">, then the mode of the distribution is the identity matrix. The larger the value of <img src="https://latex.codecogs.com/png.latex?%5Ceta"> the more sharply peaked the density is at the identity matrix</p>
</section>
<section id="cholesky-decomposition" class="level3">
<h3 class="anchored" data-anchor-id="cholesky-decomposition">Cholesky decomposition</h3>
<p>For efficiency and numerical stability, the correlation matrix <img src="https://latex.codecogs.com/png.latex?%5COmega"> can be parametrized by its (lower-triangular) Cholesky factor <img src="https://latex.codecogs.com/png.latex?L">, which can be seen as the square root of <img src="https://latex.codecogs.com/png.latex?%5COmega"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7BL%7D%5Cboldsymbol%7BL%5ET%7D%20=%20%5COmega%20=%20%5Cbegin%7Bpmatrix%7D%201%20&amp;%20%5Crho_%7Bu_0,%20u_1%7D%20%5C%5C%20%5Crho_%7Bu_0,%20u_1%7D%20&amp;%201%20%5Cend%7Bpmatrix%7D%0A"></p>
<p>If <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D_%7B%5Ctext%7Buncorr%7D%7D"> is a <img src="https://latex.codecogs.com/png.latex?2%5Ctimes%20n"> matrix where the rows are 2 samples from uncorrelated random variables, then</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%20%20%20%20%5Cboldsymbol%7BZ%7D_%7B%5Ctext%7Bcorr%7D%7D%20&amp;%20=%0A%20%20%20%20%5Cbegin%7Bpmatrix%7D%20%5Csigma_%7Bu_0%7D%20&amp;%200%20%5C%5C%200%20&amp;%20%5Csigma_%7Bu_1%7D%20%5Cend%7Bpmatrix%7D%0A%20%20%20%20%5Cboldsymbol%7BL%7D%0A%20%20%20%20%5Cboldsymbol%7BZ%7D_%7B%5Ctext%7Buncorr%7D%7D%20%5C%5C%0A%20%20%20%20&amp;%20=%20%5Ctext%7Bdiag%7D(%5Csigma_u)%20%5Cboldsymbol%7BL%7D%20%5Cboldsymbol%7BZ%7D_%7B%5Ctext%7Buncorr%7D%7D%20%20%20%20%20%0A%5Cend%7Bsplit%7D%0A"></p>
<p>Then <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D_%7B%5Ctext%7Bcorr%7D%7D">, of shape <img src="https://latex.codecogs.com/png.latex?(2,%20n)">, contains a sample of size <img src="https://latex.codecogs.com/png.latex?n"> of two correlated variables with the desired variances <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7Bu_0%7D%5E2">, <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7Bu_1%7D%5E2">, and correlation <img src="https://latex.codecogs.com/png.latex?%5Crho_%7Bu_0,%20u_1%7D">.</p>
</section>
</section>
<section id="model-2-correlated-priors-with-lkjcholeskycov" class="level2">
<h2 class="anchored" data-anchor-id="model-2-correlated-priors-with-lkjcholeskycov">Model 2: Correlated priors with <code>LKJCholeskyCov</code></h2>
<p>PyMC conveniently implements a distribution called <code>LKJCholeskyCov</code>. Here, <code>n</code> represents the dimension of the correlation matrix. <code>eta</code> is the parameter of the LKJ distribution. <code>sd_dist</code> is the prior distribution for the standard deviations of the group-specific effects. <code>compute_corr=True</code> means we want it to also return the correlation between the group-specific parameters and their standard deviations. <code>store_in_trace=False</code> means we don’t want to store the correlation and the standard deviations in the trace.</p>
<p>Before seeing the code, we note that <code>sd_dist</code> is not a random variable, but a stateless distribution (i.e.&nbsp;the result of <code>pm.Distribution.dist()</code>).</p>
<div id="cell-31" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">coords.update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"effect"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intercept"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>]})</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_lkj_cov:</span>
<span id="cb19-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Common effects</span></span>
<span id="cb19-5">    β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β0"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_mean, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb19-6">    β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β1"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb19-7">   </span>
<span id="cb19-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Group-specific effects</span></span>
<span id="cb19-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hyper prior for the standard deviations</span></span>
<span id="cb19-10">    u_σ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfNormal.dist(sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]), shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb19-11">    </span>
<span id="cb19-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Obtain Cholesky factor for the covariance</span></span>
<span id="cb19-13">    L, ρ_u, σ_u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.LKJCholeskyCov(</span>
<span id="cb19-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, eta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sd_dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>u_σ, compute_corr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, store_in_trace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb19-15">    )</span>
<span id="cb19-16">    </span>
<span id="cb19-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb19-18">    u_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u_raw"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"effect"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)) </span>
<span id="cb19-19">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span>, at.dot(L, u_raw).T, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"effect"</span>))</span>
<span id="cb19-20">   </span>
<span id="cb19-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Separate group-specific terms </span></span>
<span id="cb19-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Intercept</span></span>
<span id="cb19-23">    u0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u0"</span>, u[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)</span>
<span id="cb19-24">    σ_u0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u0"</span>, σ_u[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb19-25">    </span>
<span id="cb19-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Slope</span></span>
<span id="cb19-27">    u1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u1"</span>, u[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)</span>
<span id="cb19-28">    σ_u1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u1"</span>, σ_u[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb19-29"></span>
<span id="cb19-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correlation</span></span>
<span id="cb19-31">    ρ_u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ρ_u"</span>, ρ_u[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb19-32">    </span>
<span id="cb19-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct intercept and slope</span></span>
<span id="cb19-34">    intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intercept"</span>, β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u0[subjects_idx]) </span>
<span id="cb19-35">    slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>, (β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u1[subjects_idx]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> days) </span>
<span id="cb19-36">    </span>
<span id="cb19-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Conditional mean</span></span>
<span id="cb19-38">    μ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"μ"</span>, intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> slope)</span>
<span id="cb19-39">    </span>
<span id="cb19-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Residual standard deviation</span></span>
<span id="cb19-41">    σ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfStudentT(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ"</span>, nu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>)</span>
<span id="cb19-42">    </span>
<span id="cb19-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Response</span></span>
<span id="cb19-44">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>μ, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>σ, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reaction"</span>])</span></code></pre></div>
</div>
<div id="cell-32" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">pm.model_to_graphviz(model_lkj_cov)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-17-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-33" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_lkj_cov:</span>
<span id="cb21-2">    idata_lkj_cov <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(draws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, chains<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>, target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 2 jobs)
NUTS: [β0, β1, L, u_raw, σ]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="8000" class="" max="8000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [8000/8000 01:04&lt;00:00 Sampling 4 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 66 seconds.</code></pre>
</div>
</div>
<div id="cell-34" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">az.plot_trace(</span>
<span id="cb24-2">    idata_lkj_cov, </span>
<span id="cb24-3">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ρ_u"</span>],</span>
<span id="cb24-4">    combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb24-5">    chain_prop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ls"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>}</span>
<span id="cb24-6">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>From the traceplot of the correlation coefficient <code>ρ_u</code> it looks like the group-specific intercept and slope are not related since the distribution is centered around zero.</p>
<p>But there’s another question we haven’t answered yet: Are the initial reaction times associated with how much the sleep deprivation affects the evolution of reaction times? Let’s create a scatterplot to visualize the joint posterior of the subject-specific intercepts and slopes. This chart uses different colors for the individuals.</p>
<div id="cell-36" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">posterior_u0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata_lkj_cov.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u0"</span>].values</span>
<span id="cb25-2">posterior_u1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata_lkj_cov.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u1"</span>].values</span>
<span id="cb25-3"></span>
<span id="cb25-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb25-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> subject <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>):</span>
<span id="cb25-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not all the samples are drawn</span></span>
<span id="cb25-7">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_u0[::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, :, subject]</span>
<span id="cb25-8">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_u1[::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, :, subject]</span>
<span id="cb25-9">    ax.scatter(x, y, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb25-10">    </span>
<span id="cb25-11">ax.axhline(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb25-12">ax.axvline(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb25-13">ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subject-specific intercept"</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subject-specific slope"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>If we look at the bigger picture, i.e omitting the groups, we can conclude there’s no association between the intercept and slope. In other words, having lower or higher intial reaction times does not say anything about how much sleep deprivation affects the average reaction time on a given subject.</p>
<p>On the other hand, if we look at the joint posterior for a given individual, we can see a negative correlation between the intercept and the slope. This is telling that, conditional on a given subject, the intercept and slope posteriors are not independent. However, it doesn’t imply anything about the overall relationship between the intercept and the slope, which is what we need if we want to know whether the initial time is associated with how much sleep deprivation affects the reaction time.</p>
<p>Let’s check predictions</p>
<div id="cell-39" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">plot_predictions(data, idata_lkj_cov)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="model-3-correlated-priors-with-lkjcorr." class="level2">
<h2 class="anchored" data-anchor-id="model-3-correlated-priors-with-lkjcorr.">Model 3: Correlated priors with <code>LKJCorr</code>.</h2>
<p>One problem with <code>LKJCholeskyCov</code> is that its <code>sd_dist</code> argument must be a stateless distribution and thus <strong>we cannot use a customized distribution for the standard deviations of the group-specific effects</strong>.</p>
<p>If we want to use a random variable instead of a stateless distribution for the standard deviation of the group-specific effects, then we need to perform many steps manually. Let’s see how we can implement it!</p>
<div id="cell-41" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_lkj_corr:</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Common part</span></span>
<span id="cb27-3">    β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β0"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_mean, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb27-4">    β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β1"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb27-5">    </span>
<span id="cb27-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group-specific part   </span></span>
<span id="cb27-7">    σ_u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfNormal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u_σ"</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]), dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"effect"</span>)</span>
<span id="cb27-8">    </span>
<span id="cb27-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Triangular upper part of the correlation matrix</span></span>
<span id="cb27-10">    Ω_triu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.LKJCorr(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ω_triu"</span>, eta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb27-11"></span>
<span id="cb27-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct correlation matrix</span></span>
<span id="cb27-13">    Ω <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="cb27-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ω"</span>, </span>
<span id="cb27-15">        at.fill_diagonal(Ω_triu[np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.int64)], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-16">    )</span>
<span id="cb27-17">    </span>
<span id="cb27-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct diagonal matrix of standard deviation</span></span>
<span id="cb27-19">    σ_diagonal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_diagonal"</span>, at.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> σ_u)</span>
<span id="cb27-20">    </span>
<span id="cb27-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute covariance matrix</span></span>
<span id="cb27-22">    Σ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> at.nlinalg.matrix_dot(σ_diagonal, Ω, σ_diagonal)</span>
<span id="cb27-23">    </span>
<span id="cb27-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cholesky decomposition of covariance matrix</span></span>
<span id="cb27-25">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>, at.slinalg.cholesky(Σ))</span>
<span id="cb27-26">    </span>
<span id="cb27-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># And finally get group-specific coefficients</span></span>
<span id="cb27-28">    u_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u_raw"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"effect"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)) </span>
<span id="cb27-29">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span>, at.dot(L, u_raw).T, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"effect"</span>))</span>
<span id="cb27-30"></span>
<span id="cb27-31">    u0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u0"</span>, u[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)</span>
<span id="cb27-32">    σ_u0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u0"</span>, σ_u[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb27-33">    </span>
<span id="cb27-34">    u1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u1"</span>, u[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)</span>
<span id="cb27-35">    σ_u1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u1"</span>, σ_u[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb27-36">    </span>
<span id="cb27-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correlation</span></span>
<span id="cb27-38">    ρ_u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ρ_u"</span>, Ω[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb27-39">         </span>
<span id="cb27-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct intercept and slope</span></span>
<span id="cb27-41">    intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intercept"</span>, β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u0[subjects_idx]) </span>
<span id="cb27-42">    slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>, (β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u1[subjects_idx]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> days) </span>
<span id="cb27-43">    </span>
<span id="cb27-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Conditional mean</span></span>
<span id="cb27-45">    μ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"μ"</span>, intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> slope)</span>
<span id="cb27-46">    </span>
<span id="cb27-47">    σ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfStudentT(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ"</span>, nu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb27-48">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>μ, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>σ, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reaction"</span>])</span></code></pre></div>
</div>
<div id="cell-42" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">pm.model_to_graphviz(model_lkj_corr)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-23-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-43" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_lkj_corr:</span>
<span id="cb29-2">    idata_lkj_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(draws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, chains<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>, target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [β0, β1, u_σ, Ω_triu, u_raw, σ]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 01:15&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 76 seconds.</code></pre>
</div>
</div>
<div id="cell-44" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">az.plot_trace(</span>
<span id="cb32-2">    idata_lkj_corr, </span>
<span id="cb32-3">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ρ_u"</span>],</span>
<span id="cb32-4">    combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb32-5">    chain_prop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ls"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>}</span>
<span id="cb32-6">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-25-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-45" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">plot_predictions(data, idata_lkj_corr)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="model-4-correlated-priors-with-lkjcorr.-replicate-rstanarm-prior" class="level2">
<h2 class="anchored" data-anchor-id="model-4-correlated-priors-with-lkjcorr.-replicate-rstanarm-prior">Model 4: Correlated priors with <code>LKJCorr</code>. Replicate rstanarm prior</h2>
<p>This model is like the previous one, but <code>σ_u</code> is the result of multiplying several random variables. Rstanarm prior is introduced <a href="http://mc-stan.org/rstanarm/articles/glmer.html">here</a></p>
<p><strong>NOTE:</strong> <code>σ_u</code> is what I would like to be able to pass to the <code>sd_dist</code> argument in <code>pm.LKJCholeskyCov</code>. Since I can only pass a stateless distribution, I need to perform all the steps manually.</p>
<blockquote class="blockquote">
<p>The vector of variances is set equal to the product of a simplex vector <img src="https://latex.codecogs.com/png.latex?%5Cpi"> — which is non-negative and sums to 1 — and the scalar trace: <img src="https://latex.codecogs.com/png.latex?J%5Ctau%5E2%5Cpi">.<br>
[…]<br>
For the simplex vector <img src="https://latex.codecogs.com/png.latex?%5Cpi"> we use a symmetric Dirichlet prior which has a single concentration parameter <img src="https://latex.codecogs.com/png.latex?%5Cgamma%20%3E%200">.</p>
</blockquote>
<p>On top of that, the <img src="https://latex.codecogs.com/png.latex?J%5Ctau%5E2%5Cpi"> is scaled by the residual standard deviation as explained in <a href="https://github.com/stan-dev/rstanarm/issues/531#issuecomment-861875451">this comment</a>.</p>
<div id="cell-48" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">J <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Order of covariance matrix</span></span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model(coords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coords) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_lkj_corr_2:</span>
<span id="cb34-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Common part</span></span>
<span id="cb34-5">    β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β0"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_mean, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb34-6">    β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β1"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb34-7">    </span>
<span id="cb34-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Residual SD </span></span>
<span id="cb34-9">    σ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfStudentT(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ"</span>, nu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb34-10">    </span>
<span id="cb34-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group-specific part</span></span>
<span id="cb34-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Begin of rstanarm approach ----------------------------------</span></span>
<span id="cb34-13">    τ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Gamma(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"τ"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb34-14">    Σ_trace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> J <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> τ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb34-15">    π <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Dirichlet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"π"</span>, a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.ones(J), dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"effect"</span>)</span>
<span id="cb34-16">    σ_u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b_σ"</span>, σ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> π <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (Σ_trace) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb34-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># End of rstanarm approach ------------------------------------</span></span>
<span id="cb34-18">    </span>
<span id="cb34-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Triangular upper part of the correlation matrix</span></span>
<span id="cb34-20">    Ω_triu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.LKJCorr(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ω_triu"</span>, eta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb34-21">     </span>
<span id="cb34-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correlation matrix</span></span>
<span id="cb34-23">    Ω <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(</span>
<span id="cb34-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ω"</span>, at.fill_diagonal(Ω_triu[np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.int64)], <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>)</span>
<span id="cb34-25">    )</span>
<span id="cb34-26"></span>
<span id="cb34-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct diagonal matrix of standard deviation</span></span>
<span id="cb34-28">    σ_u_diagonal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u_diagonal"</span>, at.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> σ_u)</span>
<span id="cb34-29">    </span>
<span id="cb34-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Covariance matrix</span></span>
<span id="cb34-31">    Σ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> at.nlinalg.matrix_dot(σ_u_diagonal, Ω, σ_u_diagonal)</span>
<span id="cb34-32">    </span>
<span id="cb34-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cholesky decomposition, lower triangular matrix.</span></span>
<span id="cb34-34">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>, at.slinalg.cholesky(Σ))</span>
<span id="cb34-35">    u_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u_raw"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"effect"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)) </span>
<span id="cb34-36">    </span>
<span id="cb34-37">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span>, at.dot(L, u_raw).T, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"effect"</span>))</span>
<span id="cb34-38">                         </span>
<span id="cb34-39">    u0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u0"</span>, u[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)</span>
<span id="cb34-40">    σ_u0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u0"</span>, σ_u[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb34-41">    </span>
<span id="cb34-42">    u1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u1"</span>, u[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subject"</span>)</span>
<span id="cb34-43">    σ_u1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u1"</span>, σ_u[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb34-44">    </span>
<span id="cb34-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correlation</span></span>
<span id="cb34-46">    ρ_u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ρ_u"</span>, Ω[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb34-47">         </span>
<span id="cb34-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct intercept and slope</span></span>
<span id="cb34-49">    intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intercept"</span>, β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u0[subjects_idx]) </span>
<span id="cb34-50">    slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slope"</span>, (β<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u1[subjects_idx]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> days) </span>
<span id="cb34-51">    </span>
<span id="cb34-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Conditional mean</span></span>
<span id="cb34-53">    μ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"μ"</span>, intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> slope)</span>
<span id="cb34-54">       </span>
<span id="cb34-55">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>μ, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>σ, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reaction"</span>])</span></code></pre></div>
</div>
<div id="cell-49" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">pm.model_to_graphviz(model_lkj_corr_2)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-28-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-50" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> model_lkj_corr_2:</span>
<span id="cb36-2">    idata_lkj_corr_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(draws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, chains<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>, target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 2 jobs)
NUTS: [β0, β1, σ, τ, π, Ω_triu, u_raw]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="8000" class="" max="8000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [8000/8000 03:00&lt;00:00 Sampling 4 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 181 seconds.</code></pre>
</div>
</div>
<div id="cell-51" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">az.plot_trace(</span>
<span id="cb39-2">    idata_lkj_corr_2,</span>
<span id="cb39-3">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ρ_u"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"τ"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"π"</span>],</span>
<span id="cb39-4">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-52" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">plot_predictions(data, idata_lkj_corr_2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-31-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="compare-inferences" class="level2">
<h2 class="anchored" data-anchor-id="compare-inferences">Compare inferences</h2>
<div id="cell-54" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb41-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ"</span>],</span>
<span id="cb41-3">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u0"</span>],</span>
<span id="cb41-4">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"σ_u1"</span>],</span>
<span id="cb41-5">]</span>
<span id="cb41-6"></span>
<span id="cb41-7">model_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Indepentent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LKJCholeskyCov"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LKJCorr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LKJCorr + rstanarm"</span>]</span>
<span id="cb41-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb41-9"></span>
<span id="cb41-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, group <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(groups):</span>
<span id="cb41-11">    az.plot_forest(</span>
<span id="cb41-12">        [idata_independent, idata_lkj_cov, idata_lkj_corr, idata_lkj_corr_2],</span>
<span id="cb41-13">        model_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_names,</span>
<span id="cb41-14">        var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>group,</span>
<span id="cb41-15">        combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb41-16">        ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[idx],</span>
<span id="cb41-17">    )</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-55" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">az.plot_forest(</span>
<span id="cb42-2">    [idata_lkj_cov, idata_lkj_corr, idata_lkj_corr_2],</span>
<span id="cb42-3">    model_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_names[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:],</span>
<span id="cb42-4">    var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ρ_u"</span>],</span>
<span id="cb42-5">    combined<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb42-6">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/index_files/figure-html/cell-33-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<section id="conclusions-1" class="level3">
<h3 class="anchored" data-anchor-id="conclusions-1">Conclusions</h3>
<ul>
<li>We showed how to use correlated priors for group-specific coefficients.</li>
<li>The posteriors resulted to be the same for the in all the cases.</li>
<li>The correlated priors didn’t imply any benefit to our sampling process. However, this could be beneficial for more complex hierarchical models.</li>
<li>What’s more, the model with the correlated priors took more time to sample than the one with independent priors.</li>
<li>Attempting to replicate rstanarm approach takes even longer because we are forced to compute many things manually.</li>
</ul>
</section>
<section id="notes-and-suggestions" class="level3">
<h3 class="anchored" data-anchor-id="notes-and-suggestions">Notes and suggestions</h3>
<ul>
<li>Sometimes, the models with correlated priors based on <code>pm.LKJCorr</code> resulted in divergences. We needed to increase <code>target_accept</code>.</li>
<li>It would be good to be able to pass a random variable to <code>sd_dist</code> in <code>pm.LKJCholeskyCov</code>, and not just a stateless distribution. This forced me to use <code>pm.LKJCorr</code> and perform many manipulations manually, which was more error-prone and inefficient.</li>
<li>It would be good to check if there’s something in the LKJCorr/LKJCholeskyCov that could be improved. I plan to use <code>LKJCholeskyCov</code> within <a href="https://github.com/bambinos/bambi">Bambi</a> in the future and I would like it to work as better as possible.</li>
</ul>
<div id="cell-57" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext watermark</span>
<span id="cb43-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>watermark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>w</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Last updated: Sun Jun 12 2022

Python implementation: CPython
Python version       : 3.10.4
IPython version      : 8.3.0

numpy     : 1.21.6
pandas    : 1.4.2
matplotlib: 3.5.2
arviz     : 0.12.1
aesara    : 2.6.6
pymc      : 4.0.0
sys       : 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:39:04) [GCC 10.3.0]

Watermark: 2.3.1
</code></pre>
</div>
</div>


</section>
</section>
</section>

 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/</guid>
  <pubDate>Sun, 12 Jun 2022 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2022-06-12_lkj-prior/imgs/cover.png" medium="image" type="image/png" height="97" width="144"/>
</item>
<item>
  <title>GSOC 2021: Final evaluation</title>
  <link>https://tomicapretto.github.io/posts/2021-08-17_gsoc-2021-final-evaluation/</link>
  <description><![CDATA[ 




<p>In this short blogpost, I’m going to summarize my contributions to the Bambi library during this Google Summer of Code.</p>
<p>GSoC has been great. I’ve learnt so much during the past weeks. And I’m obviously eager to keep learning and doing stuff with <a href="https://bambinos.github.io/bambi">Bambi</a> in the future. The following is a summary of what we were able to achieve during these time of code:</p>
<ul>
<li>Implemented new default priors <a href="https://github.com/bambinos/bambi/pull/360">#360</a>, <a href="https://github.com/bambinos/bambi/pull/385">#385</a>.</li>
<li>Added new Student-T family <a href="https://github.com/bambinos/bambi/pull/367">#367</a>.</li>
<li>Added new Beta family <a href="https://github.com/bambinos/bambi/pull/368">#368</a>.</li>
<li>Implemented predictions <a href="https://github.com/bambinos/bambi/pull/372">#372</a>.</li>
<li>Improved internal model specification by splitting it into smaller and composable classes <a href="https://github.com/bambinos/bambi/pull/366">#366</a>.</li>
<li>Added the new Binomial family <a href="https://github.com/bambinos/bambi/pull/386">#386</a>. This also implied <a href="https://github.com/bambinos/formulae/pull/48">some changes</a> in its sibling project, <a href="https://bambinos.github.io/formulae">formulae</a>.</li>
</ul>
<p>This, with many other smaller changes or improvements that you can find <a href="https://github.com/bambinos/bambi/commits?author=tomicapretto">here</a> were included in <a href="https://pypi.org/project/bambi/0.6.0/">Bambi 0.6.0</a>.</p>
<p>On the other hand, the items on my original proposal that left to do are multinomial regression and ordered categorical terms. I’ve started to do some work on the formulae side, but these features require a more involved work in Bambi, and thus it is left for future contributions.</p>
<p>To conclude, I want to thank Google for having such an amazing program and everyone who contributed or helped me to contribute to Bambi. Specially, I want to recognize the the work of my mentors Ravin Kumar and Thomas Wiecki, and my director Osvaldo Martin for all the support, feedback, and work during this program.</p>
<center>
<p><img src="https://tomicapretto.github.io/posts/2021-08-17_gsoc-2021-final-evaluation/imgs/gsoc_the_end.png" class="img-fluid" width="400"></p>
</center>



 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-08-17_gsoc-2021-final-evaluation/</guid>
  <pubDate>Tue, 17 Aug 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-08-17_gsoc-2021-final-evaluation/imgs/gsoc_the_end.png" medium="image" type="image/png" height="130" width="144"/>
</item>
<item>
  <title>Binomial family in Bambi</title>
  <link>https://tomicapretto.github.io/posts/2021-08-03_binomial-family-in-Bambi/</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Although GSoC 2021 is close to come to an end, there’s still a lot of exciting things going on around <a href="https://bambinos.github.io/bambi">Bambi</a>. Today I’m going to talk about another new family that’s about to be merged into the main branch, the Binomial family.</p>
<p>Let’s get started by trying to see why we need to have another new family for modeling binary data in Bambi.</p>
</section>
<section id="aggregated-vs-disaggregated-data" class="level2">
<h2 class="anchored" data-anchor-id="aggregated-vs-disaggregated-data">Aggregated vs disaggregated data</h2>
<p>Bambi already has the Bernoulli family to model binary data. This family fits very well when you have a data set where each row represents a single observation and there’s a column that represents the binary outcome ( i.e the result of the Bernoulli trial) as well as other columns with the predictor variables.</p>
<p>Let’s say we want to study the lethality of a certain drug and we have a group of mice to experiment with. An approach could be to divide the mice into smaller groups, assign a certain dose to all the mice in each group, and then finally count the number of units that died after a fixed amount of time. Under the Bernoulli family paradigm, each row has to represent a single observation, looking like this:</p>
<center>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: right;">Obs</th>
<th style="text-align: right;">Dose</th>
<th style="text-align: right;">Died</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1.3</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1.8</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">2.2</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>
</center>
<p>where each row represents a single mouse (i.e.&nbsp;a single Bernoulli trial). The <strong>0</strong> is used to represent a <strong>failure/survival</strong>, and <strong>1</strong> is used to represent a <strong>successes/death</strong>.</p>
<p>What if our data is aggregated? The nature of the experiment makes it natural to have rows representing groups, a column representing the number of deaths, and another column representing the number of mice in the group.</p>
<center>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: right;">Group</th>
<th style="text-align: right;">Dose</th>
<th style="text-align: right;">Dead</th>
<th style="text-align: right;">Total</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1.3</td>
<td style="text-align: right;">12</td>
<td style="text-align: right;">20</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1.8</td>
<td style="text-align: right;">18</td>
<td style="text-align: right;">25</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">2.2</td>
<td style="text-align: right;">24</td>
<td style="text-align: right;">34</td>
</tr>
</tbody>
</table>
</center>
<p>where each row represents a group of mice. Dose is the dose applied to all the units in the group, Dead is the number of mice that died, and Total is the number of mice in the group. If we focus on the <strong>Dead</strong> and <strong>Total</strong> columns we can easily see they resemble data coming from a <strong>Binomial distribution</strong> (i.e.&nbsp;number of successes out of a series of <img src="https://latex.codecogs.com/png.latex?n"> independent Bernoulli trials). In other words, for a given row, we can think there’s a Binomial distribution where <strong>Dead</strong> represents the number of successes out of <strong>Total</strong> number of trials (each mouse is a trial).</p>
<p>Before continuing, it’s important to note that if the data is originally aggregated as in the lower table, it can always be disaggregated to resemble the one in the upper table. So what’s the problem?</p>
<p>The answer is that there’s actually nothing wrong with having the data in such a granular form! But, if the data already comes aggregated, why doing extra work when we now have the Binomial family? Let’s have a look at the examples below!</p>
<div id="cell-6" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> bambi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bmb</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</div>
<div id="cell-7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">az.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arviz-darkgrid"</span>)</span>
<span id="cb2-2">BLUE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#003f5c"</span></span>
<span id="cb2-3">PURPLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7a5195"</span></span>
<span id="cb2-4">PINK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ef5675"</span></span></code></pre></div>
</div>
<p>We’re going to use real data in this example<sup>1</sup>. This data consists of the numbers of beetles dead after five hours of exposure to gaseous carbon disulphide at various concentrations:</p>
<center>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Dose, <img src="https://latex.codecogs.com/png.latex?x_i"> <br>(<img src="https://latex.codecogs.com/png.latex?%5Clog_%7B10%7D%5Ctext%7BCS%7D_2%5Ctext%7Bmgl%7D%5E%7B-1%7D">)</th>
<th>Number of beetles, <img src="https://latex.codecogs.com/png.latex?n_i"></th>
<th>Number killed, <img src="https://latex.codecogs.com/png.latex?y_i"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1.6907</td>
<td>59</td>
<td>6</td>
</tr>
<tr class="even">
<td>1.7242</td>
<td>60</td>
<td>13</td>
</tr>
<tr class="odd">
<td>1.7552</td>
<td>62</td>
<td>18</td>
</tr>
<tr class="even">
<td>1.7842</td>
<td>56</td>
<td>28</td>
</tr>
<tr class="odd">
<td>1.8113</td>
<td>63</td>
<td>52</td>
</tr>
<tr class="even">
<td>1.8369</td>
<td>59</td>
<td>53</td>
</tr>
<tr class="odd">
<td>1.8610</td>
<td>62</td>
<td>61</td>
</tr>
<tr class="even">
<td>1.8839</td>
<td>60</td>
<td>60</td>
</tr>
</tbody>
</table>
</center>
<div id="cell-9" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6907</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7242</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7552</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7842</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8113</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8369</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8610</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8839</span>])</span>
<span id="cb3-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">62</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">62</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>])</span>
<span id="cb3-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">61</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>])</span>
<span id="cb3-4"></span>
<span id="cb3-5">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: x,</span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y,</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>: n</span>
<span id="cb3-9">})</span></code></pre></div>
</div>
<p>Quite simple, right? Can we use it as it is with the Bernoulli family? Let’s have a look below.</p>
</section>
<section id="bernoulli-family" class="level2">
<h2 class="anchored" data-anchor-id="bernoulli-family">Bernoulli family</h2>
<p>Nope, no surprises today. To use the Bernoulli family, we first need to transform the data into the dissagregated or long format. One approach is the following</p>
<div id="cell-12" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">data_bernoulli <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb4-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: np.concatenate([np.repeat(x, n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x, n)]),</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"killed"</span>: np.concatenate([np.repeat([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [y, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> y, n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(y, n)])</span>
<span id="cb4-4">})</span></code></pre></div>
</div>
<p>Do you realize how bothering it can be to do that if we have many more variables? Nevermind, let’s keep going.</p>
<p>Now let’s initialize a Bambi model and sample from the posterior:</p>
<div id="cell-14" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">model_brn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"killed ~ x"</span>, data_bernoulli, family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bernoulli"</span>)</span>
<span id="cb5-2">idata_brn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_brn.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Modeling the probability that killed==1
Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:03&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 4 seconds.</code></pre>
</div>
</div>
<p>and explore the marginal posteriors</p>
<div id="cell-16" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">az.summary(idata_brn, kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stats"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_3%</th>
<th data-quarto-table-cell-role="th">hdi_97%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Intercept</td>
<td>-61.021</td>
<td>5.250</td>
<td>-70.606</td>
<td>-51.311</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">x</td>
<td>34.443</td>
<td>2.954</td>
<td>28.933</td>
<td>39.745</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We can predict the the probability of dying for out-of-sample data to see how it evolves with the different concentration levels.</p>
<div id="cell-18" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">new_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)})</span>
<span id="cb9-2">model_brn.predict(idata_brn, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_data)</span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot HDI for the mean of the probability of dying</span></span>
<span id="cb10-4">az.plot_hdi(</span>
<span id="cb10-5">  new_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>], </span>
<span id="cb10-6">  idata_brn.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"killed_mean"</span>].values, </span>
<span id="cb10-7">  color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BLUE,</span>
<span id="cb10-8">  ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax</span>
<span id="cb10-9">)</span>
<span id="cb10-10"></span>
<span id="cb10-11">ax.plot(</span>
<span id="cb10-12">  new_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>], </span>
<span id="cb10-13">  idata_brn.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"killed_mean"</span>].values.mean((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)), </span>
<span id="cb10-14">  color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BLUE</span>
<span id="cb10-15">)</span>
<span id="cb10-16"></span>
<span id="cb10-17">ax.scatter(x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PURPLE, edgecolors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb10-18">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability of death"</span>)</span>
<span id="cb10-19">ax.set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"Dose </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">log_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{10}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">CS_2mgl</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">{-1}</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-20">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"family='bernoulli'"</span>)</span>
<span id="cb10-21"></span>
<span id="cb10-22">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-08-03_binomial-family-in-Bambi/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="binomial-family" class="level2">
<h2 class="anchored" data-anchor-id="binomial-family">Binomial family</h2>
<p>Before writing down the model with the Binomial family, let’s take a moment to review new notation that was added specifically for this purpose.</p>
<p>The model formula syntax only allows us to pass one variable on its LHS. Then, how do we tell Bambi that what we want to model is the <strong>proportion</strong> that results from dividing <strong>y</strong> over <strong>n</strong>?</p>
<p>Thanks to recent developments, it’s as easy as writing <code>proportion(y, n)</code>, or any of its aliases <code>prop(y, n)</code> and <code>p(y, n)</code>. To keep it shorter, let’s use the last one.</p>
<div id="cell-21" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">model_bnml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p(y, n) ~ x"</span>, data, family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binomial"</span>)</span>
<span id="cb11-2">idata_bnml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_bnml.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:03&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 3 seconds.</code></pre>
</div>
</div>
<p>Quite simple, right? The code here is very similar to the one for the model with the Bernoulli family. However, the new Binomial family allows us to <strong>use the data in its original form</strong>.</p>
<p>Let’s finish this section by getting the marginal posteriors as well as a figure as the one displayed above.</p>
<div id="cell-23" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">az.summary(idata_bnml, kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stats"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_3%</th>
<th data-quarto-table-cell-role="th">hdi_97%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Intercept</td>
<td>-61.045</td>
<td>4.969</td>
<td>-69.905</td>
<td>-51.495</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">x</td>
<td>34.452</td>
<td>2.793</td>
<td>29.185</td>
<td>39.552</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-24" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">model_bnml.predict(idata_bnml, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_data)</span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb16-2"></span>
<span id="cb16-3">az.plot_hdi(</span>
<span id="cb16-4">  new_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>],</span>
<span id="cb16-5">  idata_bnml.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p(y, n)_mean"</span>].values,</span>
<span id="cb16-6">  color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BLUE,</span>
<span id="cb16-7">  ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax</span>
<span id="cb16-8">)</span>
<span id="cb16-9"></span>
<span id="cb16-10">ax.plot(</span>
<span id="cb16-11">  new_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>], </span>
<span id="cb16-12">  idata_bnml.posterior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p(y, n)_mean"</span>].values.mean((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)), </span>
<span id="cb16-13">  color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BLUE</span>
<span id="cb16-14">)</span>
<span id="cb16-15"></span>
<span id="cb16-16">ax.scatter(x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PURPLE, edgecolors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-17">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability of death"</span>)</span>
<span id="cb16-18">ax.set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"Dose </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">log_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{10}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">CS_2mgl</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">{-1}</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-19">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"family='binomial'"</span>)</span>
<span id="cb16-20">fig.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>)</span>
<span id="cb16-21">fig.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imgs/plot.png"</span>)</span>
<span id="cb16-22">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-08-03_binomial-family-in-Bambi/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>This blog post introduced the new Binomial family. This new family saves us from having to manipulate aggregated data prior to modeling, making it more pleasant and simpler to specify and fit models for binary data in Bambi.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This data can be found in An Introduction to Generalized Linear Models by A. J. Dobson and A. G. Barnett, but the original source is (Bliss, 1935).↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-08-03_binomial-family-in-Bambi/</guid>
  <pubDate>Tue, 03 Aug 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-08-03_binomial-family-in-Bambi/imgs/plot.png" medium="image" type="image/png" height="101" width="144"/>
</item>
<item>
  <title>New families in Bambi</title>
  <link>https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’m very happy I could contribute with many exciting changes to <a href="https://bambinos.github.io/bambi">Bambi</a>. Some changes, such as the reorganization of the default priors and built-in families, are not visible to the user but make the codebase more modular and easier to read. Other changes, such as the ones I’m going to describe here, have a direct impact on what you can do with Bambi.</p>
<p>Today I’ll describe two new built-in families that have been added to Bambi. The first one, already described in my previous post, is the <code>"t"</code> family. This can be used to make linear regressions more robust to outliers. The second one the <code>"beta"</code> family which can be used to model ratings and proportions.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> bambi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bmb</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</div>
</section>
<section id="robust-linear-regression-with-the-t-family." class="level2">
<h2 class="anchored" data-anchor-id="robust-linear-regression-with-the-t-family.">Robust linear regression with the <code>t</code> family.</h2>
<p>A Bayesian robust linear regression looks as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20%5Csim%20%5Ctext%7BStudentT%7D(%5Cmu_i,%20%5Clambda,%20%5Cnu)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu_i%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_%7B1,%20i%7D%20+%20%5Ccdots%20+%20%5Cbeta_p%20x_%7Bp,%20i%7D">, <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is the precision parameter and <img src="https://latex.codecogs.com/png.latex?%5Cnu"> is the degrees of freedom.</p>
<p>This wouldn’t be a Bayesian model without priors. Bambi uses the following priors by default:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0A%5Cbeta_0%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%7B%5Cbeta_0%7D,%20%5Csigma_%7B%5Cbeta_0%7D)%20%5C%5C%0A%5Cbeta_j%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%7B%5Cbeta_j%7D,%20%5Csigma_%7B%5Cbeta_j%7D)%20%20%5C%5C%0A%5Clambda%20%5Csim%20%5Ctext%7BHalfCauchy(1)%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>where the <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B%5Cbeta_j%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cbeta_j%7D"> are estimated from the data. By default, <img src="https://latex.codecogs.com/png.latex?%5Cnu=2">, but it is also possible to assign it a probability distribution (as we’re going to see below).</p>
<p>Before seeing how this new family works, let’s simulate some data. On this opportunity, we’re using the same dataset than in the <a href="https://tcapretto.netlify.app/post/2021-07-05-robust-linear-regression-with-bambi/">previous post</a>. This is a toy dataset with one predictor <code>x</code>, one response <code>y</code>, and some outliers contaminating the beautiful linear relationship between the variables.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-2">true_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-3">true_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size)</span>
<span id="cb2-6">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> true_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>size)</span>
<span id="cb2-7"></span>
<span id="cb2-8">x_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(x, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>])</span>
<span id="cb2-9">y_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(y, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>])</span>
<span id="cb2-10"></span>
<span id="cb2-11">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_out, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_out))</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb3-2"></span>
<span id="cb3-3">ax.scatter(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>], data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="model-specification-and-fit" class="level3">
<h3 class="anchored" data-anchor-id="model-specification-and-fit">Model specification and fit</h3>
<p>Using this new family is extremely easy. It is almost as simple as running a default normal linear regression. The only difference is that we need to add the <code>family="t"</code> argument to the <code>Model()</code> instantiation.</p>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ x"</span>, data, family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)</span>
<span id="cb4-2">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>Formula: y ~ x
Family name: T
Link: identity
Observations: 103
Priors:
  Common-level effects
    Intercept ~ Normal(mu: 2.1234, sigma: 5.9491)
    x ~ Normal(mu: 0.0, sigma: 10.4201)

  Auxiliary parameters
    sigma ~ HalfStudentT(nu: 4, sigma: 1.2227)
    nu ~ Gamma(alpha: 2, beta: 0.1)</code></pre>
</div>
</div>
<p>The output above shows information about the family being used and the parameters for the default priors. Next, we just do <code>model.fit()</code> to run the sampler.</p>
<div id="cell-9" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [y_nu, y_sigma, x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:02&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 3 seconds.</code></pre>
</div>
</div>
</section>
<section id="use-custom-priors" class="level3">
<h3 class="anchored" data-anchor-id="use-custom-priors">Use custom priors</h3>
<p>Let’s say we are not happy with having a fixed value for the degrees of freedom and we want to assign it a prior distribution. Is that a problem? Of course not!</p>
<div id="cell-11" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use a Gamma prior for the degrees of freedom</span></span>
<span id="cb9-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ x"</span>, data, family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)</span>
<span id="cb9-3">model.set_priors({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nu"</span>: bmb.Prior(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)})</span>
<span id="cb9-4">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Formula: y ~ x
Family name: T
Link: identity
Observations: 103
Priors:
  Common-level effects
    Intercept ~ Normal(mu: 2.1234, sigma: 5.9491)
    x ~ Normal(mu: 0.0, sigma: 10.4201)

  Auxiliary parameters
    sigma ~ HalfStudentT(nu: 4, sigma: 1.2227)
    nu ~ Gamma(alpha: 3, beta: 1)</code></pre>
</div>
</div>
<p>And hit the inference button</p>
<div id="cell-13" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [y_nu, y_sigma, x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:04&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 5 seconds.</code></pre>
</div>
</div>
</section>
<section id="explore-results" class="level3">
<h3 class="anchored" data-anchor-id="explore-results">Explore results</h3>
<p>First of all we can see the marginal posteriors for the parameters in the model and their respective traces</p>
<div id="cell-15" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">az.plot_trace(idata)</span>
<span id="cb14-2">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And it is also good to explore the posterior distribution of regression lines</p>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare data</span></span>
<span id="cb15-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb15-3">posterior_stacked <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata.posterior.stack(samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>))</span>
<span id="cb15-4">intercepts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_stacked[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Intercept"</span>].values</span>
<span id="cb15-5">slopes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_stacked[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>].values</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create plot</span></span>
<span id="cb15-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data points</span></span>
<span id="cb15-11">ax.scatter(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>], data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb15-12"></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Posterior regression lines</span></span>
<span id="cb15-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a, b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(intercepts, slopes):</span>
<span id="cb15-15">    ax.plot(x, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.5"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-16"></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True regression line</span></span>
<span id="cb15-18">ax.plot(x, true_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> true_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>where the line in black is the true regression line.</p>
</section>
</section>
<section id="beta-regression-with-the-beta-family." class="level2">
<h2 class="anchored" data-anchor-id="beta-regression-with-the-beta-family.">Beta regression with the <code>beta</code> family.</h2>
<p>Beta regression is useful to model response variables that have values within the <img src="https://latex.codecogs.com/png.latex?(0,%201)"> interval. This type of regression is based on the assumption that the conditional distribution of the response variable follows a Beta distribution with its mean related to a set of regressors through a linear predictor with unknown coefficients and a link function.</p>
<p>The beta regression model is based on an alternative parameterization of the beta density in terms of the mean <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and a precision parameter <img src="https://latex.codecogs.com/png.latex?%5Ckappa">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Blr%7D%0A%5Cdisplaystyle%20f(y%20%7C%20%5Cmu,%20%5Ckappa)%20=%0A%20%20%5Cfrac%7B%5CGamma(%5Ckappa)%7D%7B%5CGamma(%5Cmu%5Ckappa)%5CGamma((1-%5Cmu)%5Ckappa)%7D%0A%20%20y%5E%7B%5Cmu%5Ckappa%20-1%7D%0A%20%20y%5E%7B(1%20-%20%5Cmu)%5Ckappa%20-1%7D,%20&amp;%200%20%3C%20y%20%3C%201%0A%5Cend%7Barray%7D%0A"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?0%20%3C%20%5Cmu%20%3C%201"> and <img src="https://latex.codecogs.com/png.latex?%5Ckappa%20%3E%200">.</p>
<p>If we use the same notation than for the robust linear regression, the beta regression model is defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20%5Csim%20%5Ctext%7BBeta%7D(g%5E%7B-1%7D(%5Cmu_i),%20%5Ckappa)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu_i%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_%7B1,i%7D%20+%20%5Ccdots%20+%20%5Cbeta_p%20x_%7Bp,i%7D">, <img src="https://latex.codecogs.com/png.latex?%5Ckappa"> is the precision parameter and <img src="https://latex.codecogs.com/png.latex?g"> is a twice differentiable, strictly increasing, link function.</p>
<p>Bambi uses again the following priors by default:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0A%5Cbeta_0%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%7B%5Cbeta_0%7D,%20%5Csigma_%7B%5Cbeta_0%7D)%20%5C%5C%0A%5Cbeta_j%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%7B%5Cbeta_j%7D,%20%5Csigma_%7B%5Cbeta_j%7D)%20%20%5C%5C%0A%5Ckappa%20%5Csim%20%5Ctext%7BHalfCauchy(1)%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>where the <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B%5Cbeta_j%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cbeta_j%7D"> are estimated from the data. By default, <img src="https://latex.codecogs.com/png.latex?g"> is the logit function. Other options available are the identity, the probit, and the cloglog link functions.</p>
<p>It’s possible to resume all of this in a very simplistic way by seeing that the beta regression as a very close relative of the GLM family. This model presents all the characteristics of GLMs, with the exception that the beta distribution doesn’t belong to the exponential family.</p>
<section id="model-specification-and-fit-1" class="level3">
<h3 class="anchored" data-anchor-id="model-specification-and-fit-1">Model specification and fit</h3>
<p>Here we are going to use the <code>GasolineYield</code> dataset from the <code>betareg</code> R package. This dataset is about the proportion of crude oil converted to gasoline. The response variable is the proportion of crude oil after distillation and fractionation. In this example, we use the temperature at which gasoline has vaporized in Fahrenheit degrees (<code>"temp"</code>) and a factor that indicates ten unique combinations of gravity, pressure and temperature (<code>"batch"</code>).</p>
<p>The following is just a re-ordering of the categories in the <code>"batch"</code> variable so it matches the original contrasts used in the <code>betareg</code> package.</p>
<div id="cell-21" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/gasoline.csv"</span>)</span>
<span id="cb16-2">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"batch"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Categorical(</span>
<span id="cb16-3">  data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"batch"</span>], </span>
<span id="cb16-4">  [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>], </span>
<span id="cb16-5">  ordered<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb16-6">)</span></code></pre></div>
</div>
<p>Next, we define the model. The only difference is that we indicate <code>family="beta"</code>. Bambi handles all the rest for us.</p>
<div id="cell-23" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note this model does not include an intercept</span></span>
<span id="cb17-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yield ~ 0 + temp + batch"</span>, data, family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>)</span>
<span id="cb17-3">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>Formula: yield ~ 0 + temp + batch
Family name: Beta
Link: logit
Observations: 32
Priors:
  Common-level effects
    temp ~ Normal(mu: 0.0, sigma: 0.0364)
    batch ~ Normal(mu: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.], sigma: [ 8.5769  7.5593  8.5769  8.5769  7.5593  8.5769  8.5769  7.5593  8.5769
 10.328 ])

  Auxiliary parameters
    kappa ~ HalfCauchy(beta: 1)</code></pre>
</div>
</div>
<p>And <code>model.fit()</code> is all we need to ask the sampler to start running.</p>
<div id="cell-25" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(draws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [yield_kappa, batch, temp]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="6000" class="" max="6000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [6000/6000 00:19&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 2_000 draw iterations (2_000 + 4_000 draws total) took 20 seconds.
The number of effective samples is smaller than 10% for some parameters.</code></pre>
</div>
</div>
</section>
<section id="explore-results-1" class="level3">
<h3 class="anchored" data-anchor-id="explore-results-1">Explore results</h3>
<p>Once we got the posterior, we explore it. This time we’re going to plot highest density intervals for the marginal posteriors corresponding to the parameters in the model.</p>
<div id="cell-27" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> az.summary(idata, kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stats"</span>)</span>
<span id="cb22-2">summary</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_3%</th>
<th data-quarto-table-cell-role="th">hdi_97%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">temp</td>
<td>0.011</td>
<td>0.001</td>
<td>0.010</td>
<td>0.012</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">batch[10]</td>
<td>-6.111</td>
<td>0.244</td>
<td>-6.586</td>
<td>-5.656</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">batch[1]</td>
<td>-4.388</td>
<td>0.201</td>
<td>-4.766</td>
<td>-4.010</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">batch[2]</td>
<td>-4.799</td>
<td>0.191</td>
<td>-5.167</td>
<td>-4.453</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">batch[3]</td>
<td>-4.551</td>
<td>0.185</td>
<td>-4.892</td>
<td>-4.207</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">batch[4]</td>
<td>-5.055</td>
<td>0.211</td>
<td>-5.442</td>
<td>-4.635</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">batch[5]</td>
<td>-4.980</td>
<td>0.213</td>
<td>-5.415</td>
<td>-4.591</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">batch[6]</td>
<td>-5.073</td>
<td>0.215</td>
<td>-5.468</td>
<td>-4.668</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">batch[7]</td>
<td>-5.571</td>
<td>0.212</td>
<td>-5.973</td>
<td>-5.170</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">batch[8]</td>
<td>-5.617</td>
<td>0.233</td>
<td>-6.030</td>
<td>-5.149</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">batch[9]</td>
<td>-5.729</td>
<td>0.250</td>
<td>-6.201</td>
<td>-5.264</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">yield_kappa</td>
<td>263.233</td>
<td>86.097</td>
<td>115.416</td>
<td>425.489</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-28" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb23-2">summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"panel"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1-Temperature"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2-Batch"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3-Precision"</span>]</span></code></pre></div>
</div>
<div id="cell-29" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.33</span>), sharey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb24-2">fig.subplots_adjust(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.975</span>, wspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.925</span>)</span>
<span id="cb24-3">fig.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (ax, panel) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axes, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1-Temperature"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2-Batch"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3-Precision"</span>])):</span>
<span id="cb24-6">    plt_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary[summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"panel"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> panel]</span>
<span id="cb24-7">    ax.scatter(plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>], plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb24-8">    ax.hlines(plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>], plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hdi_3%"</span>], plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hdi_97%"</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb24-9">    ax.set_title(panel)</span>
<span id="cb24-10">    ax.tick_params(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb24-11"></span>
<span id="cb24-12">ax.set_yticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(summary.index)))</span>
<span id="cb24-13">ax.set_yticklabels(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(summary.index))</span>
<span id="cb24-14"></span>
<span id="cb24-15">fig.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marginal posterior"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)</span>
<span id="cb24-16">fig.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Parameter"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb24-17"></span>
<span id="cb24-18">fig.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imgs/plot.png"</span>, dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/</guid>
  <pubDate>Wed, 14 Jul 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/imgs/plot.png" medium="image" type="image/png" height="77" width="144"/>
</item>
<item>
  <title>Robust linear regression in Bambi</title>
  <link>https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/</link>
  <description><![CDATA[ 




<p>The next thing in my TODO list for this Google Summer of Code season with <a href="https://numfocus.org/">NumFOCUS</a> is to add new families of models to <a href="https://bambinos.github.io/bambi">Bambi</a>. This is still a WIP but I wanted to show you how to build a robust linear regression model using the <code>Family</code> class in Bambi.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> bambi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bmb</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.patches <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Rectangle, FancyArrowPatch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span></code></pre></div>
</div>
<section id="what-do-we-mean-with-robust" class="level2">
<h2 class="anchored" data-anchor-id="what-do-we-mean-with-robust">What do we mean with robust?</h2>
<p>Before showing how to build a robust regression with Bambi we need to be clear about what we mean when we say that a model is robust. Robust to what? How is linear regression non-robust?</p>
<p>In this post, we say a method is robust if its inferences aren’t (seriously) affected by the presence of outliers.</p>
</section>
<section id="how-do-outliers-affect-linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="how-do-outliers-affect-linear-regression">How do outliers affect linear regression?</h2>
<p>I think it will be easier to understand how outliers affect linear regressions via an example based on the least squares method. This is not exactly how linear regression works in our Bayesian world, but outlier’s bad consequences are similar.</p>
<p>In classic statistics, linear regression models are usually fitted by ordinary least-squares method. This is equivalent to assuming the conditional distribution of the response given the predictors is normal (i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?y_i%7C%5Cboldsymbol%7BX%7D_i%20%5Csim%20N(%5Cmu_i,%20%5Csigma)">) and using the maximum likelihood estimator.</p>
<p>Let’s get started by simulating some toy data.</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>])</span>
<span id="cb2-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.45</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.8</span>])</span></code></pre></div>
</div>
<p>Then, fit a linear regression between and visualize the result.</p>
<p>The next plot shows the data, the fitted line, and the contribution of each data point to the total (squared) error as a blue square (one way to see the least squares method is as the method that minimizes the sum of the areas of the squares associated to all the points).</p>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">b, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.polyfit(x, y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-2">y_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb3-3">residual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span></code></pre></div>
</div>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">arrowstyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simple, tail_width=0.3, head_width=4, head_length=4"</span></span>
<span id="cb4-2">connectiontyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arc3, rad=0.4"</span></span>
<span id="cb4-3">arrowstyles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arrowstyle"</span>: arrowstyle, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"connectionstyle"</span>: connectiontyle}</span>
<span id="cb4-4"></span>
<span id="cb4-5">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb4-6">fig.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>)</span>
<span id="cb4-7">ax.set_xlim(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-8">ax.set_ylim(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-9"></span>
<span id="cb4-10">ax.scatter(x, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>)</span>
<span id="cb4-11">ax.plot(x, y_hat, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.2"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add rectangles</span></span>
<span id="cb4-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xy, r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x, y ), residual):</span>
<span id="cb4-15">    ax.add_patch(Rectangle(xy, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(r), r, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add arrows</span></span>
<span id="cb4-18">x_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> residual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb4-19">x_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>])</span>
<span id="cb4-20">y_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> residual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-21">y_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb4-22">y_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>])</span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xy0, xy1, r, yt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x_start, y_start), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x_end, y_end), residual, y_text):</span>
<span id="cb4-25">    ax.add_patch(FancyArrowPatch(xy0, xy1, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>arrowstyles))</span>
<span id="cb4-26">    ax.text(xy0[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], yt, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)), ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)</span>
<span id="cb4-27"></span>
<span id="cb4-28">ax.text(</span>
<span id="cb4-29">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.01</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sum of squares: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(residual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, </span>
<span id="cb4-30">    size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax.transAxes, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"baseline"</span></span>
<span id="cb4-31">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So far so good! It looks like the fitted line is a good representation of the relationship between the variables.</p>
<p>What happens if we introduce an outlier? In other words, what happens if there’s a new point that deviates too much from the pattern we’ve just seen above? Let’s see it!</p>
<div id="cell-10" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.insert(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.25</span>)</span>
<span id="cb5-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.insert(y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.8</span>)</span></code></pre></div>
</div>
<div id="cell-11" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">b, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.polyfit(x, y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-2">y_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb6-3">residual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span></code></pre></div>
</div>
<div id="cell-12" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb7-2">fig.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>)</span>
<span id="cb7-3">ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>)</span>
<span id="cb7-4">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>)</span>
<span id="cb7-5"></span>
<span id="cb7-6">ax.scatter(x, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>)</span>
<span id="cb7-7">ax.plot(x, y_hat, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.2"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add rectangles</span></span>
<span id="cb7-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xy, r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x, y ), residual):</span>
<span id="cb7-11">    ax.add_patch(Rectangle(xy, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(r), r, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add arrows</span></span>
<span id="cb7-14">x_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(residual) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb7-15">x_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>])</span>
<span id="cb7-16">y_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> residual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-17">y_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb7-18">y_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>])</span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xy0, xy1, r, yt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x_start, y_start), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x_end, y_end), residual, y_text):</span>
<span id="cb7-21">    ax.add_patch(FancyArrowPatch(xy0, xy1, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>arrowstyles))</span>
<span id="cb7-22">    ax.text(xy0[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], yt, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)), ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)</span>
<span id="cb7-23"></span>
<span id="cb7-24">ax.text(</span>
<span id="cb7-25">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.01</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sum of squares: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(residual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, </span>
<span id="cb7-26">    size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax.transAxes, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"baseline"</span></span>
<span id="cb7-27">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>What a bummer! Why do we have such a huge error? It’s 10 times the previous error with only one extra data point! Why?!</p>
<p>It happens that each point’s contribution to the error grows quadratically as it moves away from the rest. Outliers not only contribute <strong>a lot</strong> to the total error, they also bias the estimation towards themselves, increasing the error associated with other points too. The final result? the fitted line is not a faithful representation of the relationship between the variables.</p>
</section>
<section id="linear-regression-in-a-bayesian-way" class="level2">
<h2 class="anchored" data-anchor-id="linear-regression-in-a-bayesian-way">Linear regression in a Bayesian way</h2>
<p>Now that we’ve seen how bad outliers can be above, let’s see how one can robust a Bayesian linear regression. This part of the post is based on the <a href="https://docs.pymc.io/pymc-examples/examples/generalized_linear_models/GLM-robust.html">Robust Linear Regression</a> in PyMC3 docs.</p>
<p>Here, we simulate data suitable for a normal linear regression and contaminate it with a few outliers.</p>
<div id="cell-15" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb8-2">true_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-3">true_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size)</span>
<span id="cb8-6">true_regression_line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> true_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb8-7">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true_regression_line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>size)</span>
<span id="cb8-8"></span>
<span id="cb8-9">x_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(x, [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>])</span>
<span id="cb8-10">y_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(y, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>])</span>
<span id="cb8-11"></span>
<span id="cb8-12">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_out, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_out))</span></code></pre></div>
</div>
<div id="cell-16" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb9-2">fig.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">ax.scatter(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>], data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="normal-linear-regression" class="level3">
<h3 class="anchored" data-anchor-id="normal-linear-regression">Normal linear regression</h3>
<p>The normal linear regression is as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_i,%20%5Csigma)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu_i%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_i">, and the priors are of the form</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0A%5Cbeta_0%20%5Csim%20%5Ctext%7BNormal%7D%20%5C%5C%0A%5Cbeta_1%20%5Csim%20%5Ctext%7BNormal%7D%20%20%5C%5C%0A%5Csigma%20%5Csim%20%5Ctext%7BHalfStudentT%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>with their parameters automatically set by Bambi.</p>
<div id="cell-18" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ x"</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data)</span>
<span id="cb10-2">idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [y_sigma, x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:01&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 3 seconds.</code></pre>
</div>
</div>
<p>To evaluate the fit, we use the posterior predictive regression lines. The line in black is the true regression line.</p>
<div id="cell-20" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare data</span></span>
<span id="cb13-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb13-3">posterior_stacked <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata.posterior.stack(samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>))</span>
<span id="cb13-4">intercepts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_stacked[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Intercept"</span>].values</span>
<span id="cb13-5">slopes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_stacked[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>].values</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create plot</span></span>
<span id="cb13-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data points</span></span>
<span id="cb13-11">ax.scatter(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>], data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Posterior regression lines</span></span>
<span id="cb13-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a, b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(intercepts, slopes):</span>
<span id="cb13-15">    ax.plot(x, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.5"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-16"></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True regression line</span></span>
<span id="cb13-18">ax.plot(x, true_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> true_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As you can see, the posterior distribution fo the regression lines is not centered around the true regression line, which means the estimations are <strong>highly biased</strong>. This is the same phenomena we saw above with the least-squares toy example.</p>
<p>Why does it happen here? The reason is that the normal distribution does not have a lot of mass in the tails and consequently, an outlier will affect the fit strongly.</p>
<p>Since the problem is the light tails of the Normal distribution we can instead assume that our data is not normally distributed but instead distributed according to the Student T distribution which has heavier tails as shown next.</p>
</section>
<section id="normal-and-student-t-distributions" class="level3">
<h3 class="anchored" data-anchor-id="normal-and-student-t-distributions">Normal and Student-T distributions</h3>
<p>Here we plot the pdf of a standard normal distribution and the pdf of a student-t distribution with 3 degrees of freedom.</p>
<div id="cell-22" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb14-2">y_normal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm.pdf(x)</span>
<span id="cb14-3">y_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.t.pdf(x, df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<div id="cell-23" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb15-2">fig.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>)</span>
<span id="cb15-3">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.41</span>)</span>
<span id="cb15-4"></span>
<span id="cb15-5">ax.plot(x, y_normal, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb15-6">ax.plot(x, y_t, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb15-7"></span>
<span id="cb15-8">ax.add_patch(FancyArrowPatch((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.36</span>), (x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>], y_normal[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>]), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>arrowstyles, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb15-9">ax.add_patch(FancyArrowPatch((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.31</span>), (x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">205</span>], y_t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">205</span>]), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>arrowstyles, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb15-10"></span>
<span id="cb15-11">ax.text(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)</span>
<span id="cb15-12">ax.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.30</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student's T"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As you can see, the probability of values far away from the mean are much more likely under the Student-T distribution than under the Normal distribution.</p>
</section>
<section id="robust-linear-regression" class="level3">
<h3 class="anchored" data-anchor-id="robust-linear-regression">Robust linear regression</h3>
<p>The difference with the model above is that this one uses a StudentT likelihood instead of a Normal one.</p>
<p>Bambi does not support yet to use the student-t distribution as the likelihood function for linear regression. However, we can construct our own custom family and Bambi will understand how to work with it.</p>
<p>Custom families are represented by the <a href="https://bambinos.github.io/bambi/main/api_reference.html#bambi.families.Family">Family</a> class in Bambi. Let’s see what we need to create a custom family.</p>
<p>First of all, we need a name. In this case the name is going to be just <code>"t"</code>. Second, there is the <code>likelihood</code> function. This is represented by an object of class <code>Likelihood</code> in Bambi. To define a likelihood function we need the following:</p>
<ul>
<li>The name of the distribution in PyMC3. In this case, it is <code>"StudentT"</code>.</li>
<li>The name of the parent parameter (the mean). It is <code>"mu"</code>.</li>
<li>The prior distributions for the auxiliary parameters in the distribution. These are <code>nu</code> and <code>sigma</code> in the StudentT distribution.</li>
</ul>
<p>Finally, we pass the link function. This can be a string or an object of class <code>Link</code>. In this case it’s simply the identity function, which can be passed as a string.</p>
<div id="cell-26" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct likelihood</span></span>
<span id="cb16-2">nu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Prior(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamma"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-3">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Prior(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HalfStudentT"</span>, nu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-4">likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Likelihood(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"StudentT"</span>, parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, nu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nu)</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct family</span></span>
<span id="cb16-7">t_family <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Family(name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>, likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelihood, link <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identity"</span>)</span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In addition, we pass our custom priors for the terms in the model.</span></span>
<span id="cb16-10">priors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Intercept"</span>: bmb.Prior(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb16-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: bmb.Prior(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-13">}</span>
<span id="cb16-14"></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Just add the `prior` and `family` arguments</span></span>
<span id="cb16-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ x"</span>, data, priors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>priors, family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t_family)</span>
<span id="cb16-17">idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [y_nu, y_sigma, x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:02&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 2 seconds.</code></pre>
</div>
</div>
<div id="cell-27" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare data</span></span>
<span id="cb19-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb19-3">posterior_stacked <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idata.posterior.stack(samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>))</span>
<span id="cb19-4">intercepts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_stacked[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Intercept"</span>].values</span>
<span id="cb19-5">slopes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_stacked[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>].values</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create plot</span></span>
<span id="cb19-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data points</span></span>
<span id="cb19-11">ax.scatter(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>], data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, ec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb19-12"></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Posterior regression lines</span></span>
<span id="cb19-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a, b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(intercepts, slopes):</span>
<span id="cb19-15">    ax.plot(x, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.5"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True regression line</span></span>
<span id="cb19-18">ax.plot(x, true_intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> true_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Much better now! The posterior distribution of the regression lines is almost centered around the true regression line, and uncertainty has decreased, that’s great! The outliers are barely influencing our estimation because our likelihood function assumes that outliers are much more probable than under the Normal distribution.</p>


</section>
</section>

 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/</guid>
  <pubDate>Mon, 05 Jul 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/imgs/plot.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>First weeks of GSoC</title>
  <link>https://tomicapretto.github.io/posts/2021-06-28_first-weeks-of-gsoc/</link>
  <description><![CDATA[ 




<p>I am really happy to participate in this Google Summer of Code season with <a href="https://numfocus.org/">NumFOCUS</a> to contribute to the <a href="https://bambinos.github.io/bambi">Bambi</a> library. The coding period ranges from June 7 to August 16, with an intermediate evaluation taking place between July 12 and July 16.</p>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>My project is called <strong>Extend available models and default priors in Bambi</strong>. The main goal of this project is to add new families of generalized linear models, such as beta regression, robust linear regression (i.e.&nbsp;linear model with error following a T-Student distribution)<sup>1</sup> as well as multinomial regression. However, this raises a second problem, which is about default priors distributions.</p>
<p>Default priors in Bambi are limited to the families implemented in the <a href="https://www.statsmodels.org/stable/glm.html">GLM</a> module in<a href="https://www.statsmodels.org/">statsmodels</a>, which does not include the families mentioned above. For this reason, it is first necessary to incorporate alternative automatic priors so new families work without requiring the user to manually specify priors.</p>
<p>Therefore, these first weeks of the coding period were centered around understanding how default priors work on other high-level modeling packages such as <a href="https://paul-buerkner.github.io/brms/">brms</a> and <a href="https://mc-stan.org/rstanarm/">rstanarm</a>, how to translate their ideas into <a href="https://docs.pymc.io/">PyMC3</a> code, and finally how to implement everything within Bambi.</p>
</section>
<section id="alternative-default-priors" class="level2">
<h2 class="anchored" data-anchor-id="alternative-default-priors">Alternative default priors</h2>
<p>Currently, Bambi uses maximum likelihood estimates in the construction of its default priors. There are two limitations associated with this approach. First, current default priors don’t exist whenever uniquely identifiable maximum likelihood estimates don’t exist (e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?p%20%3E%20n"> or complete separation scenarios). Secondly, these estimates are obtained via the GLM module in statsmodels, which means default priors can only be obtained for families made available in statsmodels.</p>
<p>Based on the available documentation and simulations I’ve done, I decided to implement alternative default priors that are much like the <a href="https://mc-stan.org/rstanarm/articles/priors.html">default priors in rstanarm</a>. These priors aim to be weakly-informative in most scenarios and do not depend on maximum likelihood estimates. Their documentation is excellent and it was a great guide for my implementation.</p>
<p><a href="https://github.com/bambinos/bambi/pull/360">This</a> is the PR where I implement alternative default priors inspired on rstanarm default priors. In addition, I also implement LKJ prior for the correlation matrices of group-specific effects.</p>
<section id="how-to-invoke-alternative-default-priors" class="level3">
<h3 class="anchored" data-anchor-id="how-to-invoke-alternative-default-priors">How to invoke alternative default priors</h3>
<p>The <code>Model()</code> class has gained one new argument, <code>automatic_priors</code>, that can be equal to <code>"default"</code> to use Bambi’s default method, or <code>"rstanarm"</code> to use the alternative implementation<sup>2</sup>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ x + z"</span>, data, automatic_priors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rstanarm"</span>)</span></code></pre></div>
</section>
<section id="how-to-use-lkj-priors-for-correlation-matrices-of-group-specific-effects" class="level3">
<h3 class="anchored" data-anchor-id="how-to-use-lkj-priors-for-correlation-matrices-of-group-specific-effects">How to use LKJ priors for correlation matrices of group-specific effects</h3>
<p>Group-specific effects can now have non-independent priors. Instead of using independent normal distributions, we can use a multivariate normal distribution whose correlation matrix has an LKJ prior distribution. This distribution depends on a parameter <img src="https://latex.codecogs.com/png.latex?%5Ceta%20%3E%200">. If <img src="https://latex.codecogs.com/png.latex?%5Ceta=1">, the LJK prior is jointly uniform over all correlation matrices of the same dimension. If <img src="https://latex.codecogs.com/png.latex?%5Ceta%20%3E1"> increases, the mode of the distribution is the identity matrix. The larger the value of <img src="https://latex.codecogs.com/png.latex?%5Ceta"> the more sharply peaked the density is at the identity matrix.</p>
<p><code>Model</code> has an argument <code>priors_cor</code> where we can pass a dictionary to indicate which groups are going to have a LKJ prior. The keys of the dictionary are the names of the groups, and the values are the values for <img src="https://latex.codecogs.com/png.latex?%5Ceta">.</p>
<p>In the following model, we have a varying intercept and varying slope for the groups given by <code>group</code>. These varying effects have a multivariate normal prior whose covariance matrix depends on a correlation matrix that has a LKJ hyperprior with <img src="https://latex.codecogs.com/png.latex?%5Ceta=1">.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ x + (x|group)"</span>, data, priors_cor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>})</span></code></pre></div>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>These two distributions are not members of the exponential family so using them as the distribution of the random component does not result in a generalized linear model in a strict sense. But I would usually refer to them as GLMs since the linear predictor, link function, and random component properties are still present.↩︎</p></li>
<li id="fn2"><p>Both the argument name and the options may change↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-06-28_first-weeks-of-gsoc/</guid>
  <pubDate>Mon, 28 Jun 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-06-28_first-weeks-of-gsoc/imgs/gsoc_logo.png" medium="image" type="image/png" height="105" width="144"/>
</item>
<item>
  <title>Design matrices for group-specific effects in formulae and lme4</title>
  <link>https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>A linear mixed model can be written as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7By%7D%20=%20%5Cboldsymbol%7BX%7D%5Cboldsymbol%7B%5Cbeta%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cboldsymbol%7BZ%7D%5Cboldsymbol%7Bu%7D%20+%20%5Cboldsymbol%7B%5Cepsilon%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BX%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D"> are the two design matrices we need to somehow construct when dealing with this type of model. <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BX%7D"> is the design matrix for the common (a.k.a. fixed) effects, and <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D"> is the design matrix for the group-specific (a.k.a. random or varying) effects.</p>
<p>It is quite easy to obtain the design matrix <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BX%7D"> in R using its popular formula interface. In Python, <a href="https://patsy.readthedocs.io/">patsy</a> provides equivalent functionality. Unfortunately, there aren’t as many alternatives to compute the matrix <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D">.</p>
<p>In R, there’s <a href="https://CRAN.R-project.org/package=lme4">lme4</a>, the statistical package par excellence for mixed models. It extends the base formula interface to include group-specific effects via the pipe operator (<code>|</code>) and internally computes both <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BX%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D"> without the user noticing. That’s great!</p>
<p>In Python, we are working on <a href="https://bambinos.github.io/formulae/">formulae</a>, a library we use to handle mixed model formulas in <a href="https://bambinos.github.io/bambi">Bambi</a>. In this process, I’ve found <a href="https://cran.r-project.org/web/packages/lme4/vignettes/lmer.pdf">Fitting Linear Mixed-Effects Models Using lme4</a> vignette extremely useful when figuring out how to compute the design matrix for the group-specific effects.</p>
<p>Today, I was adding tests to make sure we are constructing <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D"> appropriately and found myself comparing the matrices obtained with formulae with matrices obtained with <strong>lme4</strong>. Then I was like … why not making this a blog post? 🤔</p>
<p>… and so here we are! But before we get started, just note this post mixes both R and Python code. I will try to be explicit when I’m using one language or the other. But if you’re reading a chunk and it looks like Python, it’s Python. And if it looks like R… you guessed! It’s R.</p>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lme4)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(patchwork)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> formulae <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> design_matrices</span></code></pre></div>
</div>
</section>
<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>Here we will be comparing design matrices for the group-specific terms in a mixed-effects model obtained with both <strong>lme4</strong> and <strong>formulae</strong>. We’re using the dataset <code>Pixel</code> that comes with the R package <strong>nlme</strong>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pixel"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nlme"</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(Pixel)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Grouped Data: pixel ~ day | Dog/Side
  Dog Side day  pixel
1   1    R   0 1045.8
2   1    R   1 1044.5
3   1    R   2 1042.9
4   1    R   4 1050.4
5   1    R   6 1045.2
6   1    R  10 1038.9</code></pre>
</div>
</div>
<p>We’re not interested in how to fit a certain model here. We’re interested in constructing the design matrix for group-specific effects with different characteristics. We use the following formula</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">f1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">~</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> day <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> Dog) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> Side <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> Dog)</span></code></pre></div>
</div>
<p>where each part can be interpreted as follows</p>
<ul>
<li><code>(0 + day | Dog)</code> means that <code>day</code> has a group-specific slope for each <code>Dog</code>. This is usually known as a random slope. The <code>0</code> indicates not to add the default group-specific intercept (because it’s added next).</li>
<li><code>(1 | Side / Dog)</code> is equivalent to <code>(1 | Side) + (1 | Dog:Side)</code>. This means there’s a varying intercept for each <code>Side</code> and a varying intercept for each combination of <code>Dog</code> and <code>Side</code>. In other words, we have a nested group-specific intercept, where <code>Dog</code> is nested within <code>Side</code>.</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">lme4_terms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkReTrms</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">findbars</span>(f1), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subbars</span>(f1), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> Pixel))</span></code></pre></div>
</div>
<p><code>lme4_terms</code> contains much more information than what we need for this post. We mostly use <code>lme4_terms$Ztlist</code>, which is a list that contains the transpose of the group-specific effects model matrix, separated by term. These matrices are stored as sparse matrices of <code>dgCMatrix</code> class. If we want to have the sub-matrix for a given group-specific term as a base R matrix, we have to do <code>as.matrix(t(lme4_terms$Ztlist$[["term"]]))</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(lme4_terms<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Ztlist)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1 | Dog:Side"  "0 + day | Dog" "1 | Side"     </code></pre>
</div>
</div>
<p>We have three group-specific terms. The first and the last ones are the group-specific intercepts we mentioned. These are the result of the nested group-specific intercept <code>(1 | Side / Dog)</code>. <code>Dog</code> is nested within <code>Side</code> and consequently there’s an intercept varying among <code>Side</code> and another varying among <code>Dog</code> within <code>Side</code>. The second term, <code>0 + day | Dog</code>, represents varying slope of <code>day</code> for each level of <code>Dog</code>.</p>
<p>We finally store the sub-matrix for each term in different objects that we’ll later use when comparing results with those obtained with <strong>formulae</strong>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">day_by_dog <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(lme4_terms<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Ztlist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">0 + day | Dog</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span>
<span id="cb9-2">intercept_by_side <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(lme4_terms<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Ztlist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">1 | Side</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span>
<span id="cb9-3">intercept_by_side_dog <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(lme4_terms<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Ztlist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">1 | Dog:Side</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span></code></pre></div>
</div>
<p>On the other hand, in Python, we use <code>design_matrices()</code> from the <strong>formulae</strong> library to obtain a <code>DesignMatrices</code> object. All the information associated with the group-specific terms is contained in the <code>.group</code> attribute and the sub-matrix corresponding to a particular term is accessed with <code>.group[term_name]</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> design_matrices(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(0 + day | Dog) + (1 | Side / Dog)"</span>, r.Pixel)</span></code></pre></div>
</div>
<p>There’s a dictionary called <code>terms_info</code> within <code>dm.group</code>. To see the names of the group-specific effects we just retrieve the keys.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dm.group.terms.keys()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['day|Dog', '1|Side', '1|Side:Dog'])</code></pre>
</div>
</div>
<p>Names differ a little with the ones from <strong>lme4</strong>, but they represent the same thing.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">day_by_dog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dm.group[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day|Dog'</span>]</span>
<span id="cb13-2">intercept_by_side <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dm.group[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1|Side'</span>]</span>
<span id="cb13-3">intercept_by_side_dog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dm.group[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1|Side:Dog'</span>]</span></code></pre></div>
</div>
<p>Now let’s compare those matrices!</p>
</section>
<section id="design-matrices-for-daydog" class="level2">
<h2 class="anchored" data-anchor-id="design-matrices-for-daydog">Design matrices for <code>(day|Dog)</code></h2>
<p>Rectangles in the following plot correspond to the cells in the matrix. The lowest value for <code>day</code> is 0, represented by violet, and the highest value is 21, represented by yellow. The 10 columns represent the 10 groups in <code>Dog</code>, and the rows represent the observations in <code>Pixel</code>. Here, and also in the other cases, the left panel contains the matrix obtained with <strong>lme4</strong> and the right panel the one produced with <strong>formulae</strong>.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<p>In this first case, both panels are representing the same data so we can happily conclude the result obtained with <strong>formulae</strong> matches the one from <strong>lme4</strong>. Yay!!</p>
<p>But we’re humans and our eyes can fail so it’s better to always check appropiately with</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>day_by_dog <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> day_by_dog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<section id="design-matrices-for-1side" class="level3">
<h3 class="anchored" data-anchor-id="design-matrices-for-1side">Design matrices for <code>(1|Side)</code></h3>
<p>Here the first column represents <code>Side == "L"</code> and the second column represents <code>Side == "R"</code>. Since we’re dealing with an intercept, violet means 0 and yellow means 1. In this case it is much easier to see both results match.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>intercept_by_side <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> intercept_by_side)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
<section id="design-matrices-for-1sidedog" class="level3">
<h3 class="anchored" data-anchor-id="design-matrices-for-1sidedog">Design matrices for <code>(1|Side:Dog)</code></h3>
<p>But things are not always as one wishes. It’s clear from the following plot that both matrices aren’t equal here.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<p>But don’t worry. We’re not giving up. We still have things to do<sup>1</sup>. We can check what are the groups being represented in the columns of the matrices we’re plotting.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(intercept_by_side_dog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "1:L"  "1:R"  "10:L" "10:R" "2:L"  "2:R"  "3:L"  "3:R"  "4:L"  "4:R" 
[11] "5:L"  "5:R"  "6:L"  "6:R"  "7:L"  "7:R"  "8:L"  "8:R"  "9:L"  "9:R" </code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">dm.group.terms[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1|Side:Dog"</span>].labels</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['1|Side[L]:Dog[1]', '1|Side[L]:Dog[10]', '1|Side[L]:Dog[2]', '1|Side[L]:Dog[3]', '1|Side[L]:Dog[4]', '1|Side[L]:Dog[5]', '1|Side[L]:Dog[6]', '1|Side[L]:Dog[7]', '1|Side[L]:Dog[8]', '1|Side[L]:Dog[9]', '1|Side[R]:Dog[1]', '1|Side[R]:Dog[10]', '1|Side[R]:Dog[2]', '1|Side[R]:Dog[3]', '1|Side[R]:Dog[4]', '1|Side[R]:Dog[5]', '1|Side[R]:Dog[6]', '1|Side[R]:Dog[7]', '1|Side[R]:Dog[8]', '1|Side[R]:Dog[9]']</code></pre>
</div>
</div>
<p>And there it is! Matrices differ because columns are representing different groups. In <strong>lme4</strong>, groups are looping first along <code>Dog</code> and then along <code>Side</code>, while in <strong>formulae</strong> it is the other way around.</p>
<p>We can simply re-order the columns of one of the matrices and generate and check whether they match or not.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">intercept_by_side_dog_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>intercept_by_side_dog)</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(intercept_by_side_dog_f) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>terms[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1|Side:Dog"</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>groups</span>
<span id="cb22-3">names_lme4_order <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb22-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span></span>
<span id="cb22-7">)</span>
<span id="cb22-8">intercept_by_side_dog_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> intercept_by_side_dog_f[names_lme4_order] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>()</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(intercept_by_side_dog_f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> intercept_by_side_dog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>And there it is! Results match 🤩</p>
</section>
</section>
<section id="another-formula" class="level2">
<h2 class="anchored" data-anchor-id="another-formula">Another formula</h2>
<p>This other formula contains an interaction between categorical variables as the expression of the group-specific term, which is something we’re not covering above. In this case, we are going to subset the data so the design matrices are smaller and we can understand what’s going on with more ease.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset data</span></span>
<span id="cb25-2">Pixel2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Pixel <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(Dog <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), day <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Dog =</span> forcats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_drop</span>(Dog))</span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create terms with lme4</span></span>
<span id="cb25-6">f2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">~</span> day <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Dog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>Side <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> day)</span>
<span id="cb25-7">lme4_terms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkReTrms</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">findbars</span>(f2), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subbars</span>(f2), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> Pixel2))</span>
<span id="cb25-8">dog_and_side_by_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(lme4_terms<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Ztlist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">0 + Dog:Side | day</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span></code></pre></div>
</div>
<p>And now with <code>design_matrices()</code> in Python.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create terms with</span></span>
<span id="cb26-2">dm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> design_matrices(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(0 + Dog:Side|day)"</span>, r.Pixel2)</span>
<span id="cb26-3">dog_and_side_by_day <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dm.group[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dog:Side|day"</span>]</span></code></pre></div>
</div>
<section id="design-matrix-for-dogsideday" class="level3">
<h3 class="anchored" data-anchor-id="design-matrix-for-dogsideday">Design matrix for <code>(Dog:Side|day)</code></h3>
<p>Although this term is called slope, it is not actually a slope like the one for <code>(day|Dog)</code>. Since both <code>Dog</code> and <code>Side</code> are categorical, the entries of this matrix consist of zeros and ones.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<p>We have the same problem than above, matrices don’t match. So we know what to do: look at the groups represented in the columns.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(dog_and_side_by_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "2" "2" "2" "2" "2" "2" "4" "4" "4" "4" "4" "4" "6" "6" "6" "6" "6" "6"</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">dm.group.terms[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dog:Side|day"</span>].labels</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Dog[1]:Side[L]|day[2.0]', 'Dog[1]:Side[R]|day[2.0]', 'Dog[2]:Side[L]|day[2.0]', 'Dog[2]:Side[R]|day[2.0]', 'Dog[3]:Side[L]|day[2.0]', 'Dog[3]:Side[R]|day[2.0]', 'Dog[1]:Side[L]|day[4.0]', 'Dog[1]:Side[R]|day[4.0]', 'Dog[2]:Side[L]|day[4.0]', 'Dog[2]:Side[R]|day[4.0]', 'Dog[3]:Side[L]|day[4.0]', 'Dog[3]:Side[R]|day[4.0]', 'Dog[1]:Side[L]|day[6.0]', 'Dog[1]:Side[R]|day[6.0]', 'Dog[2]:Side[L]|day[6.0]', 'Dog[2]:Side[R]|day[6.0]', 'Dog[3]:Side[L]|day[6.0]', 'Dog[3]:Side[R]|day[6.0]']</code></pre>
</div>
</div>
<p>But this they represent the same groups<sup>2</sup>. We can look if there’s a difference in how the interactions are ordered within each group.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">lme4_terms<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cnms</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$day
[1] "Dog1:SideL" "Dog2:SideL" "Dog3:SideL" "Dog1:SideR" "Dog2:SideR"
[6] "Dog3:SideR"</code></pre>
</div>
</div>
<p>And again, thankfully, we see there’s a difference in how columns are being ordered. Let’s see if matrices match after we reorder the one obtained with <strong>formulae</strong>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">dog_and_side_by_day_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dog_and_side_by_day)</span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(dog_and_side_by_day_f) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>terms[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dog:Side|day"</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>labels</span>
<span id="cb33-3">side <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb33-4">dog <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb33-5">day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6.0"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb33-6">names_lme4_order <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dog[{dog}]:Side[{side}]|day[{day}]"</span>)</span>
<span id="cb33-7">dog_and_side_by_day_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> dog_and_side_by_day_f[names_lme4_order] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>()</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(dog_and_side_by_day_f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> dog_and_side_by_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Although <strong>formulae</strong> works differently than <strong>lme4</strong>, and has different goals, we showed that <strong>formulae</strong> produces the same design matrices as <strong>lme4</strong> for the variety of examples we covered. While case-based comparisons like these are not what one should rely on when writing software, the examples here were really helpful when working on the implementation in <strong>formulae</strong> and writing the corresponding tests. And if this post helps someone to better understand what’s going on when working with design matrices associated with group-specific effects, it will have been even more worth it!</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I was undoubtedly talking to myself was quite disappointed at this time, wondering what I did wrong. Suffering the consequences of mistakes I wasn’t even aware I made. Well, not that dramatic. But now I’m happy the problem wasn’t real 😅↩︎</p></li>
<li id="fn2"><p>We have six 2s, six 4s and six 6s in both cases↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/</guid>
  <pubDate>Tue, 08 Jun 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/imgs/matrices.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Why Bambi?</title>
  <link>https://tomicapretto.github.io/posts/2021-05-24_why-bambi/</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’ve been thinking about writing a new blog post for a while now but honestly, there was nothing coming to my mind that made me think “Oh, yeah, this is interesting, it can be useful for someone else”. And it was just a few hours ago that I realized I could write about something quite curious that happened to me while trying to replicate a Bambi model with PyMC3.</p>
<p><a href="https://docs.pymc.io/">PyMC3</a> is a Python package for Bayesian statistical modeling that implements advanced Markov chain Monte Carlo algorithms, such as the No-U-Turn sampler (NUTS). <a href="https://bambinos.github.io/bambi/">Bambi</a> is a high-level Bayesian model-building interface in Python. It is built on top of PyMC3 and allows users to specify and fit Generalized Linear Models (GLMs) and Generalized Linear Mixed Models (GLMMs) very easily using a model formula much similar to the popular model formulas in R.</p>
<p>A couple of weeks ago <a href="https://twitter.com/AgustinaArroyu1">Agustina Arroyuelo</a> told me she was trying to replicate a <a href="https://bambinos.github.io/bambi/master/notebooks/wald_gamma_glm.html#Wald">model</a> in one of the example notebooks we have in Bambi and wanted my opinion on what she was doing. After many attempts, neither of us could replicate the model successfully. It turned out to be we were messing up with the shapes of the priors and also had some troubles with the design matrix.</p>
<p>The point of this post is not about good practices when doing Bayesian modeling neither about modeling techniques. This post aims to show how Bambi can save you effort, code, and prevent us from making some mistakes when fitting not-so-trivial GLMs in Python.</p>
<p>Well, I think this is quite enough for an introduction. Let’s better have a look at the problem at hand.</p>
<div id="cell-2" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> bambi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bmb</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pymc3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> theano.tensor <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tt</span></code></pre></div>
</div>
</section>
<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The problem</h2>
<p>In this problem we use a data set consisting of 67856 insurance policies and 4624 (6.8%) claims in Australia between 2004 and 2005. The original source of this dataset is the book <a href="http://www.businessandeconomics.mq.edu.au/our_departments/Applied_Finance_and_Actuarial_Studies/research/books/GLMsforInsuranceData">Generalized Linear Models for Insurance Data</a> by Piet de Jong and Gillian Z. Heller.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://courses.ms.ut.ee/2020/glm/spring/uploads/Main/carclaims.csv"</span></span>
<span id="cb2-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url)</span>
<span id="cb2-3">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claimcst0"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<p>The age (binned), the gender, and the area of residence are used to predict the amount of the claim, conditional on the existence of the claim because we are only working with observations where there is a claim.</p>
<p>We use a Wald regression model. This is a GLM where the random component follows a <a href="https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution">Wald distribution</a>. The link function we choose is the natural logarithm.</p>
</section>
<section id="pymc3-model" class="level2">
<h2 class="anchored" data-anchor-id="pymc3-model">PyMC3 model</h2>
<section id="data-preparation" class="level3">
<h3 class="anchored" data-anchor-id="data-preparation">Data preparation</h3>
<p>To fit the model with PyMC3 we first need to create the model matrix. We need to represent <code>age</code>, <code>area</code>, and <code>gender</code> with dummy variables because they are categorical. We can think of the following objects as sub-matrices of the design matrix in the model.</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-2">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.get_dummies(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"agecat"</span>], drop_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).to_numpy()</span>
<span id="cb3-3">area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.get_dummies(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"area"</span>], drop_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).to_numpy()</span>
<span id="cb3-4">gender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.get_dummies(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>], drop_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).to_numpy()</span></code></pre></div>
</div>
<p>Note we have used <code>drop_first=True</code>. This means that we use <code>n_levels - 1</code> dummies to represent each categorical variable, and the first level is taken as reference. This ensures the resulting design matrix is of full rank.</p>
<p>Next, we stack these sub-matrices horizontally and convert the result to a Theano tensor variable so we can compute the dot product between this matrix and the vector of coefficients when writing our model in PyMC3.</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.hstack([intercept, age, gender, area])</span>
<span id="cb4-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tt.as_tensor_variable(X)</span></code></pre></div>
</div>
</section>
<section id="fit" class="level3">
<h3 class="anchored" data-anchor-id="fit">Fit</h3>
<p>We start declaring the priors for each of the predictors in the model. They are all independent Gaussian distributions. You may wonder where I took the values for the parameters of these distributions. I’ve just copied Bambi’s default values for this particular problem.</p>
<p>At this stage, it is <strong>very important</strong> to give appropriate shapes to all the objects we create in the model. For example, <code>β_age</code> is a random variable that represents the coefficients for the age variable. Since 5 dummy variables are used to represent the age, both <code>β_age</code> and the values passed to <code>mu</code> and <code>sigma</code> must have <code>shape=(5, 1)</code>. <a href="https://discourse.pymc.io/t/create-model-matrix/7429">I’ve failed here many times</a> when trying to replicate the model, so, unfortunately, I know what I’m talking about 😅</p>
<div id="cell-11" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create model and sample posterior</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> model_pymc3:</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build predictors</span></span>
<span id="cb5-4">    β_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β_0"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-5">    β_gender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β_gender"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-6">    β_age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(</span>
<span id="cb5-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β_age"</span>,</span>
<span id="cb5-8">        mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb5-9">        sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.32</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.94</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.13</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.44</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.01</span>]),</span>
<span id="cb5-10">        shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb5-11">    )</span>
<span id="cb5-12">    β_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(</span>
<span id="cb5-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"β_area"</span>,</span>
<span id="cb5-14">      mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb5-15">      sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.86</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.76</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.33</span>]),</span>
<span id="cb5-16">      shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb5-17">    )</span>
<span id="cb5-18">    </span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the vectors for the coefficients into a single vector</span></span>
<span id="cb5-20">    β <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tt.concatenate([β_0, β_age, β_gender, β_area], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-21">    </span>
<span id="cb5-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute and transform linear predictor</span></span>
<span id="cb5-23">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tt.exp(X.dot(β))</span>
<span id="cb5-24">      </span>
<span id="cb5-25">    lam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.HalfCauchy(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claim_lam"</span>, beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-26">    pm.Wald(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claim"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, lam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lam, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claimcst0"</span>])</span>
<span id="cb5-27">    </span>
<span id="cb5-28">    idata_pymc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample( </span>
<span id="cb5-29">      draws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, </span>
<span id="cb5-30">      target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, </span>
<span id="cb5-31">      random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>,</span>
<span id="cb5-32">      return_inferencedata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-33">    )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [claim_lam, β_area, β_gender, β_age, β_0]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="6000" class="" max="6000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [6000/6000 00:25&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 2_000 draw iterations (2_000 + 4_000 draws total) took 26 seconds.</code></pre>
</div>
</div>
</section>
</section>
<section id="bambi-model" class="level2">
<h2 class="anchored" data-anchor-id="bambi-model">Bambi model</h2>
<p>As you can see below, we don’t need to do any data preparation, or even specify priors by hand. Bambi automatically obtains sensible default priors when they are not specified, and also knows how to handle each variable type very well.</p>
<p>The model is specified using a model formula, quite similar to model formulas in R. The left-hand side of <code>~</code> is the response variable, and the rest are the predictors. Here <code>C(agecat)</code> tells Bambi that <code>agecat</code> should be interpreted as categorical. The <code>family</code> argument indicates the conditional distribution for the response, and the <code>link</code> tells Bambi which function of the mean is being modeled by the linear predictor. More information about how they work can be found <a href="https://bambinos.github.io/bambi/master/notebooks/getting_started.html#Families">here</a>.</p>
<p>Then we have the <code>.fit()</code> method, where you can pass arguments to the <code>pm.sample()</code> function that’s running in the background.</p>
<div id="cell-13" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">model_bambi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bmb.Model(</span>
<span id="cb8-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"claimcst0 ~ C(agecat) + gender + area"</span>, </span>
<span id="cb8-3">  data, </span>
<span id="cb8-4">  family <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wald"</span>, </span>
<span id="cb8-5">  link <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span></span>
<span id="cb8-6">)</span>
<span id="cb8-7">idata_bambi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_bambi.fit(draws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, target_accept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [claimcst0_lam, area, gender, C(agecat), Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="6000" class="" max="6000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [6000/6000 00:18&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 2_000 draw iterations (2_000 + 4_000 draws total) took 19 seconds.</code></pre>
</div>
</div>
<p>And that’s it! A model that took several lines of codes to specify in PyMC3 only took a few lines of code in Bambi. Quite an advantage, right?</p>
</section>
<section id="check-results" class="level2">
<h2 class="anchored" data-anchor-id="check-results">Check results</h2>
<p>The simplicity we gain with Bambi would be worthless if the results turned out to be different. We want an interface that makes our job easier, without affecting the quality of the inference. The following is a forest plot where the point gives the posterior mean and the bars indicate a 94% HDI.</p>
<div id="cell-16" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">summary_pymc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> az.summary(idata_pymc)</span>
<span id="cb11-2">summary_bambi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> az.summary(idata_bambi)</span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">summary_pymc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>))</span>
<span id="cb12-2">summary_pymc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"panel"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1-Intercept"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2-Effects"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3-Dispersion"</span>]</span>
<span id="cb12-3"></span>
<span id="cb12-4">summary_bambi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>))</span>
<span id="cb12-5">summary_bambi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"panel"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1-Intercept"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2-Effects"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3-Dispersion"</span>]</span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.33</span>), sharey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb13-2">fig.subplots_adjust(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.13</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.975</span>, wspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12</span>, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.925</span>)</span>
<span id="cb13-3">fig.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>)</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (ax, panel) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axes, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1-Intercept"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2-Effects"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3-Dispersion"</span>])):</span>
<span id="cb13-6">    plt_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_bambi[summary_bambi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"panel"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> panel]</span>
<span id="cb13-7">    ax.scatter(plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>], plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bambi"</span>)</span>
<span id="cb13-8">    ax.hlines(plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hdi_3%"</span>], plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hdi_97%"</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-9">    </span>
<span id="cb13-10">    plt_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_pymc[summary_pymc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"panel"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> panel]</span>
<span id="cb13-11">    ax.scatter(plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>], plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PyMC3"</span>)</span>
<span id="cb13-12">    ax.hlines(plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hdi_3%"</span>], plt_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hdi_97%"</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1"</span>)</span>
<span id="cb13-13">    </span>
<span id="cb13-14">    ax.set_title(panel)</span>
<span id="cb13-15">    ax.tick_params(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-16"></span>
<span id="cb13-17">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend()</span>
<span id="cb13-18">ax.set_yticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(summary_bambi.index)))</span>
<span id="cb13-19">ax.set_yticklabels(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(summary_bambi.index))</span>
<span id="cb13-20"></span>
<span id="cb13-21">fig.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marginal posterior"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)</span>
<span id="cb13-22">fig.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Parameter"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb13-23"></span>
<span id="cb13-24">fig.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imgs/plot.png"</span>, dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-05-24_why-bambi/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>While most of the marginal posteriors match very well, we can clearly see the ones for <code>β_area[3]</code> and <code>β_area[4]</code> don’t overlap as much as the others. One of the possible explanations for this difference is related to the MCMC algorithm. While we know both models are indeed the same model, their internal representation is not exactly the same. For example, the model we wrote in pure PyMC3 computes a unique dot product between a matrix of shape <code>(n, p)</code> a vector of shape <code>(p, 1)</code>, while the model in Bambi is computing the sum of many smaller dot products. As the internal representations are not exactly the same, the sampling spaces differ and the sampling algorithm obtained slightly different results.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this post, we saw how the same GLM can be expressed in both PyMC3 and Bambi. PyMC3 allowed us to control every fine-grained detail of the model specification, while Bambi allowed us to express the same model in a much more concise manner.</p>
<p>Bambi’s advantages in these types of scenarios aren’t only related to the amount of code one has to write. Bambi also prevents us from making mistakes when writing the PyMC3 model, such as the mistakes I was making when specifying the shapes for the distributions. Or one could just simply don’t know how correctly prepare the data that should go in the design matrix, such as the conversion of the categorical data to numeric matrices in such a way that the information is retained without introducing structural redundancies.</p>
<p>Nevertheless, this doesn’t mean we should always favor Bambi over PyMC3. Whether Bambi or PyMC3 is appropriate for you actually depends on your use case. If you’re someone who mainly needs to fit GLMs or GLMMs, Bambi is the way to go and it would be nice you give it a chance. There are a <a href="https://bambinos.github.io/bambi/main/examples.html">bunch of examples</a> showing how to specify and fit different GLMs with Bambi. On the other hand, if you’re someone who writes a lot of custom models, PyMC3 will be your best friend when it comes to working with Bayesian models in Python.</p>
<p>Bambi is a community project and welcomes contributions such as bug fixes, examples, issues related to bugs or desired enhancements, etc. Want to know more? Visit the <a href="https://bambinos.github.io/bambi/main/index.html">official docs</a> or explore the <a href="https://github.com/bambinos/bambi">Github repo</a>. Also, if you have any doubts about whether the feature you want is available or going to be developed, feel free to reach out to us! You can always open a new issue to request a feature or leave feedback about the library, and we welcome them a lot 😁.</p>
</section>
<section id="acknowledgments" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgments">Acknowledgments</h2>
<p>I want to thank <a href="https://twitter.com/AgustinaArroyu1">Agustina</a>, <a href="https://twitter.com/canyon289">Ravin</a>, and <a href="https://twitter.com/aloctavodia">Osvaldo</a> for very useful comments and feedback on an earlier version of this post. They helped me to make this post much nicer than what it was originally.</p>


</section>

 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-05-24_why-bambi/</guid>
  <pubDate>Mon, 24 May 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-05-24_why-bambi/imgs/plot.png" medium="image" type="image/png" height="77" width="144"/>
</item>
<item>
  <title>How to generate bingo cards in R</title>
  <link>https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/</link>
  <description><![CDATA[ 




<p>Hello wor… Well, my first hello world post appeared about a year ago, but this site had the same fate as many of my othe side-projects… abandonment.</p>
<p>Until now.</p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Today I’m going to show you how I came up with “an algorithm” to generate random bingo cards and some utility functions to print them on a nice looking (?) .pdf file.</p>
<p>First of all, what type of bingo card I’m referring to? As an Argentine, the only bingo cards I’ve ever heard of are bingo cards like this one</p>
<center>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/bingo_card.png" class="img-fluid figure-img"></p>
<figcaption>Example bingo card from bingo.es</figcaption>
</figure>
</div>
</center>
<p>It contains fifteen numbers from 1 to 90 that are divided in three rows and nine columns. The first column contains numbers between 1 and 9, the second column numbers between 10 and 20, and so on until the last column that contains numbers between 80 and 90. The type of bingo that you play with this bingo card is known as the <a href="https://en.wikipedia.org/wiki/Bingo_(British_version)">90-ball bingo game</a> or British bingo. As I said, this is the only version I knew before this project <sup>1</sup> and I think it is the only bingo version you’ll find here in Argentina (I also bet you’ll find some fellow Argentine confirming this a national invention).</p>
<p>So, if you entered this post thinking you’ll find how to print those bingo cards that are popular in places like United States, I’m sorry, this is not for you <sup>2</sup>. Fortunately, other people have invented a tool for you even before I wondered how to generate bingo cards. If you are interested, have a look at <a href="https://github.com/jennybc/bingo">this package</a> and the Shiny app introduced there.</p>
<p>Now, let’s go back to our business.</p>
<p>Anyone who has gone to one of those events where people gather to play bingo <sup>3</sup> knows that bingo cards don’t usually come separated in individual pieces of paper. Sellers usually have strips of six bingo cards in their hands. In some events, you can buy bingo cards directly. In others, you have to buy the entire strip.</p>
<p>Since this is a 90-ball bingo game and each card contains fifteen numbers, six bingo cards with no repeated numbers is all we need to have all the numbers of the game in a single strip. You see where it is going?. Yes, we won’t generate isolated cards, we’ll generate entire strips. This is how a bingo strip looks like (just imagine them vertically stacked on a single strip)</p>
<center>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/bingo_strip.PNG" class="img-fluid figure-img"></p>
<figcaption>Example bingo strip from bingo.es</figcaption>
</figure>
</div>
</center>
</section>
<section id="valid-cards-and-valid-strips" class="level2">
<h2 class="anchored" data-anchor-id="valid-cards-and-valid-strips">Valid cards and valid strips</h2>
<p>Bingo cards are not just a bunch of numbers thrown at a piece of paper. All valid strips are composed of six valid cards each made of three valid rows. But not any combinations of three valid rows make up a valid card nor any combinations of six valid cards make up a valid strip. What a shame!</p>
<p>But what is a valid row, a valid card, a va… whatever. Let’s just get to the point and list the rules that will govern how we generate bingo cards.</p>
<section id="valid-row" class="level3">
<h3 class="anchored" data-anchor-id="valid-row">Valid row</h3>
<p>We’re going to think that a row is a numeric vector of length nine where some elements are empty and some are filled with numbers.</p>
<ul>
<li>Exactly five elements are numbers, and four are empty.</li>
<li>There can’t be more than two consecutive empty elements, which is equivalent to having at most three consecutive numbers.</li>
</ul>
<p><strong>Example valid rows</strong></p>
<center>
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/valid_row_1.PNG" class="img-fluid"> <img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/valid_row_2.PNG" class="img-fluid"></p>
</center>
<p><strong>Example invalid rows</strong></p>
<center>
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/invalid_row_1.PNG" class="img-fluid"> <img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/invalid_row_2.PNG" class="img-fluid"></p>
</center>
</section>
<section id="valid-card" class="level3">
<h3 class="anchored" data-anchor-id="valid-card">Valid card</h3>
<p>We can think that a bingo card is a matrix of three rows and nine columns. Each row must be a valid row as specified in the previous point, plus</p>
<ul>
<li>No column can be completely empty.</li>
<li>No column can be completely filled with numbers.</li>
<li>Numbers are sorted in ascending order within columns.</li>
</ul>
<p><strong>Example valid card</strong></p>
<center>
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/valid_card_1.PNG" class="img-fluid"></p>
</center>
</section>
<section id="valid-strip" class="level3">
<h3 class="anchored" data-anchor-id="valid-strip">Valid strip</h3>
<p>A valid strip contains six valid cards that satisfy the following conditions</p>
<ul>
<li>The first column must have <strong>nine</strong> numbers and nine empty slots.</li>
<li>Columns 2 to 8 must have <strong>ten</strong> numbers and eight empty slots.</li>
<li>Column 9 must have <strong>eleven</strong> numbers and seven empty slots.</li>
</ul>
<p>In total, we have <img src="https://latex.codecogs.com/png.latex?6%5Ctimes3%5Ctimes9%20=%20162"> slots in a strip. 90 of them are filled with numbers, 72 are not.</p>
</section>
</section>
<section id="sample-this-sample-that-ive-got-no-need-to-compute-them-all" class="level2">
<h2 class="anchored" data-anchor-id="sample-this-sample-that-ive-got-no-need-to-compute-them-all">Sample this, sample that, I’ve got no need to compute them all<sup>4</sup></h2>
<p>One approach to generate bingo cards would be to get all possible combinations of row layouts, bingo layouts, number arrangements, etc. But the <a href="https://math.stackexchange.com/questions/510693/how-many-90-ball-bingo-cards-are-there">number of cards you could generate is huge</a> and the task wouldn’t be easy at all.</p>
<p>The approach used here is one that mixes some simple combinatorics and random sampling. We use permutations to compute all the possible row layouts. Then, we sample rows to create cards and sample cards to create strips<sup>5</sup>.</p>
<p>First of all, we are going to find valid layouts (i.e.&nbsp;the skeleton of our bingo strips). Once we have them, we are going to fill them with numbers.</p>
<section id="finding-valid-rows" class="level3">
<h3 class="anchored" data-anchor-id="finding-valid-rows">Finding valid rows</h3>
<p>If we represent empty slots with a 0 and filled slots with a 1, getting all permutations between four 0s and five 1s is as simple as calling <code>combinat::permn(c(rep(0, 4), rep(1, 5)))</code>. However, this is not what we want because not all the returned layouts are valid rows. We need to select only those row layouts that are valid in a bingo card.</p>
<p>The following function, <code>find_window()</code>, receives a numeric vector <code>x</code> and looks for find windows of length <code>width</code> where all the elements are equal to <code>what</code>. If such a window is found, the function returns <code>TRUE</code>, otherwise it returns <code>FALSE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">find_window <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, width, what) {</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> width)) {</span>
<span id="cb1-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(x[i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> what)) {</span>
<span id="cb1-4">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-5">        }</span>
<span id="cb1-6">    }</span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-8">}</span></code></pre></div>
</div>
<p>Then we write a function called <code>get_rows()</code> that generates all the possible row layouts and uses <code>find_window()</code> to select the layouts that satisfy our conditions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">get_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all row layouts</span></span>
<span id="cb2-3">    rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> combinat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">permn</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep rows with at most two consecutive empty slots</span></span>
<span id="cb2-5">    rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rows[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(rows, find_window, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)]</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep rows with at most three consecutive filled slots</span></span>
<span id="cb2-7">    rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rows[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(rows, find_window, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb2-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(rows)</span>
<span id="cb2-9">}</span></code></pre></div>
</div>
</section>
<section id="sampling-valid-cards" class="level3">
<h3 class="anchored" data-anchor-id="sampling-valid-cards">Sampling valid cards</h3>
<p>We noted that a valid card is made of three valid rows, but not all combinations of three valid rows make up a valid card. What if we sample three row layouts and keep/discard the combination based on whether they make up a valid card or not? We can repeat this until we have some desired number of card layours. The process is as follows</p>
<ul>
<li>Let <img src="https://latex.codecogs.com/png.latex?N"> be the number of cards we want to generate.</li>
<li>While the number of cards generated is smaller than <img src="https://latex.codecogs.com/png.latex?N">, do:
<ul>
<li>Sample three rows and make up the card.</li>
<li>Count the number of filled slots per column.</li>
<li>If all the counts are between 1 and 3, keep the card, else discard it.</li>
</ul></li>
</ul>
<p>Once we’re done, we end up with <img src="https://latex.codecogs.com/png.latex?N"> bingo card layouts that are valid in terms of our requirements above.</p>
<p>This idea is implemented in a function called <code>get_cards()</code>. It receives the rows we generate with <code>get_rows()</code> and the number of card layouts we want to generate. Finally it returns a list whose elements are vectors of length 3 with the row indexes<sup>6</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">get_cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rows, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cards_n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>) {</span>
<span id="cb3-2">    rows_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(rows)</span>
<span id="cb3-3">    cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, cards_n)</span>
<span id="cb3-4"></span>
<span id="cb3-5">    attempts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-6">    card_idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (card_idx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> cards_n) {</span>
<span id="cb3-9">        attempts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> attempts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample three rows</span></span>
<span id="cb3-11">        row_idxs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(rows_n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-12">        mm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(rows[row_idxs]), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-13">        col_sums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(mm)</span>
<span id="cb3-14"></span>
<span id="cb3-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select valid cards.</span></span>
<span id="cb3-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These have between 1 and 3 numbers per column.</span></span>
<span id="cb3-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(col_sums <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(col_sums <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) {</span>
<span id="cb3-18">            card_idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> card_idx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-19">            cards[[card_idx]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(row_idxs, col_sums)</span>
<span id="cb3-20">        }</span>
<span id="cb3-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print message every 1000 attempts</span></span>
<span id="cb3-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (attempts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb3-23">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Attempt "</span>, attempts, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" | Cards built:"</span>, card_idx, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-24">        }</span>
<span id="cb3-25">    }</span>
<span id="cb3-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check duplicates</span></span>
<span id="cb3-27">    dups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duplicated</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(cards, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"There are "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(dups), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" duplicated cards."</span>)</span>
<span id="cb3-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(cards)</span>
<span id="cb3-30">}</span></code></pre></div>
</div>
</section>
<section id="sampling-valid-strips" class="level3">
<h3 class="anchored" data-anchor-id="sampling-valid-strips">Sampling valid strips</h3>
<p>This is the much like what we did above, with two differences. Instead of sampling three row layouts, we sample six card layouts. Instead of checking if the number of filled slots per column are between 1 and 3, we check if they match a number between 9 and 11 specific to each of them.</p>
<p>Then, we have <code>get_strips()</code>. It receives a list called <code>cards</code> where each element contains the three row indexes corresponding to each card layout. <code>rows</code> is a list of row layouts and <code>strips_n</code> controls how many strip layouts we want to generate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">get_strips <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(cards, rows, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strips_n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb4-2">    valid_counts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb4-3">    cards_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(cards)</span>
<span id="cb4-4">    strips <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, strips_n)</span>
<span id="cb4-5"></span>
<span id="cb4-6">    attempts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-7">    strip_idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-8"></span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (strip_idx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> strips_n) {</span>
<span id="cb4-10">        attempts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> attempts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-11"></span>
<span id="cb4-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample 6 cards</span></span>
<span id="cb4-13">        cards_idxs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards_n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-14">        strip <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cards[cards_idxs]</span>
<span id="cb4-15"></span>
<span id="cb4-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Contains column counts by card</span></span>
<span id="cb4-17">        card_counts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb4-18">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(strip, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),</span>
<span id="cb4-19">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb4-20">        )</span>
<span id="cb4-21"></span>
<span id="cb4-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if strip column counts are valid</span></span>
<span id="cb4-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(card_counts) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> valid_counts)) {</span>
<span id="cb4-24">            strip_idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> strip_idx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get row indexes contained in the selected card indexes</span></span>
<span id="cb4-26">            rows_idxs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(cards[cards_idxs], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-27">            strips[[strip_idx]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb4-28">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(rows[rows_idxs]),</span>
<span id="cb4-29">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb4-30">            )</span>
<span id="cb4-31">        }</span>
<span id="cb4-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print message every 1000 attempts</span></span>
<span id="cb4-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (attempts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb4-34">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Attempt "</span>, attempts, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" | Strips built:"</span>, strip_idx, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-35">        }</span>
<span id="cb4-36">    }</span>
<span id="cb4-37">    dups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duplicated</span>(strips)</span>
<span id="cb4-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"There are "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(dups), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" duplicatd layouts.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-39">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(strips)</span>
<span id="cb4-40">}</span></code></pre></div>
</div>
</section>
<section id="a-last-but-not-least-step" class="level3">
<h3 class="anchored" data-anchor-id="a-last-but-not-least-step">A last but not least step</h3>
<p>I’ve never seen a bingo game where you are given empty layouts and are asked to put numbers yourself. So let’s wrap this up and fill our empty cards!</p>
<p><code>fill_strips()</code> receives the strip layouts we generated, randomly selects <code>n</code> of them, and, also randomly, fills the slots the cards with numbers. Of course, the first column contains numbers from 1 to 9, the second column contains numbers from 10 to 19… and so on until the last column, that has numbers from 80 to 90.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">fill_strips <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(strips, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Numbers that go in each column</span></span>
<span id="cb5-3">    numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">79</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row indexes corresponding to each card in the strip</span></span>
<span id="cb5-5">    card_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">    fill_strip <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(strip) {</span>
<span id="cb5-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put numbers in the slots with a 1 (meaning they must contain a number)</span></span>
<span id="cb5-9">        strip[strip <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(</span>
<span id="cb5-10">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This `sample()` reorders the numbers in each column randomly</span></span>
<span id="cb5-11">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapply</span>(sample, numbers, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(numbers, length))</span>
<span id="cb5-12">        )</span>
<span id="cb5-13"></span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(card_rows)) {</span>
<span id="cb5-15">            strip_ <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> strip[card_rows[[i]], ]</span>
<span id="cb5-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Numbers in a given column are sorted in ascending order within cards</span></span>
<span id="cb5-17">            x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(strip_)</span>
<span id="cb5-18">            strip_[strip_ <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x[x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-19">            strip[card_rows[[i]], ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> strip_</span>
<span id="cb5-20">        }</span>
<span id="cb5-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(strip)</span>
<span id="cb5-22">    }</span>
<span id="cb5-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Strip layouts can be repeated</span></span>
<span id="cb5-24">    strips <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(strips, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), fill_strip)</span>
<span id="cb5-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"There are "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duplicated</span>(strips)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" duplicated strips.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(strips)</span>
<span id="cb5-27">}</span></code></pre></div>
</div>
<p>And we finally get our bingo strips :)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0303456</span>)</span>
<span id="cb6-2">rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_rows</span>()</span>
<span id="cb6-3">cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cards</span>(rows, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb6-4">strips <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_strips</span>(cards, rows, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb6-5">strips <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill_strips</span>(strips, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output messages have been suppressed</span></span></code></pre></div>
</div>
<p>Let’s check some of them</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">strips[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    0   11   20    0   48    0    0   74   80
 [2,]    8    0    0   31    0   51   60   78    0
 [3,]    0   19   27   39    0   54   62    0    0
 [4,]    1    0   26    0   42   55    0    0   84
 [5,]    2   14    0   34    0    0   65   77    0
 [6,]    0   17   29    0   43   59    0    0   89
 [7,]    0    0   22   33    0    0   64   75   88
 [8,]    0   15    0   35   45    0    0   79   90
 [9,]    9    0   25    0   49   50   66    0    0
[10,]    3    0   28   30    0    0   61   71    0
[11,]    7    0    0   36   40   58    0    0   81
[12,]    0   10    0    0   44    0   63   76   87
[13,]    0    0   21   37    0   52   68   70    0
[14,]    5   16    0    0   41    0    0   72   82
[15,]    0   18    0   38   47   57    0    0   86
[16,]    0    0   23    0   46   53    0   73   83
[17,]    4   12    0   32    0    0   67    0   85
[18,]    6   13   24    0    0   56   69    0    0</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">strips[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    0    0   25    0   43   50    0   74   80
 [2,]    0   16   26   34    0    0   65   79    0
 [3,]    6   17    0   38    0   58    0    0   86
 [4,]    3    0   27    0   40   51   61    0    0
 [5,]    4    0    0   32   49   59    0    0   81
 [6,]    0   19   29   35    0    0   68   71    0
 [7,]    1   14    0    0   47    0   60   75    0
 [8,]    2    0   20   31    0    0   66    0   83
 [9,]    0    0   24    0   48   55    0   77   89
[10,]    0    0   28   33   42    0   64   76    0
[11,]    5   12    0   39    0    0   67    0   84
[12,]    9   15    0    0   45   54    0    0   87
[13,]    0   13   21    0    0   52    0   73   85
[14,]    0   18   22    0   44    0   63   78    0
[15,]    8    0    0   37   46   56    0    0   90
[16,]    0    0   23   30    0   53   62    0   82
[17,]    7   10    0   36    0    0   69   70    0
[18,]    0   11    0    0   41   57    0   72   88</code></pre>
</div>
</div>
</section>
</section>
<section id="are-we-going-to-play-on-r-consoles" class="level2">
<h2 class="anchored" data-anchor-id="are-we-going-to-play-on-r-consoles">Are we going to play on R consoles?</h2>
<p>All we got so far are matrices that <em>look like</em> a bingo strip. But honestly, without any given context, they just look like a bunch of matrices of the same dimension filled with 0s and other integer numbers. Our last task is to generate a .pdf output where these matrices really look like bingo cards.</p>
<p>In this last part of the post we make use of the <code>grid</code> package. For those who haven’t heard of it, it is the low level plotting library behind <code>ggplot2</code>, for example.</p>
<p>Here we have a little function, <code>make_grid()</code>, that given a number of rows and columns returns the <em>natural parent coordinates</em> of the borders the grid that defines the rectangles within each card.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">make_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rows, cols) {</span>
<span id="cb11-2">    lines_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>rows) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> rows, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"npc"</span>)</span>
<span id="cb11-3">    lines_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>cols) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"npc"</span>)</span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> lines_rows, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> lines_cols))</span>
<span id="cb11-5">}</span></code></pre></div>
</div>
<p>And now we have the main function used to plot the bingo strips. Since the function is quite large, I prefer to explain how it works with comments in the body.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">plot_strips <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(strips, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8e44ad"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_row =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.925</span>,</span>
<span id="cb12-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width_col =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.975</span>) {</span>
<span id="cb12-3"></span>
<span id="cb12-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `rows` and `cols` are the dimensions of each card</span></span>
<span id="cb12-5">    rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb12-6">    cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb12-7">    g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_grid</span>(rows, cols)</span>
<span id="cb12-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the center of each square in the card grid</span></span>
<span id="cb12-9">    centers_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>row[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (rows <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"npc"</span>)</span>
<span id="cb12-10">    centers_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>col[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (cols <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"npc"</span>)</span>
<span id="cb12-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort the centers appropiately</span></span>
<span id="cb12-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is required because of how we loop over the values in each card</span></span>
<span id="cb12-13">    x_coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(centers_cols, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> rows)</span>
<span id="cb12-14">    y_coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(centers_rows), cols)</span>
<span id="cb12-15"></span>
<span id="cb12-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create unique identifiers for the cards</span></span>
<span id="cb12-17">    cards_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb12-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CARD N"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">intToUtf8</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">176</span>)),</span>
<span id="cb12-19">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(strips) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb12-20">    )</span>
<span id="cb12-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the number of sheets we're going to need.</span></span>
<span id="cb12-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Each sheet contains two strips</span></span>
<span id="cb12-23">    sheets_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(strips) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-24"></span>
<span id="cb12-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial numbers</span></span>
<span id="cb12-26">    card_idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-27">    strip_idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-28"></span>
<span id="cb12-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over sheets</span></span>
<span id="cb12-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (sheet_idx <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(sheets_n)) {</span>
<span id="cb12-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Each sheet is a grid of 6 rows and 3 columns.</span></span>
<span id="cb12-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Columns 1 and 3 are where we place the strips.</span></span>
<span id="cb12-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Column 2 just gives vertical separation.</span></span>
<span id="cb12-34">        l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.layout</span>(</span>
<span id="cb12-35">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb12-36">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">widths =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">48.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">48.75</span>)</span>
<span id="cb12-37">        )</span>
<span id="cb12-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start a new page filled with white</span></span>
<span id="cb12-39">        grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb12-40">        grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>))</span>
<span id="cb12-41"></span>
<span id="cb12-42">        vp_mid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, width_row, width_col, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layout =</span> l)</span>
<span id="cb12-43">        grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pushViewport</span>(vp_mid)</span>
<span id="cb12-44"></span>
<span id="cb12-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over columns 1 and 3</span></span>
<span id="cb12-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) {</span>
<span id="cb12-47">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select strip</span></span>
<span id="cb12-48">            strip_idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> strip_idx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (strip_idx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(strips)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb12-50">            strip <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> strips[[strip_idx]]</span>
<span id="cb12-51"></span>
<span id="cb12-52">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over rows (these rows represent the 6 rows assigned to cards)</span></span>
<span id="cb12-53">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>l<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nrow) {</span>
<span id="cb12-54">                card_idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> card_idx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-55">                vp_inner <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layout.pos.row =</span> i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layout.pos.col =</span> j)</span>
<span id="cb12-56">                grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pushViewport</span>(vp_inner)</span>
<span id="cb12-57"></span>
<span id="cb12-58">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add card identification number on top-left</span></span>
<span id="cb12-59">                grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.text</span>(</span>
<span id="cb12-60">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> cards_n[card_idx],</span>
<span id="cb12-61">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb12-62">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.96</span>,</span>
<span id="cb12-63">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">just =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>,</span>
<span id="cb12-64">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontsize =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb12-65">                )</span>
<span id="cb12-66"></span>
<span id="cb12-67">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw a grill that separates the slots in the card</span></span>
<span id="cb12-68">                vp_mid_inner <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.80</span>)</span>
<span id="cb12-69">                grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pushViewport</span>(vp_mid_inner)</span>
<span id="cb12-70">                grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.grill</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>row, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">v =</span> g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>col, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> col))</span>
<span id="cb12-71"></span>
<span id="cb12-72">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the numbers that correspond to this card</span></span>
<span id="cb12-73">                numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(strip[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i), ])</span>
<span id="cb12-74">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Logical vector that indicates which rectangles are filled</span></span>
<span id="cb12-75">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with nunumbers and which rectangles are empty</span></span>
<span id="cb12-76">                lgl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(numbers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb12-77"></span>
<span id="cb12-78">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the numbers in positions given by the rectangle centers</span></span>
<span id="cb12-79">                grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.text</span>(</span>
<span id="cb12-80">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> numbers[lgl],</span>
<span id="cb12-81">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_coords[lgl],</span>
<span id="cb12-82">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_coords[lgl],</span>
<span id="cb12-83">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontsize =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)</span>
<span id="cb12-84">                )</span>
<span id="cb12-85"></span>
<span id="cb12-86">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill empty slots with color</span></span>
<span id="cb12-87">                grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.rect</span>(</span>
<span id="cb12-88">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_coords[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>lgl],</span>
<span id="cb12-89">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_coords[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>lgl],</span>
<span id="cb12-90">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> rows, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"npc"</span>),</span>
<span id="cb12-91">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"npc"</span>),</span>
<span id="cb12-92">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(</span>
<span id="cb12-93">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb12-94">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> farver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">encode_colour</span>(farver<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">decode_colour</span>(col), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb12-95">                    )</span>
<span id="cb12-96">                )</span>
<span id="cb12-97">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># End</span></span>
<span id="cb12-98">                grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">popViewport</span>()</span>
<span id="cb12-99">                grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">popViewport</span>()</span>
<span id="cb12-100">            }</span>
<span id="cb12-101">        }</span>
<span id="cb12-102">        grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">popViewport</span>()</span>
<span id="cb12-103">    }</span>
<span id="cb12-104">}</span></code></pre></div>
</div>
<p>Now, all we need is to pass the <code>strips</code> generated above to <code>plot_strips()</code> and wrap that call within <code>grDevices::pdf()</code> and <code>grDevices::dev.off()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Height and width are in inches and here they correspond to legal paper size</span></span>
<span id="cb13-2">grDevices<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pdf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imgs/strips.pdf"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.5</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_strips</span>(strips)</span>
<span id="cb13-4">grDevices<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.off</span>()</span></code></pre></div>
</div>
<p>If it works, you’ll have a 25 pages pdf with bingo cards that look like this one</p>
<center>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/bingo_card_own.PNG" class="img-fluid figure-img"></p>
<figcaption>First card in the output</figcaption>
</figure>
</div>
</center>
<p>If you can’t (or just don’t want to) run the code, <a href="imgs/strips.pdf">here</a> you have the generated pdf.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>How I dare to call this a project?↩︎</p></li>
<li id="fn2"><p>But you should try this bingo, you gonna like it!↩︎</p></li>
<li id="fn3"><p>Some are also known as <em>sobremesa</em>↩︎</p></li>
<li id="fn4"><p>Haven’t you heard <em>Estallando desde el océano</em> by Sumo?↩︎</p></li>
<li id="fn5"><p>If you’ve heard of Sampford’s pps sampling, this is going to be familiar↩︎</p></li>
<li id="fn6"><p>I know that returning row indexes is less intuitive than returning card layouts, but this approach requires less memory because it only stores 3 values per card, instead of 18.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/</guid>
  <pubDate>Tue, 03 Nov 2020 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/bingo_card_own.PNG" medium="image"/>
</item>
</channel>
</rss>
