<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Tomás Capretto</title>
<link>https://tomicapretto.github.io/index.html</link>
<atom:link href="https://tomicapretto.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-0.9.440</generator>
<lastBuildDate>Tue, 17 Aug 2021 03:00:00 GMT</lastBuildDate>
<item>
  <title>GSOC 2021: Final evaluation</title>
  <link>https://tomicapretto.github.io/posts/2021-08-17_gsoc-2021-final-evaluation/index.html</link>
  <description><![CDATA[ 



<p>In this short blogpost, I’m going to summarize my contributions to the Bambi library during this Google Summer of Code.</p>
<p>GSoC has been great. I’ve learnt so much during the past weeks. And I’m obviously eager to keep learning and doing stuff with <a href="https://bambinos.github.io/bambi">Bambi</a> in the future. The following is a summary of what we were able to achieve during these time of code:</p>
<ul>
<li>Implemented new default priors <a href="https://github.com/bambinos/bambi/pull/360">#360</a>, <a href="https://github.com/bambinos/bambi/pull/385">#385</a>.</li>
<li>Added new Student-T family <a href="https://github.com/bambinos/bambi/pull/367">#367</a>.</li>
<li>Added new Beta family <a href="https://github.com/bambinos/bambi/pull/368">#368</a>.</li>
<li>Implemented predictions <a href="https://github.com/bambinos/bambi/pull/372">#372</a>.</li>
<li>Improved internal model specification by splitting it into smaller and composable classes <a href="https://github.com/bambinos/bambi/pull/366">#366</a>.</li>
<li>Added the new Binomial family <a href="https://github.com/bambinos/bambi/pull/386">#386</a>. This also implied <a href="https://github.com/bambinos/formulae/pull/48">some changes</a> in its sibling project, <a href="https://bambinos.github.io/formulae">formulae</a>.</li>
</ul>
<p>This, with many other smaller changes or improvements that you can find <a href="https://github.com/bambinos/bambi/commits?author=tomicapretto">here</a> were included in <a href="https://pypi.org/project/bambi/0.6.0/">Bambi 0.6.0</a>.</p>
<p>On the other hand, the items on my original proposal that left to do are multinomial regression and ordered categorical terms. I’ve started to do some work on the formulae side, but these features require a more involved work in Bambi, and thus it is left for future contributions.</p>
<p>To conclude, I want to thank Google for having such an amazing program and everyone who contributed or helped me to contribute to Bambi. Specially, I want to recognize the the work of my mentors Ravin Kumar and Thomas Wiecki, and my director Osvaldo Martin for all the support, feedback, and work during this program.</p>



 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-08-17_gsoc-2021-final-evaluation/index.html</guid>
  <pubDate>Tue, 17 Aug 2021 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Binomial family in Bambi</title>
  <link>https://tomicapretto.github.io/posts/2021-08-03_binomial-family-in-Bambi/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Although GSoC 2021 is close to come to an end, there’s still a lot of exciting things going on around <a href="https://bambinos.github.io/bambi">Bambi</a>. Today I’m going to talk about another new family that’s about to be merged into the main branch, the Binomial family.</p>
<p>Let’s get started by trying to see why we need to have another new family for modeling binary data in Bambi.</p>
</section>
<section id="aggregated-vs-disaggregated-data" class="level2">
<h2 class="anchored" data-anchor-id="aggregated-vs-disaggregated-data">Aggregated vs disaggregated data</h2>
<p>Bambi already has the Bernoulli family to model binary data. This family fits very well when you have a data set where each row represents a single observation and there’s a column that represents the binary outcome ( i.e the result of the Bernoulli trial) as well as other columns with the predictor variables.</p>
<p>Let’s say we want to study the lethality of a certain drug and we have a group of mice to experiment with. An approach could be to divide the mice into smaller groups, assign a certain dose to all the mice in each group, and then finally count the number of units that died after a fixed amount of time. Under the Bernoulli family paradigm, each row has to represent a single observation, looking like this:</p>
<center>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: right;">Obs</th>
<th style="text-align: right;">Dose</th>
<th style="text-align: right;">Died</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1.3</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1.8</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">2.2</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>
</center>
<p>where each row represents a single mouse (i.e.&nbsp;a single Bernoulli trial). The <strong>0</strong> is used to represent a <strong>failure/survival</strong>, and <strong>1</strong> is used to represent a <strong>successes/death</strong>.</p>
<p>What if our data is aggregated? The nature of the experiment makes it natural to have rows representing groups, a column representing the number of deaths, and another column representing the number of mice in the group.</p>
<center>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: right;">Group</th>
<th style="text-align: right;">Dose</th>
<th style="text-align: right;">Dead</th>
<th style="text-align: right;">Total</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1.3</td>
<td style="text-align: right;">12</td>
<td style="text-align: right;">20</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1.8</td>
<td style="text-align: right;">18</td>
<td style="text-align: right;">25</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">2.2</td>
<td style="text-align: right;">24</td>
<td style="text-align: right;">34</td>
</tr>
</tbody>
</table>
</center>
<p>where each row represents a group of mice. Dose is the dose applied to all the units in the group, Dead is the number of mice that died, and Total is the number of mice in the group. If we focus on the <strong>Dead</strong> and <strong>Total</strong> columns we can easily see they resemble data coming from a <strong>Binomial distribution</strong> (i.e.&nbsp;number of successes out of a series of <img src="https://latex.codecogs.com/png.latex?n"> independent Bernoulli trials). In other words, for a given row, we can think there’s a Binomial distribution where <strong>Dead</strong> represents the number of successes out of <strong>Total</strong> number of trials (each mouse is a trial).</p>
<p>Before continuing, it’s important to note that if the data is originally aggregated as in the lower table, it can always be disaggregated to resemble the one in the upper table. So what’s the problem?</p>
<p>The answer is that there’s actually nothing wrong with having the data in such a granular form! But, if the data already comes aggregated, why doing extra work when we now have the Binomial family? Let’s have a look at the examples below!</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> arviz <span class="im" style="color: #00769E;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> bambi <span class="im" style="color: #00769E;">as</span> bmb</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">az.style.use(<span class="st" style="color: #20794D;">"arviz-darkgrid"</span>)</span>
<span id="cb2-2">BLUE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"#003f5c"</span></span>
<span id="cb2-3">PURPLE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"#7a5195"</span></span>
<span id="cb2-4">PINK <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"#ef5675"</span></span></code></pre></div>
</div>
<p>We’re going to use real data in this example<sup>1</sup>. This data consists of the numbers of beetles dead after five hours of exposure to gaseous carbon disulphide at various concentrations:</p>
<center>
<table class="table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Dose, <img src="https://latex.codecogs.com/png.latex?x_i"> <br>(<img src="https://latex.codecogs.com/png.latex?%5Clog_%7B10%7D%5Ctext%7BCS%7D_2%5Ctext%7Bmgl%7D%5E%7B-1%7D">)</th>
<th>Number of beetles, <img src="https://latex.codecogs.com/png.latex?n_i"></th>
<th>Number killed, <img src="https://latex.codecogs.com/png.latex?y_i"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1.6907</td>
<td>59</td>
<td>6</td>
</tr>
<tr class="even">
<td>1.7242</td>
<td>60</td>
<td>13</td>
</tr>
<tr class="odd">
<td>1.7552</td>
<td>62</td>
<td>18</td>
</tr>
<tr class="even">
<td>1.7842</td>
<td>56</td>
<td>28</td>
</tr>
<tr class="odd">
<td>1.8113</td>
<td>63</td>
<td>52</td>
</tr>
<tr class="even">
<td>1.8369</td>
<td>59</td>
<td>53</td>
</tr>
<tr class="odd">
<td>1.8610</td>
<td>62</td>
<td>61</td>
</tr>
<tr class="even">
<td>1.8839</td>
<td>60</td>
<td>60</td>
</tr>
</tbody>
</table>
</center>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">x <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">1.6907</span>, <span class="fl" style="color: #AD0000;">1.7242</span>, <span class="fl" style="color: #AD0000;">1.7552</span>, <span class="fl" style="color: #AD0000;">1.7842</span>, <span class="fl" style="color: #AD0000;">1.8113</span>, <span class="fl" style="color: #AD0000;">1.8369</span>, <span class="fl" style="color: #AD0000;">1.8610</span>, <span class="fl" style="color: #AD0000;">1.8839</span>])</span>
<span id="cb3-2">n <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">59</span>, <span class="dv" style="color: #AD0000;">60</span>, <span class="dv" style="color: #AD0000;">62</span>, <span class="dv" style="color: #AD0000;">56</span>, <span class="dv" style="color: #AD0000;">63</span>, <span class="dv" style="color: #AD0000;">59</span>, <span class="dv" style="color: #AD0000;">62</span>, <span class="dv" style="color: #AD0000;">60</span>])</span>
<span id="cb3-3">y <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">28</span>, <span class="dv" style="color: #AD0000;">52</span>, <span class="dv" style="color: #AD0000;">53</span>, <span class="dv" style="color: #AD0000;">61</span>, <span class="dv" style="color: #AD0000;">60</span>])</span>
<span id="cb3-4"></span>
<span id="cb3-5">data <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({</span>
<span id="cb3-6">    <span class="st" style="color: #20794D;">"x"</span>: x,</span>
<span id="cb3-7">    <span class="st" style="color: #20794D;">"y"</span>: y,</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;">"n"</span>: n</span>
<span id="cb3-9">})</span></code></pre></div>
</div>
<p>Quite simple, right? Can we use it as it is with the Bernoulli family? Let’s have a look below.</p>
</section>
<section id="bernoulli-family" class="level2">
<h2 class="anchored" data-anchor-id="bernoulli-family">Bernoulli family</h2>
<p>Nope, no surprises today. To use the Bernoulli family, we first need to transform the data into the dissagregated or long format. One approach is the following</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">data_bernoulli <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({</span>
<span id="cb4-2">    <span class="st" style="color: #20794D;">"x"</span>: np.concatenate([np.repeat(x, n) <span class="cf" style="color: #003B4F;">for</span> x, n <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(x, n)]),</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;">"killed"</span>: np.concatenate([np.repeat([<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>], [y, n <span class="op" style="color: #5E5E5E;">-</span> y]) <span class="cf" style="color: #003B4F;">for</span> y, n <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(y, n)])</span>
<span id="cb4-4">})</span></code></pre></div>
</div>
<p>Do you realize how bothering it can be to do that if we have many more variables? Nevermind, let’s keep going.</p>
<p>Now let’s initialize a Bambi model and sample from the posterior:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">model_brn <span class="op" style="color: #5E5E5E;">=</span> bmb.Model(<span class="st" style="color: #20794D;">"killed ~ x"</span>, data_bernoulli, family<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bernoulli"</span>)</span>
<span id="cb5-2">idata_brn <span class="op" style="color: #5E5E5E;">=</span> model_brn.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Modeling the probability that killed==1
Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:03&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 4 seconds.</code></pre>
</div>
</div>
<p>and explore the marginal posteriors</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">az.summary(idata_brn, kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"stats"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>mean</th>
      <th>sd</th>
      <th>hdi_3%</th>
      <th>hdi_97%</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Intercept</th>
      <td>-61.021</td>
      <td>5.250</td>
      <td>-70.606</td>
      <td>-51.311</td>
    </tr>
    <tr>
      <th>x</th>
      <td>34.443</td>
      <td>2.954</td>
      <td>28.933</td>
      <td>39.745</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>We can predict the the probability of dying for out-of-sample data to see how it evolves with the different concentration levels.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">new_data <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">"x"</span>: np.linspace(<span class="fl" style="color: #AD0000;">1.6</span>, <span class="dv" style="color: #AD0000;">2</span>, num<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>)})</span>
<span id="cb9-2">model_brn.predict(idata_brn, data<span class="op" style="color: #5E5E5E;">=</span>new_data)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># Plot HDI for the mean of the probability of dying</span></span>
<span id="cb10-4">az.plot_hdi(</span>
<span id="cb10-5">  new_data[<span class="st" style="color: #20794D;">"x"</span>], </span>
<span id="cb10-6">  idata_brn.posterior[<span class="st" style="color: #20794D;">"killed_mean"</span>].values, </span>
<span id="cb10-7">  color<span class="op" style="color: #5E5E5E;">=</span>BLUE,</span>
<span id="cb10-8">  ax<span class="op" style="color: #5E5E5E;">=</span>ax</span>
<span id="cb10-9">)</span>
<span id="cb10-10"></span>
<span id="cb10-11">ax.plot(</span>
<span id="cb10-12">  new_data[<span class="st" style="color: #20794D;">"x"</span>], </span>
<span id="cb10-13">  idata_brn.posterior[<span class="st" style="color: #20794D;">"killed_mean"</span>].values.mean((<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)), </span>
<span id="cb10-14">  color<span class="op" style="color: #5E5E5E;">=</span>BLUE</span>
<span id="cb10-15">)</span>
<span id="cb10-16"></span>
<span id="cb10-17">ax.scatter(x, y <span class="op" style="color: #5E5E5E;">/</span> n, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>, color<span class="op" style="color: #5E5E5E;">=</span>PURPLE, edgecolors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"black"</span>, zorder<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb10-18">ax.set_ylabel(<span class="st" style="color: #20794D;">"Probability of death"</span>)</span>
<span id="cb10-19">ax.set_xlabel(<span class="vs" style="color: #20794D;">r"Dose $\log_</span><span class="sc" style="color: #5E5E5E;">{10}</span><span class="vs" style="color: #20794D;">CS_2mgl^{-1}$"</span>)</span>
<span id="cb10-20">ax.set_title(<span class="st" style="color: #20794D;">"family='bernoulli'"</span>)</span>
<span id="cb10-21"></span>
<span id="cb10-22">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-08-03_binomial-family-in-Bambi/index_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="binomial-family" class="level2">
<h2 class="anchored" data-anchor-id="binomial-family">Binomial family</h2>
<p>Before writing down the model with the Binomial family, let’s take a moment to review new notation that was added specifically for this purpose.</p>
<p>The model formula syntax only allows us to pass one variable on its LHS. Then, how do we tell Bambi that what we want to model is the <strong>proportion</strong> that results from dividing <strong>y</strong> over <strong>n</strong>?</p>
<p>Thanks to recent developments, it’s as easy as writing <code>proportion(y, n)</code>, or any of its aliases <code>prop(y, n)</code> and <code>p(y, n)</code>. To keep it shorter, let’s use the last one.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">model_bnml <span class="op" style="color: #5E5E5E;">=</span> bmb.Model(<span class="st" style="color: #20794D;">"p(y, n) ~ x"</span>, data, family<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"binomial"</span>)</span>
<span id="cb11-2">idata_bnml <span class="op" style="color: #5E5E5E;">=</span> model_bnml.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:03&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 3 seconds.</code></pre>
</div>
</div>
<p>Quite simple, right? The code here is very similar to the one for the model with the Bernoulli family. However, the new Binomial family allows us to <strong>use the data in its original form</strong>.</p>
<p>Let’s finish this section by getting the marginal posteriors as well as a figure as the one displayed above.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">az.summary(idata_bnml, kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"stats"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>mean</th>
      <th>sd</th>
      <th>hdi_3%</th>
      <th>hdi_97%</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Intercept</th>
      <td>-61.045</td>
      <td>4.969</td>
      <td>-69.905</td>
      <td>-51.495</td>
    </tr>
    <tr>
      <th>x</th>
      <td>34.452</td>
      <td>2.793</td>
      <td>29.185</td>
      <td>39.552</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">model_bnml.predict(idata_bnml, data<span class="op" style="color: #5E5E5E;">=</span>new_data)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb16-2"></span>
<span id="cb16-3">az.plot_hdi(</span>
<span id="cb16-4">  new_data[<span class="st" style="color: #20794D;">"x"</span>],</span>
<span id="cb16-5">  idata_bnml.posterior[<span class="st" style="color: #20794D;">"p(y, n)_mean"</span>].values,</span>
<span id="cb16-6">  color<span class="op" style="color: #5E5E5E;">=</span>BLUE,</span>
<span id="cb16-7">  ax<span class="op" style="color: #5E5E5E;">=</span>ax</span>
<span id="cb16-8">)</span>
<span id="cb16-9"></span>
<span id="cb16-10">ax.plot(</span>
<span id="cb16-11">  new_data[<span class="st" style="color: #20794D;">"x"</span>], </span>
<span id="cb16-12">  idata_bnml.posterior[<span class="st" style="color: #20794D;">"p(y, n)_mean"</span>].values.mean((<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)), </span>
<span id="cb16-13">  color<span class="op" style="color: #5E5E5E;">=</span>BLUE</span>
<span id="cb16-14">)</span>
<span id="cb16-15"></span>
<span id="cb16-16">ax.scatter(x, y <span class="op" style="color: #5E5E5E;">/</span> n, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>, color<span class="op" style="color: #5E5E5E;">=</span>PURPLE, edgecolors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"black"</span>, zorder<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb16-17">ax.set_ylabel(<span class="st" style="color: #20794D;">"Probability of death"</span>)</span>
<span id="cb16-18">ax.set_xlabel(<span class="vs" style="color: #20794D;">r"Dose $\log_</span><span class="sc" style="color: #5E5E5E;">{10}</span><span class="vs" style="color: #20794D;">CS_2mgl^{-1}$"</span>)</span>
<span id="cb16-19">ax.set_title(<span class="st" style="color: #20794D;">"family='binomial'"</span>)</span>
<span id="cb16-20">fig.set_facecolor(<span class="st" style="color: #20794D;">"w"</span>)</span>
<span id="cb16-21">fig.savefig(<span class="st" style="color: #20794D;">"imgs/plot.png"</span>)</span>
<span id="cb16-22">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-08-03_binomial-family-in-Bambi/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>This blog post introduced the new Binomial family. This new family saves us from having to manipulate aggregated data prior to modeling, making it more pleasant and simpler to specify and fit models for binary data in Bambi.</p>


</section>


<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This data can be found in An Introduction to Generalized Linear Models by A. J. Dobson and A. G. Barnett, but the original source is (Bliss, 1935).↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-08-03_binomial-family-in-Bambi/index.html</guid>
  <pubDate>Tue, 03 Aug 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-08-03_binomial-family-in-Bambi/imgs/plot.png" medium="image" type="image/png" height="101" width="144"/>
</item>
<item>
  <title>New families in Bambi</title>
  <link>https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’m very happy I could contribute with many exciting changes to <a href="https://bambinos.github.io/bambi">Bambi</a>. Some changes, such as the reorganization of the default priors and built-in families, are not visible to the user but make the codebase more modular and easier to read. Other changes, such as the ones I’m going to describe here, have a direct impact on what you can do with Bambi.</p>
<p>Today I’ll describe two new built-in families that have been added to Bambi. The first one, already described in my previous post, is the <code>"t"</code> family. This can be used to make linear regressions more robust to outliers. The second one the <code>"beta"</code> family which can be used to model ratings and proportions.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> arviz <span class="im" style="color: #00769E;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> bambi <span class="im" style="color: #00769E;">as</span> bmb</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span></code></pre></div>
</div>
</section>
<section id="robust-linear-regression-with-the-t-family." class="level2">
<h2 class="anchored" data-anchor-id="robust-linear-regression-with-the-t-family.">Robust linear regression with the <code>t</code> family.</h2>
<p>A Bayesian robust linear regression looks as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20%5Csim%20%5Ctext%7BStudentT%7D(%5Cmu_i,%20%5Clambda,%20%5Cnu)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu_i%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_%7B1,%20i%7D%20+%20%5Ccdots%20+%20%5Cbeta_p%20x_%7Bp,%20i%7D">, <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is the precision parameter and <img src="https://latex.codecogs.com/png.latex?%5Cnu"> is the degrees of freedom.</p>
<p>This wouldn’t be a Bayesian model without priors. Bambi uses the following priors by default:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0A%5Cbeta_0%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%7B%5Cbeta_0%7D,%20%5Csigma_%7B%5Cbeta_0%7D)%20%5C%5C%0A%5Cbeta_j%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%7B%5Cbeta_j%7D,%20%5Csigma_%7B%5Cbeta_j%7D)%20%20%5C%5C%0A%5Clambda%20%5Csim%20%5Ctext%7BHalfCauchy(1)%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>where the <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B%5Cbeta_j%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cbeta_j%7D"> are estimated from the data. By default, <img src="https://latex.codecogs.com/png.latex?%5Cnu=2">, but it is also possible to assign it a probability distribution (as we’re going to see below).</p>
<p>Before seeing how this new family works, let’s simulate some data. On this opportunity, we’re using the same dataset than in the <a href="https://tcapretto.netlify.app/post/2021-07-05-robust-linear-regression-with-bambi/">previous post</a>. This is a toy dataset with one predictor <code>x</code>, one response <code>y</code>, and some outliers contaminating the beautiful linear relationship between the variables.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb2-2">true_intercept <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-3">true_slope <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, size)</span>
<span id="cb2-6">y <span class="op" style="color: #5E5E5E;">=</span> true_intercept <span class="op" style="color: #5E5E5E;">+</span> true_slope <span class="op" style="color: #5E5E5E;">*</span> x <span class="op" style="color: #5E5E5E;">+</span> np.random.normal(scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, size<span class="op" style="color: #5E5E5E;">=</span>size)</span>
<span id="cb2-7"></span>
<span id="cb2-8">x_out <span class="op" style="color: #5E5E5E;">=</span> np.append(x, [<span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.15</span>, <span class="fl" style="color: #AD0000;">0.2</span>])</span>
<span id="cb2-9">y_out <span class="op" style="color: #5E5E5E;">=</span> np.append(y, [<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">9</span>])</span>
<span id="cb2-10"></span>
<span id="cb2-11">data <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(<span class="bu" style="color: null;">dict</span>(x <span class="op" style="color: #5E5E5E;">=</span> x_out, y <span class="op" style="color: #5E5E5E;">=</span> y_out))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb3-2"></span>
<span id="cb3-3">ax.scatter(data[<span class="st" style="color: #20794D;">"x"</span>], data[<span class="st" style="color: #20794D;">"y"</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>, ec<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.7</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/index_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="model-specification-and-fit" class="level3">
<h3 class="anchored" data-anchor-id="model-specification-and-fit">Model specification and fit</h3>
<p>Using this new family is extremely easy. It is almost as simple as running a default normal linear regression. The only difference is that we need to add the <code>family="t"</code> argument to the <code>Model()</code> instantiation.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">model <span class="op" style="color: #5E5E5E;">=</span> bmb.Model(<span class="st" style="color: #20794D;">"y ~ x"</span>, data, family<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"t"</span>)</span>
<span id="cb4-2">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>Formula: y ~ x
Family name: T
Link: identity
Observations: 103
Priors:
  Common-level effects
    Intercept ~ Normal(mu: 2.1234, sigma: 5.9491)
    x ~ Normal(mu: 0.0, sigma: 10.4201)

  Auxiliary parameters
    sigma ~ HalfStudentT(nu: 4, sigma: 1.2227)
    nu ~ Gamma(alpha: 2, beta: 0.1)</code></pre>
</div>
</div>
<p>The output above shows information about the family being used and the parameters for the default priors. Next, we just do <code>model.fit()</code> to run the sampler.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">idata <span class="op" style="color: #5E5E5E;">=</span> model.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [y_nu, y_sigma, x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:02&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 3 seconds.</code></pre>
</div>
</div>
</section>
<section id="use-custom-priors" class="level3">
<h3 class="anchored" data-anchor-id="use-custom-priors">Use custom priors</h3>
<p>Let’s say we are not happy with having a fixed value for the degrees of freedom and we want to assign it a prior distribution. Is that a problem? Of course not!</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Use a Gamma prior for the degrees of freedom</span></span>
<span id="cb9-2">model <span class="op" style="color: #5E5E5E;">=</span> bmb.Model(<span class="st" style="color: #20794D;">"y ~ x"</span>, data, family<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"t"</span>)</span>
<span id="cb9-3">model.set_priors({<span class="st" style="color: #20794D;">"nu"</span>: bmb.Prior(<span class="st" style="color: #20794D;">"Gamma"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, beta<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)})</span>
<span id="cb9-4">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Formula: y ~ x
Family name: T
Link: identity
Observations: 103
Priors:
  Common-level effects
    Intercept ~ Normal(mu: 2.1234, sigma: 5.9491)
    x ~ Normal(mu: 0.0, sigma: 10.4201)

  Auxiliary parameters
    sigma ~ HalfStudentT(nu: 4, sigma: 1.2227)
    nu ~ Gamma(alpha: 3, beta: 1)</code></pre>
</div>
</div>
<p>And hit the inference button</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">idata <span class="op" style="color: #5E5E5E;">=</span> model.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [y_nu, y_sigma, x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:04&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 5 seconds.</code></pre>
</div>
</div>
</section>
<section id="explore-results" class="level3">
<h3 class="anchored" data-anchor-id="explore-results">Explore results</h3>
<p>First of all we can see the marginal posteriors for the parameters in the model and their respective traces</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">az.plot_trace(idata)</span>
<span id="cb14-2">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/index_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>And it is also good to explore the posterior distribution of regression lines</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Prepare data</span></span>
<span id="cb15-2">x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, num<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>)</span>
<span id="cb15-3">posterior_stacked <span class="op" style="color: #5E5E5E;">=</span> idata.posterior.stack(samples<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">"chain"</span>, <span class="st" style="color: #20794D;">"draw"</span>))</span>
<span id="cb15-4">intercepts <span class="op" style="color: #5E5E5E;">=</span> posterior_stacked[<span class="st" style="color: #20794D;">"Intercept"</span>].values</span>
<span id="cb15-5">slopes <span class="op" style="color: #5E5E5E;">=</span> posterior_stacked[<span class="st" style="color: #20794D;">"x"</span>].values</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;"># Create plot</span></span>
<span id="cb15-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;"># Data points</span></span>
<span id="cb15-11">ax.scatter(data[<span class="st" style="color: #20794D;">"x"</span>], data[<span class="st" style="color: #20794D;">"y"</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>, ec<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.7</span>)</span>
<span id="cb15-12"></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;"># Posterior regression lines</span></span>
<span id="cb15-14"><span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(intercepts, slopes):</span>
<span id="cb15-15">    ax.plot(x, a <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">*</span> x, color <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0.5"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.3</span>, zorder<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb15-16"></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;"># True regression line</span></span>
<span id="cb15-18">ax.plot(x, true_intercept <span class="op" style="color: #5E5E5E;">+</span> true_slope <span class="op" style="color: #5E5E5E;">*</span> x, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"k"</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/index_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>where the line in black is the true regression line.</p>
</section>
</section>
<section id="beta-regression-with-the-beta-family." class="level2">
<h2 class="anchored" data-anchor-id="beta-regression-with-the-beta-family.">Beta regression with the <code>beta</code> family.</h2>
<p>Beta regression is useful to model response variables that have values within the <img src="https://latex.codecogs.com/png.latex?(0,%201)"> interval. This type of regression is based on the assumption that the conditional distribution of the response variable follows a Beta distribution with its mean related to a set of regressors through a linear predictor with unknown coefficients and a link function.</p>
<p>The beta regression model is based on an alternative parameterization of the beta density in terms of the mean <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and a precision parameter <img src="https://latex.codecogs.com/png.latex?%5Ckappa">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Blr%7D%0A%5Cdisplaystyle%20f(y%20%7C%20%5Cmu,%20%5Ckappa)%20=%0A%20%20%5Cfrac%7B%5CGamma(%5Ckappa)%7D%7B%5CGamma(%5Cmu%5Ckappa)%5CGamma((1-%5Cmu)%5Ckappa)%7D%0A%20%20y%5E%7B%5Cmu%5Ckappa%20-1%7D%0A%20%20y%5E%7B(1%20-%20%5Cmu)%5Ckappa%20-1%7D,%20&amp;%200%20%3C%20y%20%3C%201%0A%5Cend%7Barray%7D%0A"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?0%20%3C%20%5Cmu%20%3C%201"> and <img src="https://latex.codecogs.com/png.latex?%5Ckappa%20%3E%200">.</p>
<p>If we use the same notation than for the robust linear regression, the beta regression model is defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20%5Csim%20%5Ctext%7BBeta%7D(g%5E%7B-1%7D(%5Cmu_i),%20%5Ckappa)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu_i%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_%7B1,i%7D%20+%20%5Ccdots%20+%20%5Cbeta_p%20x_%7Bp,i%7D">, <img src="https://latex.codecogs.com/png.latex?%5Ckappa"> is the precision parameter and <img src="https://latex.codecogs.com/png.latex?g"> is a twice differentiable, strictly increasing, link function.</p>
<p>Bambi uses again the following priors by default:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0A%5Cbeta_0%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%7B%5Cbeta_0%7D,%20%5Csigma_%7B%5Cbeta_0%7D)%20%5C%5C%0A%5Cbeta_j%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_%7B%5Cbeta_j%7D,%20%5Csigma_%7B%5Cbeta_j%7D)%20%20%5C%5C%0A%5Ckappa%20%5Csim%20%5Ctext%7BHalfCauchy(1)%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>where the <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B%5Cbeta_j%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Cbeta_j%7D"> are estimated from the data. By default, <img src="https://latex.codecogs.com/png.latex?g"> is the logit function. Other options available are the identity, the probit, and the cloglog link functions.</p>
<p>It’s possible to resume all of this in a very simplistic way by seeing that the beta regression as a very close relative of the GLM family. This model presents all the characteristics of GLMs, with the exception that the beta distribution doesn’t belong to the exponential family.</p>
<section id="model-specification-and-fit-1" class="level3">
<h3 class="anchored" data-anchor-id="model-specification-and-fit-1">Model specification and fit</h3>
<p>Here we are going to use the <code>GasolineYield</code> dataset from the <code>betareg</code> R package. This dataset is about the proportion of crude oil converted to gasoline. The response variable is the proportion of crude oil after distillation and fractionation. In this example, we use the temperature at which gasoline has vaporized in Fahrenheit degrees (<code>"temp"</code>) and a factor that indicates ten unique combinations of gravity, pressure and temperature (<code>"batch"</code>).</p>
<p>The following is just a re-ordering of the categories in the <code>"batch"</code> variable so it matches the original contrasts used in the <code>betareg</code> package.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">data <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"data/gasoline.csv"</span>)</span>
<span id="cb16-2">data[<span class="st" style="color: #20794D;">"batch"</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Categorical(</span>
<span id="cb16-3">  data[<span class="st" style="color: #20794D;">"batch"</span>], </span>
<span id="cb16-4">  [<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>], </span>
<span id="cb16-5">  ordered<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb16-6">)</span></code></pre></div>
</div>
<p>Next, we define the model. The only difference is that we indicate <code>family="beta"</code>. Bambi handles all the rest for us.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Note this model does not include an intercept</span></span>
<span id="cb17-2">model <span class="op" style="color: #5E5E5E;">=</span> bmb.Model(<span class="st" style="color: #20794D;">"yield ~ 0 + temp + batch"</span>, data, family<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"beta"</span>)</span>
<span id="cb17-3">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>Formula: yield ~ 0 + temp + batch
Family name: Beta
Link: logit
Observations: 32
Priors:
  Common-level effects
    temp ~ Normal(mu: 0.0, sigma: 0.0364)
    batch ~ Normal(mu: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.], sigma: [ 8.5769  7.5593  8.5769  8.5769  7.5593  8.5769  8.5769  7.5593  8.5769
 10.328 ])

  Auxiliary parameters
    kappa ~ HalfCauchy(beta: 1)</code></pre>
</div>
</div>
<p>And <code>model.fit()</code> is all we need to ask the sampler to start running.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">idata <span class="op" style="color: #5E5E5E;">=</span> model.fit(draws<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2000</span>, target_accept<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.95</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [yield_kappa, batch, temp]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="6000" class="" max="6000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [6000/6000 00:19&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 2_000 draw iterations (2_000 + 4_000 draws total) took 20 seconds.
The number of effective samples is smaller than 10% for some parameters.</code></pre>
</div>
</div>
</section>
<section id="explore-results-1" class="level3">
<h3 class="anchored" data-anchor-id="explore-results-1">Explore results</h3>
<p>Once we got the posterior, we explore it. This time we’re going to plot highest density intervals for the marginal posteriors corresponding to the parameters in the model.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">summary <span class="op" style="color: #5E5E5E;">=</span> az.summary(idata, kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"stats"</span>)</span>
<span id="cb22-2">summary</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>mean</th>
      <th>sd</th>
      <th>hdi_3%</th>
      <th>hdi_97%</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>temp</th>
      <td>0.011</td>
      <td>0.001</td>
      <td>0.010</td>
      <td>0.012</td>
    </tr>
    <tr>
      <th>batch[10]</th>
      <td>-6.111</td>
      <td>0.244</td>
      <td>-6.586</td>
      <td>-5.656</td>
    </tr>
    <tr>
      <th>batch[1]</th>
      <td>-4.388</td>
      <td>0.201</td>
      <td>-4.766</td>
      <td>-4.010</td>
    </tr>
    <tr>
      <th>batch[2]</th>
      <td>-4.799</td>
      <td>0.191</td>
      <td>-5.167</td>
      <td>-4.453</td>
    </tr>
    <tr>
      <th>batch[3]</th>
      <td>-4.551</td>
      <td>0.185</td>
      <td>-4.892</td>
      <td>-4.207</td>
    </tr>
    <tr>
      <th>batch[4]</th>
      <td>-5.055</td>
      <td>0.211</td>
      <td>-5.442</td>
      <td>-4.635</td>
    </tr>
    <tr>
      <th>batch[5]</th>
      <td>-4.980</td>
      <td>0.213</td>
      <td>-5.415</td>
      <td>-4.591</td>
    </tr>
    <tr>
      <th>batch[6]</th>
      <td>-5.073</td>
      <td>0.215</td>
      <td>-5.468</td>
      <td>-4.668</td>
    </tr>
    <tr>
      <th>batch[7]</th>
      <td>-5.571</td>
      <td>0.212</td>
      <td>-5.973</td>
      <td>-5.170</td>
    </tr>
    <tr>
      <th>batch[8]</th>
      <td>-5.617</td>
      <td>0.233</td>
      <td>-6.030</td>
      <td>-5.149</td>
    </tr>
    <tr>
      <th>batch[9]</th>
      <td>-5.729</td>
      <td>0.250</td>
      <td>-6.201</td>
      <td>-5.264</td>
    </tr>
    <tr>
      <th>yield_kappa</th>
      <td>263.233</td>
      <td>86.097</td>
      <td>115.416</td>
      <td>425.489</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">summary[<span class="st" style="color: #20794D;">"row"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">12</span>))</span>
<span id="cb23-2">summary[<span class="st" style="color: #20794D;">"panel"</span>] <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"1-Temperature"</span>] <span class="op" style="color: #5E5E5E;">+</span> [<span class="st" style="color: #20794D;">"2-Batch"</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> [<span class="st" style="color: #20794D;">"3-Precision"</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="fl" style="color: #AD0000;">5.33</span>), sharey<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>)</span>
<span id="cb24-2">fig.subplots_adjust(left<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.12</span>, right<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.975</span>, wspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, bottom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.12</span>, top<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.925</span>)</span>
<span id="cb24-3">fig.set_facecolor(<span class="st" style="color: #20794D;">"w"</span>)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="cf" style="color: #003B4F;">for</span> i, (ax, panel) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(<span class="bu" style="color: null;">zip</span>(axes, [<span class="st" style="color: #20794D;">"1-Temperature"</span>, <span class="st" style="color: #20794D;">"2-Batch"</span>, <span class="st" style="color: #20794D;">"3-Precision"</span>])):</span>
<span id="cb24-6">    plt_data <span class="op" style="color: #5E5E5E;">=</span> summary[summary[<span class="st" style="color: #20794D;">"panel"</span>] <span class="op" style="color: #5E5E5E;">==</span> panel]</span>
<span id="cb24-7">    ax.scatter(plt_data[<span class="st" style="color: #20794D;">"mean"</span>], plt_data[<span class="st" style="color: #20794D;">"row"</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">80</span>)</span>
<span id="cb24-8">    ax.hlines(plt_data[<span class="st" style="color: #20794D;">"row"</span>], plt_data[<span class="st" style="color: #20794D;">"hdi_3%"</span>], plt_data[<span class="st" style="color: #20794D;">"hdi_97%"</span>], lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb24-9">    ax.set_title(panel)</span>
<span id="cb24-10">    ax.tick_params(<span class="st" style="color: #20794D;">"y"</span>, length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb24-11"></span>
<span id="cb24-12">ax.set_yticks(<span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(summary.index)))</span>
<span id="cb24-13">ax.set_yticklabels(<span class="bu" style="color: null;">list</span>(summary.index))</span>
<span id="cb24-14"></span>
<span id="cb24-15">fig.text(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.025</span>, <span class="st" style="color: #20794D;">"Marginal posterior"</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12</span>, ha<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>)</span>
<span id="cb24-16">fig.text(<span class="fl" style="color: #AD0000;">0.02</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">"Parameter"</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12</span>, va<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>, rotation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb24-17"></span>
<span id="cb24-18">fig.savefig(<span class="st" style="color: #20794D;">"imgs/plot.png"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/index.html</guid>
  <pubDate>Wed, 14 Jul 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-07-14_new-families-in-Bambi/imgs/plot.png" medium="image" type="image/png" height="77" width="144"/>
</item>
<item>
  <title>Robust linear regression in Bambi</title>
  <link>https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index.html</link>
  <description><![CDATA[ 



<p>The next thing in my TODO list for this Google Summer of Code season with <a href="https://numfocus.org/">NumFOCUS</a> is to add new families of models to <a href="https://bambinos.github.io/bambi">Bambi</a>. This is still a WIP but I wanted to show you how to build a robust linear regression model using the <code>Family</code> class in Bambi.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> bambi <span class="im" style="color: #00769E;">as</span> bmb</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> matplotlib.patches <span class="im" style="color: #00769E;">import</span> Rectangle, FancyArrowPatch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> scipy <span class="im" style="color: #00769E;">import</span> stats</span></code></pre></div>
</div>
<section id="what-do-we-mean-with-robust" class="level2">
<h2 class="anchored" data-anchor-id="what-do-we-mean-with-robust">What do we mean with robust?</h2>
<p>Before showing how to build a robust regression with Bambi we need to be clear about what we mean when we say that a model is robust. Robust to what? How is linear regression non-robust?</p>
<p>In this post, we say a method is robust if its inferences aren’t (seriously) affected by the presence of outliers.</p>
</section>
<section id="how-do-outliers-affect-linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="how-do-outliers-affect-linear-regression">How do outliers affect linear regression?</h2>
<p>I think it will be easier to understand how outliers affect linear regressions via an example based on the least squares method. This is not exactly how linear regression works in our Bayesian world, but outlier’s bad consequences are similar.</p>
<p>In classic statistics, linear regression models are usually fitted by ordinary least-squares method. This is equivalent to assuming the conditional distribution of the response given the predictors is normal (i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?y_i%7C%5Cboldsymbol%7BX%7D_i%20%5Csim%20N(%5Cmu_i,%20%5Csigma)">) and using the maximum likelihood estimator.</p>
<p>Let’s get started by simulating some toy data.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">x <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">1.</span>, <span class="fl" style="color: #AD0000;">2.</span>, <span class="fl" style="color: #AD0000;">4.</span>, <span class="fl" style="color: #AD0000;">5.</span>])</span>
<span id="cb2-2">y <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">1.25</span>, <span class="fl" style="color: #AD0000;">1.45</span>, <span class="fl" style="color: #AD0000;">4.75</span>, <span class="fl" style="color: #AD0000;">4.8</span>])</span></code></pre></div>
</div>
<p>Then, fit a linear regression between and visualize the result.</p>
<p>The next plot shows the data, the fitted line, and the contribution of each data point to the total (squared) error as a blue square (one way to see the least squares method is as the method that minimizes the sum of the areas of the squares associated to all the points).</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">b, a <span class="op" style="color: #5E5E5E;">=</span> np.polyfit(x, y, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb3-2">y_hat <span class="op" style="color: #5E5E5E;">=</span> a <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">*</span> x</span>
<span id="cb3-3">residual <span class="op" style="color: #5E5E5E;">=</span> y_hat <span class="op" style="color: #5E5E5E;">-</span> y</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">arrowstyle <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Simple, tail_width=0.3, head_width=4, head_length=4"</span></span>
<span id="cb4-2">connectiontyle <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"arc3, rad=0.4"</span></span>
<span id="cb4-3">arrowstyles <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"color"</span>: <span class="st" style="color: #20794D;">"0.2"</span>, <span class="st" style="color: #20794D;">"arrowstyle"</span>: arrowstyle, <span class="st" style="color: #20794D;">"connectionstyle"</span>: connectiontyle}</span>
<span id="cb4-4"></span>
<span id="cb4-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb4-6">fig.set_facecolor(<span class="st" style="color: #20794D;">"w"</span>)</span>
<span id="cb4-7">ax.set_xlim(<span class="fl" style="color: #AD0000;">0.25</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb4-8">ax.set_ylim(<span class="fl" style="color: #AD0000;">0.25</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb4-9"></span>
<span id="cb4-10">ax.scatter(x, y, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>, ec<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"k"</span>)</span>
<span id="cb4-11">ax.plot(x, y_hat, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0.2"</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">2.5</span>)</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;"># Add rectangles</span></span>
<span id="cb4-14"><span class="cf" style="color: #003B4F;">for</span> xy, r <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(<span class="bu" style="color: null;">zip</span>(x, y ), residual):</span>
<span id="cb4-15">    ax.add_patch(Rectangle(xy, <span class="bu" style="color: null;">abs</span>(r), r, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.7</span>, ec<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"k"</span>, zorder<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;"># Add arrows</span></span>
<span id="cb4-18">x_end <span class="op" style="color: #5E5E5E;">=</span> x <span class="op" style="color: #5E5E5E;">+</span> residual <span class="op" style="color: #5E5E5E;">*</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb4-19">x_start <span class="op" style="color: #5E5E5E;">=</span> x_end <span class="op" style="color: #5E5E5E;">+</span> np.array([<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.3</span>])</span>
<span id="cb4-20">y_end <span class="op" style="color: #5E5E5E;">=</span> y <span class="op" style="color: #5E5E5E;">+</span> residual <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb4-21">y_start <span class="op" style="color: #5E5E5E;">=</span> y</span>
<span id="cb4-22">y_text <span class="op" style="color: #5E5E5E;">=</span> y_end <span class="op" style="color: #5E5E5E;">+</span> np.array([<span class="fl" style="color: #AD0000;">0.2</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.45</span>, <span class="fl" style="color: #AD0000;">0.35</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>])</span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="cf" style="color: #003B4F;">for</span> xy0, xy1, r, yt <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(<span class="bu" style="color: null;">zip</span>(x_start, y_start), <span class="bu" style="color: null;">zip</span>(x_end, y_end), residual, y_text):</span>
<span id="cb4-25">    ax.add_patch(FancyArrowPatch(xy0, xy1, <span class="op" style="color: #5E5E5E;">**</span>arrowstyles))</span>
<span id="cb4-26">    ax.text(xy0[<span class="dv" style="color: #AD0000;">0</span>], yt, <span class="bu" style="color: null;">str</span>(<span class="bu" style="color: null;">round</span>(<span class="bu" style="color: null;">abs</span>(r <span class="op" style="color: #5E5E5E;">**</span> <span class="dv" style="color: #AD0000;">2</span>), <span class="dv" style="color: #AD0000;">4</span>)), ha<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>)</span>
<span id="cb4-27"></span>
<span id="cb4-28">ax.text(</span>
<span id="cb4-29">    <span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1.01</span>, <span class="ss" style="color: #20794D;">f"Sum of squares: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">round</span>(np.<span class="bu" style="color: null;">sum</span>(residual <span class="op" style="color: #5E5E5E;">**</span> <span class="dv" style="color: #AD0000;">2</span>), <span class="dv" style="color: #AD0000;">4</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, </span>
<span id="cb4-30">    size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12</span>, transform<span class="op" style="color: #5E5E5E;">=</span>ax.transAxes, va<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"baseline"</span></span>
<span id="cb4-31">)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So far so good! It looks like the fitted line is a good representation of the relationship between the variables.</p>
<p>What happens if we introduce an outlier? In other words, what happens if there’s a new point that deviates too much from the pattern we’ve just seen above? Let’s see it!</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">x <span class="op" style="color: #5E5E5E;">=</span> np.insert(x, <span class="dv" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">2.25</span>)</span>
<span id="cb5-2">y <span class="op" style="color: #5E5E5E;">=</span> np.insert(y, <span class="dv" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">5.8</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">b, a <span class="op" style="color: #5E5E5E;">=</span> np.polyfit(x, y, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-2">y_hat <span class="op" style="color: #5E5E5E;">=</span> a <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">*</span> x</span>
<span id="cb6-3">residual <span class="op" style="color: #5E5E5E;">=</span> y_hat <span class="op" style="color: #5E5E5E;">-</span> y</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb7-2">fig.set_facecolor(<span class="st" style="color: #20794D;">"w"</span>)</span>
<span id="cb7-3">ax.set_xlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">6.5</span>)</span>
<span id="cb7-4">ax.set_ylim(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">6.5</span>)</span>
<span id="cb7-5"></span>
<span id="cb7-6">ax.scatter(x, y, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>, ec<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"k"</span>)</span>
<span id="cb7-7">ax.plot(x, y_hat, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0.2"</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">2.5</span>)</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;"># Add rectangles</span></span>
<span id="cb7-10"><span class="cf" style="color: #003B4F;">for</span> xy, r <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(<span class="bu" style="color: null;">zip</span>(x, y ), residual):</span>
<span id="cb7-11">    ax.add_patch(Rectangle(xy, <span class="bu" style="color: null;">abs</span>(r), r, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.7</span>, ec<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"k"</span>, zorder<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;"># Add arrows</span></span>
<span id="cb7-14">x_end <span class="op" style="color: #5E5E5E;">=</span> x <span class="op" style="color: #5E5E5E;">+</span> np.<span class="bu" style="color: null;">abs</span>(residual) <span class="op" style="color: #5E5E5E;">*</span> np.array([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb7-15">x_start <span class="op" style="color: #5E5E5E;">=</span> x_end <span class="op" style="color: #5E5E5E;">+</span> np.array([<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.3</span>])</span>
<span id="cb7-16">y_end <span class="op" style="color: #5E5E5E;">=</span> y <span class="op" style="color: #5E5E5E;">+</span> residual <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb7-17">y_start <span class="op" style="color: #5E5E5E;">=</span> y <span class="op" style="color: #5E5E5E;">+</span> np.array([<span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.8</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.4</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb7-18">y_text <span class="op" style="color: #5E5E5E;">=</span> y_start <span class="op" style="color: #5E5E5E;">+</span> np.array([<span class="fl" style="color: #AD0000;">0.1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>])</span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="cf" style="color: #003B4F;">for</span> xy0, xy1, r, yt <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(<span class="bu" style="color: null;">zip</span>(x_start, y_start), <span class="bu" style="color: null;">zip</span>(x_end, y_end), residual, y_text):</span>
<span id="cb7-21">    ax.add_patch(FancyArrowPatch(xy0, xy1, <span class="op" style="color: #5E5E5E;">**</span>arrowstyles))</span>
<span id="cb7-22">    ax.text(xy0[<span class="dv" style="color: #AD0000;">0</span>], yt, <span class="bu" style="color: null;">str</span>(<span class="bu" style="color: null;">round</span>(<span class="bu" style="color: null;">abs</span>(r <span class="op" style="color: #5E5E5E;">**</span> <span class="dv" style="color: #AD0000;">2</span>), <span class="dv" style="color: #AD0000;">4</span>)), ha<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>, va<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>)</span>
<span id="cb7-23"></span>
<span id="cb7-24">ax.text(</span>
<span id="cb7-25">    <span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1.01</span>, <span class="ss" style="color: #20794D;">f"Sum of squares: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">round</span>(np.<span class="bu" style="color: null;">sum</span>(residual <span class="op" style="color: #5E5E5E;">**</span> <span class="dv" style="color: #AD0000;">2</span>), <span class="dv" style="color: #AD0000;">4</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, </span>
<span id="cb7-26">    size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12</span>, transform<span class="op" style="color: #5E5E5E;">=</span>ax.transAxes, va<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"baseline"</span></span>
<span id="cb7-27">)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>What a bummer! Why do we have such a huge error? It’s 10 times the previous error with only one extra data point! Why?!</p>
<p>It happens that each point’s contribution to the error grows quadratically as it moves away from the rest. Outliers not only contribute <strong>a lot</strong> to the total error, they also bias the estimation towards themselves, increasing the error associated with other points too. The final result? the fitted line is not a faithful representation of the relationship between the variables.</p>
</section>
<section id="linear-regression-in-a-bayesian-way" class="level2">
<h2 class="anchored" data-anchor-id="linear-regression-in-a-bayesian-way">Linear regression in a Bayesian way</h2>
<p>Now that we’ve seen how bad outliers can be above, let’s see how one can robust a Bayesian linear regression. This part of the post is based on the <a href="https://docs.pymc.io/pymc-examples/examples/generalized_linear_models/GLM-robust.html">Robust Linear Regression</a> in PyMC3 docs.</p>
<p>Here, we simulate data suitable for a normal linear regression and contaminate it with a few outliers.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb8-2">true_intercept <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb8-3">true_slope <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, size)</span>
<span id="cb8-6">true_regression_line <span class="op" style="color: #5E5E5E;">=</span> true_intercept <span class="op" style="color: #5E5E5E;">+</span> true_slope <span class="op" style="color: #5E5E5E;">*</span> x</span>
<span id="cb8-7">y <span class="op" style="color: #5E5E5E;">=</span> true_regression_line <span class="op" style="color: #5E5E5E;">+</span> np.random.normal(scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, size<span class="op" style="color: #5E5E5E;">=</span>size)</span>
<span id="cb8-8"></span>
<span id="cb8-9">x_out <span class="op" style="color: #5E5E5E;">=</span> np.append(x, [<span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.15</span>, <span class="fl" style="color: #AD0000;">0.2</span>])</span>
<span id="cb8-10">y_out <span class="op" style="color: #5E5E5E;">=</span> np.append(y, [<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">9</span>])</span>
<span id="cb8-11"></span>
<span id="cb8-12">data <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(<span class="bu" style="color: null;">dict</span>(x <span class="op" style="color: #5E5E5E;">=</span> x_out, y <span class="op" style="color: #5E5E5E;">=</span> y_out))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">7</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb9-2">fig.set_facecolor(<span class="st" style="color: #20794D;">"w"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">ax.scatter(data[<span class="st" style="color: #20794D;">"x"</span>], data[<span class="st" style="color: #20794D;">"y"</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>, ec<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.7</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="normal-linear-regression" class="level3">
<h3 class="anchored" data-anchor-id="normal-linear-regression">Normal linear regression</h3>
<p>The normal linear regression is as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu_i,%20%5Csigma)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu_i%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_i">, and the priors are of the form</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0A%5Cbeta_0%20%5Csim%20%5Ctext%7BNormal%7D%20%5C%5C%0A%5Cbeta_1%20%5Csim%20%5Ctext%7BNormal%7D%20%20%5C%5C%0A%5Csigma%20%5Csim%20%5Ctext%7BHalfStudentT%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>with their parameters automatically set by Bambi.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">model <span class="op" style="color: #5E5E5E;">=</span> bmb.Model(<span class="st" style="color: #20794D;">"y ~ x"</span>, data<span class="op" style="color: #5E5E5E;">=</span>data)</span>
<span id="cb10-2">idata <span class="op" style="color: #5E5E5E;">=</span> model.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [y_sigma, x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:01&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 3 seconds.</code></pre>
</div>
</div>
<p>To evaluate the fit, we use the posterior predictive regression lines. The line in black is the true regression line.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Prepare data</span></span>
<span id="cb13-2">x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, num<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>)</span>
<span id="cb13-3">posterior_stacked <span class="op" style="color: #5E5E5E;">=</span> idata.posterior.stack(samples<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">"chain"</span>, <span class="st" style="color: #20794D;">"draw"</span>))</span>
<span id="cb13-4">intercepts <span class="op" style="color: #5E5E5E;">=</span> posterior_stacked[<span class="st" style="color: #20794D;">"Intercept"</span>].values</span>
<span id="cb13-5">slopes <span class="op" style="color: #5E5E5E;">=</span> posterior_stacked[<span class="st" style="color: #20794D;">"x"</span>].values</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># Create plot</span></span>
<span id="cb13-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">7</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;"># Data points</span></span>
<span id="cb13-11">ax.scatter(data[<span class="st" style="color: #20794D;">"x"</span>], data[<span class="st" style="color: #20794D;">"y"</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>, ec<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.7</span>)</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;"># Posterior regression lines</span></span>
<span id="cb13-14"><span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(intercepts, slopes):</span>
<span id="cb13-15">    ax.plot(x, a <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">*</span> x, color <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0.5"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.3</span>, zorder<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-16"></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;"># True regression line</span></span>
<span id="cb13-18">ax.plot(x, true_intercept <span class="op" style="color: #5E5E5E;">+</span> true_slope <span class="op" style="color: #5E5E5E;">*</span> x, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"k"</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As you can see, the posterior distribution fo the regression lines is not centered around the true regression line, which means the estimations are <strong>highly biased</strong>. This is the same phenomena we saw above with the least-squares toy example.</p>
<p>Why does it happen here? The reason is that the normal distribution does not have a lot of mass in the tails and consequently, an outlier will affect the fit strongly.</p>
<p>Since the problem is the light tails of the Normal distribution we can instead assume that our data is not normally distributed but instead distributed according to the Student T distribution which has heavier tails as shown next.</p>
</section>
<section id="normal-and-student-t-distributions" class="level3">
<h3 class="anchored" data-anchor-id="normal-and-student-t-distributions">Normal and Student-T distributions</h3>
<p>Here we plot the pdf of a standard normal distribution and the pdf of a student-t distribution with 3 degrees of freedom.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">8</span>, num<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">400</span>)</span>
<span id="cb14-2">y_normal <span class="op" style="color: #5E5E5E;">=</span> stats.norm.pdf(x)</span>
<span id="cb14-3">y_t <span class="op" style="color: #5E5E5E;">=</span> stats.t.pdf(x, df <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">6</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb15-2">fig.set_facecolor(<span class="st" style="color: #20794D;">"w"</span>)</span>
<span id="cb15-3">ax.set_ylim(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.41</span>)</span>
<span id="cb15-4"></span>
<span id="cb15-5">ax.plot(x, y_normal, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb15-6">ax.plot(x, y_t, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb15-7"></span>
<span id="cb15-8">ax.add_patch(FancyArrowPatch((<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="fl" style="color: #AD0000;">0.36</span>), (x[<span class="dv" style="color: #AD0000;">180</span>], y_normal[<span class="dv" style="color: #AD0000;">180</span>]), <span class="op" style="color: #5E5E5E;">**</span>arrowstyles, zorder<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb15-9">ax.add_patch(FancyArrowPatch((<span class="dv" style="color: #AD0000;">3</span>, <span class="fl" style="color: #AD0000;">0.31</span>), (x[<span class="dv" style="color: #AD0000;">205</span>], y_t[<span class="dv" style="color: #AD0000;">205</span>]), <span class="op" style="color: #5E5E5E;">**</span>arrowstyles, zorder<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb15-10"></span>
<span id="cb15-11">ax.text(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="fl" style="color: #AD0000;">0.37</span>, <span class="st" style="color: #20794D;">"Normal"</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">13</span>, ha<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>, va<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>)</span>
<span id="cb15-12">ax.text(<span class="dv" style="color: #AD0000;">3</span>, <span class="fl" style="color: #AD0000;">0.30</span>, <span class="st" style="color: #20794D;">"Student's T"</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">13</span>, ha<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>, va<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As you can see, the probability of values far away from the mean are much more likely under the Student-T distribution than under the Normal distribution.</p>
</section>
<section id="robust-linear-regression" class="level3">
<h3 class="anchored" data-anchor-id="robust-linear-regression">Robust linear regression</h3>
<p>The difference with the model above is that this one uses a StudentT likelihood instead of a Normal one.</p>
<p>Bambi does not support yet to use the student-t distribution as the likelihood function for linear regression. However, we can construct our own custom family and Bambi will understand how to work with it.</p>
<p>Custom families are represented by the <a href="https://bambinos.github.io/bambi/main/api_reference.html#bambi.families.Family">Family</a> class in Bambi. Let’s see what we need to create a custom family.</p>
<p>First of all, we need a name. In this case the name is going to be just <code>"t"</code>. Second, there is the <code>likelihood</code> function. This is represented by an object of class <code>Likelihood</code> in Bambi. To define a likelihood function we need the following:</p>
<ul>
<li>The name of the distribution in PyMC3. In this case, it is <code>"StudentT"</code>.</li>
<li>The name of the parent parameter (the mean). It is <code>"mu"</code>.</li>
<li>The prior distributions for the auxiliary parameters in the distribution. These are <code>nu</code> and <code>sigma</code> in the StudentT distribution.</li>
</ul>
<p>Finally, we pass the link function. This can be a string or an object of class <code>Link</code>. In this case it’s simply the identity function, which can be passed as a string.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Construct likelihood</span></span>
<span id="cb16-2">nu <span class="op" style="color: #5E5E5E;">=</span> bmb.Prior(<span class="st" style="color: #20794D;">"Gamma"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, beta<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb16-3">sigma <span class="op" style="color: #5E5E5E;">=</span> bmb.Prior(<span class="st" style="color: #20794D;">"HalfStudentT"</span>, nu<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb16-4">likelihood <span class="op" style="color: #5E5E5E;">=</span> bmb.Likelihood(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"StudentT"</span>, parent<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"mu"</span>, sigma<span class="op" style="color: #5E5E5E;">=</span>sigma, nu<span class="op" style="color: #5E5E5E;">=</span>nu)</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;"># Construct family</span></span>
<span id="cb16-7">t_family <span class="op" style="color: #5E5E5E;">=</span> bmb.Family(name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"t"</span>, likelihood <span class="op" style="color: #5E5E5E;">=</span> likelihood, link <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"identity"</span>)</span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;"># In addition, we pass our custom priors for the terms in the model.</span></span>
<span id="cb16-10">priors <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb16-11">  <span class="st" style="color: #20794D;">"Intercept"</span>: bmb.Prior(<span class="st" style="color: #20794D;">"Normal"</span>, mu<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb16-12">  <span class="st" style="color: #20794D;">"x"</span>: bmb.Prior(<span class="st" style="color: #20794D;">"Normal"</span>, mu<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb16-13">}</span>
<span id="cb16-14"></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;"># Just add the `prior` and `family` arguments</span></span>
<span id="cb16-16">model <span class="op" style="color: #5E5E5E;">=</span> bmb.Model(<span class="st" style="color: #20794D;">"y ~ x"</span>, data, priors<span class="op" style="color: #5E5E5E;">=</span>priors, family<span class="op" style="color: #5E5E5E;">=</span>t_family)</span>
<span id="cb16-17">idata <span class="op" style="color: #5E5E5E;">=</span> model.fit()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [y_nu, y_sigma, x, Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:02&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 2 seconds.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Prepare data</span></span>
<span id="cb19-2">x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, num<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>)</span>
<span id="cb19-3">posterior_stacked <span class="op" style="color: #5E5E5E;">=</span> idata.posterior.stack(samples<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">"chain"</span>, <span class="st" style="color: #20794D;">"draw"</span>))</span>
<span id="cb19-4">intercepts <span class="op" style="color: #5E5E5E;">=</span> posterior_stacked[<span class="st" style="color: #20794D;">"Intercept"</span>].values</span>
<span id="cb19-5">slopes <span class="op" style="color: #5E5E5E;">=</span> posterior_stacked[<span class="st" style="color: #20794D;">"x"</span>].values</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;"># Create plot</span></span>
<span id="cb19-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">7</span>), dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;"># Data points</span></span>
<span id="cb19-11">ax.scatter(data[<span class="st" style="color: #20794D;">"x"</span>], data[<span class="st" style="color: #20794D;">"y"</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>, ec<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"black"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.7</span>)</span>
<span id="cb19-12"></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;"># Posterior regression lines</span></span>
<span id="cb19-14"><span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(intercepts, slopes):</span>
<span id="cb19-15">    ax.plot(x, a <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">*</span> x, color <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0.5"</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.3</span>, zorder<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;"># True regression line</span></span>
<span id="cb19-18">ax.plot(x, true_intercept <span class="op" style="color: #5E5E5E;">+</span> true_slope <span class="op" style="color: #5E5E5E;">*</span> x, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"k"</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Much better now! The posterior distribution of the regression lines is almost centered around the true regression line, and uncertainty has decreased, that’s great! The outliers are barely influencing our estimation because our likelihood function assumes that outliers are much more probable than under the Normal distribution.</p>


</section>
</section>

 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/index.html</guid>
  <pubDate>Mon, 05 Jul 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-07-05_robust-linear-regression-with-Bambi/imgs/plot.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>First weeks of GSoC</title>
  <link>https://tomicapretto.github.io/posts/2021-06-28_first-weeks-of-gsoc/index.html</link>
  <description><![CDATA[ 



<p>I am really happy to participate in this Google Summer of Code season with <a href="https://numfocus.org/">NumFOCUS</a> to contribute to the <a href="https://bambinos.github.io/bambi">Bambi</a> library. The coding period ranges from June 7 to August 16, with an intermediate evaluation taking place between July 12 and July 16.</p>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>My project is called <strong>Extend available models and default priors in Bambi</strong>. The main goal of this project is to add new families of generalized linear models, such as beta regression, robust linear regression (i.e.&nbsp;linear model with error following a T-Student distribution)<sup>1</sup> as well as multinomial regression. However, this raises a second problem, which is about default priors distributions.</p>
<p>Default priors in Bambi are limited to the families implemented in the <a href="https://www.statsmodels.org/stable/glm.html">GLM</a> module in<a href="https://www.statsmodels.org/">statsmodels</a>, which does not include the families mentioned above. For this reason, it is first necessary to incorporate alternative automatic priors so new families work without requiring the user to manually specify priors.</p>
<p>Therefore, these first weeks of the coding period were centered around understanding how default priors work on other high-level modeling packages such as <a href="https://paul-buerkner.github.io/brms/">brms</a> and <a href="https://mc-stan.org/rstanarm/">rstanarm</a>, how to translate their ideas into <a href="https://docs.pymc.io/">PyMC3</a> code, and finally how to implement everything within Bambi.</p>
</section>
<section id="alternative-default-priors" class="level2">
<h2 class="anchored" data-anchor-id="alternative-default-priors">Alternative default priors</h2>
<p>Currently, Bambi uses maximum likelihood estimates in the construction of its default priors. There are two limitations associated with this approach. First, current default priors don’t exist whenever uniquely identifiable maximum likelihood estimates don’t exist (e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?p%20%3E%20n"> or complete separation scenarios). Secondly, these estimates are obtained via the GLM module in statsmodels, which means default priors can only be obtained for families made available in statsmodels.</p>
<p>Based on the available documentation and simulations I’ve done, I decided to implement alternative default priors that are much like the <a href="https://mc-stan.org/rstanarm/articles/priors.html">default priors in rstanarm</a>. These priors aim to be weakly-informative in most scenarios and do not depend on maximum likelihood estimates. Their documentation is excellent and it was a great guide for my implementation.</p>
<p><a href="https://github.com/bambinos/bambi/pull/360">This</a> is the PR where I implement alternative default priors inspired on rstanarm default priors. In addition, I also implement LKJ prior for the correlation matrices of group-specific effects.</p>
<section id="how-to-invoke-alternative-default-priors" class="level3">
<h3 class="anchored" data-anchor-id="how-to-invoke-alternative-default-priors">How to invoke alternative default priors</h3>
<p>The <code>Model()</code> class has gained one new argument, <code>automatic_priors</code>, that can be equal to <code>"default"</code> to use Bambi’s default method, or <code>"rstanarm"</code> to use the alternative implementation<sup>2</sup>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">model <span class="op" style="color: #5E5E5E;">=</span> bmb.Model(<span class="st" style="color: #20794D;">"y ~ x + z"</span>, data, automatic_priors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"rstanarm"</span>)</span></code></pre></div>
</section>
<section id="how-to-use-lkj-priors-for-correlation-matrices-of-group-specific-effects" class="level3">
<h3 class="anchored" data-anchor-id="how-to-use-lkj-priors-for-correlation-matrices-of-group-specific-effects">How to use LKJ priors for correlation matrices of group-specific effects</h3>
<p>Group-specific effects can now have non-independent priors. Instead of using independent normal distributions, we can use a multivariate normal distribution whose correlation matrix has an LKJ prior distribution. This distribution depends on a parameter <img src="https://latex.codecogs.com/png.latex?%5Ceta%20%3E%200">. If <img src="https://latex.codecogs.com/png.latex?%5Ceta=1">, the LJK prior is jointly uniform over all correlation matrices of the same dimension. If <img src="https://latex.codecogs.com/png.latex?%5Ceta%20%3E1"> increases, the mode of the distribution is the identity matrix. The larger the value of <img src="https://latex.codecogs.com/png.latex?%5Ceta"> the more sharply peaked the density is at the identity matrix.</p>
<p><code>Model</code> has an argument <code>priors_cor</code> where we can pass a dictionary to indicate which groups are going to have a LKJ prior. The keys of the dictionary are the names of the groups, and the values are the values for <img src="https://latex.codecogs.com/png.latex?%5Ceta">.</p>
<p>In the following model, we have a varying intercept and varying slope for the groups given by <code>group</code>. These varying effects have a multivariate normal prior whose covariance matrix depends on a correlation matrix that has a LKJ hyperprior with <img src="https://latex.codecogs.com/png.latex?%5Ceta=1">.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">model <span class="op" style="color: #5E5E5E;">=</span> bmb.Model(<span class="st" style="color: #20794D;">"y ~ x + (x|group)"</span>, data, priors_cor<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"group"</span>: <span class="dv" style="color: #AD0000;">1</span>})</span></code></pre></div>


</section>
</section>


<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>These two distributions are not members of the exponential family so using them as the distribution of the random component does not result in a generalized linear model in a strict sense. But I would usually refer to them as GLMs since the linear predictor, link function, and random component properties are still present.↩︎</p></li>
<li id="fn2"><p>Both the argument name and the options may change↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-06-28_first-weeks-of-gsoc/index.html</guid>
  <pubDate>Mon, 28 Jun 2021 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Design matrices for group-specific effects in formulae and lme4</title>
  <link>https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>A linear mixed model can be written as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7By%7D%20=%20%5Cboldsymbol%7BX%7D%5Cboldsymbol%7B%5Cbeta%7D%20+%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cboldsymbol%7BZ%7D%5Cboldsymbol%7Bu%7D%20+%20%5Cboldsymbol%7B%5Cepsilon%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BX%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D"> are the two design matrices we need to somehow construct when dealing with this type of model. <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BX%7D"> is the design matrix for the common (a.k.a. fixed) effects, and <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D"> is the design matrix for the group-specific (a.k.a. random or varying) effects.</p>
<p>It is quite easy to obtain the design matrix <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BX%7D"> in R using its popular formula interface. In Python, <a href="https://patsy.readthedocs.io/">patsy</a> provides equivalent functionality. Unfortunately, there aren’t as many alternatives to compute the matrix <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D">.</p>
<p>In R, there’s <a href="https://CRAN.R-project.org/package=lme4">lme4</a>, the statistical package par excellence for mixed models. It extends the base formula interface to include group-specific effects via the pipe operator (<code>|</code>) and internally computes both <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BX%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D"> without the user noticing. That’s great!</p>
<p>In Python, we are working on <a href="https://bambinos.github.io/formulae/">formulae</a>, a library we use to handle mixed model formulas in <a href="https://bambinos.github.io/bambi">Bambi</a>. In this process, I’ve found <a href="https://cran.r-project.org/web/packages/lme4/vignettes/lmer.pdf">Fitting Linear Mixed-Effects Models Using lme4</a> vignette extremely useful when figuring out how to compute the design matrix for the group-specific effects.</p>
<p>Today, I was adding tests to make sure we are constructing <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BZ%7D"> appropriately and found myself comparing the matrices obtained with formulae with matrices obtained with <strong>lme4</strong>. Then I was like … why not making this a blog post? 🤔</p>
<p>… and so here we are! But before we get started, just note this post mixes both R and Python code. I will try to be explicit when I’m using one language or the other. But if you’re reading a chunk and it looks like Python, it’s Python. And if it looks like R… you guessed! It’s R.</p>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(lme4)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span></code></pre></div>
</div>
<div class="cell">

</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> formulae <span class="im" style="color: #00769E;">import</span> design_matrices</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">

</div>
</section>
<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>Here we will be comparing design matrices for the group-specific terms in a mixed-effects model obtained with both <strong>lme4</strong> and <strong>formulae</strong>. We’re using the dataset <code>Pixel</code> that comes with the R package <strong>nlme</strong>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">"Pixel"</span>, <span class="at" style="color: #657422;">package =</span> <span class="st" style="color: #20794D;">"nlme"</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">head</span>(Pixel)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Grouped Data: pixel ~ day | Dog/Side
  Dog Side day  pixel
1   1    R   0 1045.8
2   1    R   1 1044.5
3   1    R   2 1042.9
4   1    R   4 1050.4
5   1    R   6 1045.2
6   1    R  10 1038.9</code></pre>
</div>
</div>
<p>We’re not interested in how to fit a certain model here. We’re interested in constructing the design matrix for group-specific effects with different characteristics. We use the following formula</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">f1 <span class="ot" style="color: #003B4F;">=</span> <span class="er" style="color: #AD0000;">~</span> (<span class="dv" style="color: #AD0000;">0</span> <span class="sc" style="color: #5E5E5E;">+</span> day <span class="sc" style="color: #5E5E5E;">|</span> Dog) <span class="sc" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">|</span> Side <span class="sc" style="color: #5E5E5E;">/</span> Dog)</span></code></pre></div>
</div>
<p>where each part can be interpreted as follows</p>
<ul>
<li><code>(0 + day | Dog)</code> means that <code>day</code> has a group-specific slope for each <code>Dog</code>. This is usually known as a random slope. The <code>0</code> indicates not to add the default group-specific intercept (because it’s added next).</li>
<li><code>(1 | Side / Dog)</code> is equivalent to <code>(1 | Side) + (1 | Dog:Side)</code>. This means there’s a varying intercept for each <code>Side</code> and a varying intercept for each combination of <code>Dog</code> and <code>Side</code>. In other words, we have a nested group-specific intercept, where <code>Dog</code> is nested within <code>Side</code>.</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">lme4_terms <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">mkReTrms</span>(<span class="fu" style="color: #4758AB;">findbars</span>(f1), <span class="fu" style="color: #4758AB;">model.frame</span>(<span class="fu" style="color: #4758AB;">subbars</span>(f1), <span class="at" style="color: #657422;">data =</span> Pixel))</span></code></pre></div>
</div>
<p><code>lme4_terms</code> contains much more information than what we need for this post. We mostly use <code>lme4_terms$Ztlist</code>, which is a list that contains the transpose of the group-specific effects model matrix, separated by term. These matrices are stored as sparse matrices of <code>dgCMatrix</code> class. If we want to have the sub-matrix for a given group-specific term as a base R matrix, we have to do <code>as.matrix(t(lme4_terms$Ztlist$[["term"]]))</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">names</span>(lme4_terms<span class="sc" style="color: #5E5E5E;">$</span>Ztlist)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1 | Dog:Side"  "0 + day | Dog" "1 | Side"     </code></pre>
</div>
</div>
<p>We have three group-specific terms. The first and the last ones are the group-specific intercepts we mentioned. These are the result of the nested group-specific intercept <code>(1 | Side / Dog)</code>. <code>Dog</code> is nested within <code>Side</code> and consequently there’s an intercept varying among <code>Side</code> and another varying among <code>Dog</code> within <code>Side</code>. The second term, <code>0 + day | Dog</code>, represents varying slope of <code>day</code> for each level of <code>Dog</code>.</p>
<p>We finally store the sub-matrix for each term in different objects that we’ll later use when comparing results with those obtained with <strong>formulae</strong>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">day_by_dog <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as.matrix</span>(<span class="fu" style="color: #4758AB;">t</span>(lme4_terms<span class="sc" style="color: #5E5E5E;">$</span>Ztlist<span class="sc" style="color: #5E5E5E;">$</span><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">0 + day | Dog</span><span class="st" style="color: #20794D;">`</span>))</span>
<span id="cb9-2">intercept_by_side <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as.matrix</span>(<span class="fu" style="color: #4758AB;">t</span>(lme4_terms<span class="sc" style="color: #5E5E5E;">$</span>Ztlist<span class="sc" style="color: #5E5E5E;">$</span><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">1 | Side</span><span class="st" style="color: #20794D;">`</span>))</span>
<span id="cb9-3">intercept_by_side_dog <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as.matrix</span>(<span class="fu" style="color: #4758AB;">t</span>(lme4_terms<span class="sc" style="color: #5E5E5E;">$</span>Ztlist<span class="sc" style="color: #5E5E5E;">$</span><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">1 | Dog:Side</span><span class="st" style="color: #20794D;">`</span>))</span></code></pre></div>
</div>
<p>On the other hand, in Python, we use <code>design_matrices()</code> from the <strong>formulae</strong> library to obtain a <code>DesignMatrices</code> object. All the information associated with the group-specific terms is contained in the <code>.group</code> attribute and the sub-matrix corresponding to a particular term is accessed with <code>.group[term_name]</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">dm <span class="op" style="color: #5E5E5E;">=</span> design_matrices(<span class="st" style="color: #20794D;">"(0 + day | Dog) + (1 | Side / Dog)"</span>, r.Pixel)</span></code></pre></div>
</div>
<p>There’s a dictionary called <code>terms_info</code> within <code>dm.group</code>. To see the names of the group-specific effects we just retrieve the keys.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dm.group.terms.keys()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dict_keys(['day|Dog', '1|Side', '1|Side:Dog'])</code></pre>
</div>
</div>
<p>Names differ a little with the ones from <strong>lme4</strong>, but they represent the same thing.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">day_by_dog <span class="op" style="color: #5E5E5E;">=</span> dm.group[<span class="st" style="color: #20794D;">'day|Dog'</span>]</span>
<span id="cb13-2">intercept_by_side <span class="op" style="color: #5E5E5E;">=</span> dm.group[<span class="st" style="color: #20794D;">'1|Side'</span>]</span>
<span id="cb13-3">intercept_by_side_dog <span class="op" style="color: #5E5E5E;">=</span> dm.group[<span class="st" style="color: #20794D;">'1|Side:Dog'</span>]</span></code></pre></div>
</div>
<p>Now let’s compare those matrices!</p>
</section>
<section id="design-matrices-for-daydog" class="level2">
<h2 class="anchored" data-anchor-id="design-matrices-for-daydog">Design matrices for <code>(day|Dog)</code></h2>
<p>Rectangles in the following plot correspond to the cells in the matrix. The lowest value for <code>day</code> is 0, represented by violet, and the highest value is 21, represented by yellow. The 10 columns represent the 10 groups in <code>Dog</code>, and the rows represent the observations in <code>Pixel</code>. Here, and also in the other cases, the left panel contains the matrix obtained with <strong>lme4</strong> and the right panel the one produced with <strong>formulae</strong>.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<p>In this first case, both panels are representing the same data so we can happily conclude the result obtained with <strong>formulae</strong> matches the one from <strong>lme4</strong>. Yay!!</p>
<p>But we’re humans and our eyes can fail so it’s better to always check appropiately with</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">all</span>(py<span class="sc" style="color: #5E5E5E;">$</span>day_by_dog <span class="sc" style="color: #5E5E5E;">==</span> day_by_dog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<section id="design-matrices-for-1side" class="level3">
<h3 class="anchored" data-anchor-id="design-matrices-for-1side">Design matrices for <code>(1|Side)</code></h3>
<p>Here the first column represents <code>Side == "L"</code> and the second column represents <code>Side == "R"</code>. Since we’re dealing with an intercept, violet means 0 and yellow means 1. In this case it is much easier to see both results match.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">all</span>(py<span class="sc" style="color: #5E5E5E;">$</span>intercept_by_side <span class="sc" style="color: #5E5E5E;">==</span> intercept_by_side)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
<section id="design-matrices-for-1sidedog" class="level3">
<h3 class="anchored" data-anchor-id="design-matrices-for-1sidedog">Design matrices for <code>(1|Side:Dog)</code></h3>
<p>But things are not always as one wishes. It’s clear from the following plot that both matrices aren’t equal here.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<p>But don’t worry. We’re not giving up. We still have things to do<sup>1</sup>. We can check what are the groups being represented in the columns of the matrices we’re plotting.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">colnames</span>(intercept_by_side_dog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "1:L"  "1:R"  "10:L" "10:R" "2:L"  "2:R"  "3:L"  "3:R"  "4:L"  "4:R" 
[11] "5:L"  "5:R"  "6:L"  "6:R"  "7:L"  "7:R"  "8:L"  "8:R"  "9:L"  "9:R" </code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">dm.group.terms[<span class="st" style="color: #20794D;">"1|Side:Dog"</span>].labels</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['1|Side[L]:Dog[1]', '1|Side[L]:Dog[10]', '1|Side[L]:Dog[2]', '1|Side[L]:Dog[3]', '1|Side[L]:Dog[4]', '1|Side[L]:Dog[5]', '1|Side[L]:Dog[6]', '1|Side[L]:Dog[7]', '1|Side[L]:Dog[8]', '1|Side[L]:Dog[9]', '1|Side[R]:Dog[1]', '1|Side[R]:Dog[10]', '1|Side[R]:Dog[2]', '1|Side[R]:Dog[3]', '1|Side[R]:Dog[4]', '1|Side[R]:Dog[5]', '1|Side[R]:Dog[6]', '1|Side[R]:Dog[7]', '1|Side[R]:Dog[8]', '1|Side[R]:Dog[9]']</code></pre>
</div>
</div>
<p>And there it is! Matrices differ because columns are representing different groups. In <strong>lme4</strong>, groups are looping first along <code>Dog</code> and then along <code>Side</code>, while in <strong>formulae</strong> it is the other way around.</p>
<p>We can simply re-order the columns of one of the matrices and generate and check whether they match or not.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">intercept_by_side_dog_f <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(py<span class="sc" style="color: #5E5E5E;">$</span>intercept_by_side_dog)</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;">colnames</span>(intercept_by_side_dog_f) <span class="ot" style="color: #003B4F;">=</span> py<span class="sc" style="color: #5E5E5E;">$</span>dm<span class="sc" style="color: #5E5E5E;">$</span>group<span class="sc" style="color: #5E5E5E;">$</span>terms[[<span class="st" style="color: #20794D;">"1|Side:Dog"</span>]]<span class="sc" style="color: #5E5E5E;">$</span>groups</span>
<span id="cb22-3">names_lme4_order <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"R"</span>), <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>), <span class="at" style="color: #657422;">each =</span> <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb22-6">  <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">":"</span></span>
<span id="cb22-7">)</span>
<span id="cb22-8">intercept_by_side_dog_f <span class="ot" style="color: #003B4F;">=</span> intercept_by_side_dog_f[names_lme4_order] <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb22-9">  <span class="fu" style="color: #4758AB;">as.matrix</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb22-10">  <span class="fu" style="color: #4758AB;">unname</span>()</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">all</span>(intercept_by_side_dog_f <span class="sc" style="color: #5E5E5E;">==</span> intercept_by_side_dog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>And there it is! Results match 🤩</p>
</section>
</section>
<section id="another-formula" class="level2">
<h2 class="anchored" data-anchor-id="another-formula">Another formula</h2>
<p>This other formula contains an interaction between categorical variables as the expression of the group-specific term, which is something we’re not covering above. In this case, we are going to subset the data so the design matrices are smaller and we can understand what’s going on with more ease.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># Subset data</span></span>
<span id="cb25-2">Pixel2 <span class="ot" style="color: #003B4F;">=</span> Pixel <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;">filter</span>(Dog <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>), day <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">6</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">Dog =</span> forcats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fct_drop</span>(Dog))</span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;"># Create terms with lme4</span></span>
<span id="cb25-6">f2 <span class="ot" style="color: #003B4F;">=</span> <span class="er" style="color: #AD0000;">~</span> day <span class="sc" style="color: #5E5E5E;">+</span>  (<span class="dv" style="color: #AD0000;">0</span> <span class="sc" style="color: #5E5E5E;">+</span> Dog<span class="sc" style="color: #5E5E5E;">:</span>Side <span class="sc" style="color: #5E5E5E;">|</span> day)</span>
<span id="cb25-7">lme4_terms <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">mkReTrms</span>(<span class="fu" style="color: #4758AB;">findbars</span>(f2), <span class="fu" style="color: #4758AB;">model.frame</span>(<span class="fu" style="color: #4758AB;">subbars</span>(f2), <span class="at" style="color: #657422;">data =</span> Pixel2))</span>
<span id="cb25-8">dog_and_side_by_day <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as.matrix</span>(<span class="fu" style="color: #4758AB;">t</span>(lme4_terms<span class="sc" style="color: #5E5E5E;">$</span>Ztlist<span class="sc" style="color: #5E5E5E;">$</span><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">0 + Dog:Side | day</span><span class="st" style="color: #20794D;">`</span>))</span></code></pre></div>
</div>
<p>And now with <code>design_matrices()</code> in Python.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># Create terms with</span></span>
<span id="cb26-2">dm <span class="op" style="color: #5E5E5E;">=</span> design_matrices(<span class="st" style="color: #20794D;">"(0 + Dog:Side|day)"</span>, r.Pixel2)</span>
<span id="cb26-3">dog_and_side_by_day <span class="op" style="color: #5E5E5E;">=</span> dm.group[<span class="st" style="color: #20794D;">"Dog:Side|day"</span>]</span></code></pre></div>
</div>
<section id="design-matrix-for-dogsideday" class="level3">
<h3 class="anchored" data-anchor-id="design-matrix-for-dogsideday">Design matrix for <code>(Dog:Side|day)</code></h3>
<p>Although this term is called slope, it is not actually a slope like the one for <code>(day|Dog)</code>. Since both <code>Dog</code> and <code>Side</code> are categorical, the entries of this matrix consist of zeros and ones.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<p>We have the same problem than above, matrices don’t match. So we know what to do: look at the groups represented in the columns.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">colnames</span>(dog_and_side_by_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "2" "2" "2" "2" "2" "2" "4" "4" "4" "4" "4" "4" "6" "6" "6" "6" "6" "6"</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">dm.group.terms[<span class="st" style="color: #20794D;">"Dog:Side|day"</span>].labels</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Dog[1]:Side[L]|day[2.0]', 'Dog[1]:Side[R]|day[2.0]', 'Dog[2]:Side[L]|day[2.0]', 'Dog[2]:Side[R]|day[2.0]', 'Dog[3]:Side[L]|day[2.0]', 'Dog[3]:Side[R]|day[2.0]', 'Dog[1]:Side[L]|day[4.0]', 'Dog[1]:Side[R]|day[4.0]', 'Dog[2]:Side[L]|day[4.0]', 'Dog[2]:Side[R]|day[4.0]', 'Dog[3]:Side[L]|day[4.0]', 'Dog[3]:Side[R]|day[4.0]', 'Dog[1]:Side[L]|day[6.0]', 'Dog[1]:Side[R]|day[6.0]', 'Dog[2]:Side[L]|day[6.0]', 'Dog[2]:Side[R]|day[6.0]', 'Dog[3]:Side[L]|day[6.0]', 'Dog[3]:Side[R]|day[6.0]']</code></pre>
</div>
</div>
<p>But this they represent the same groups<sup>2</sup>. We can look if there’s a difference in how the interactions are ordered within each group.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">lme4_terms<span class="sc" style="color: #5E5E5E;">$</span>cnms</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$day
[1] "Dog1:SideL" "Dog2:SideL" "Dog3:SideL" "Dog1:SideR" "Dog2:SideR"
[6] "Dog3:SideR"</code></pre>
</div>
</div>
<p>And again, thankfully, we see there’s a difference in how columns are being ordered. Let’s see if matrices match after we reorder the one obtained with <strong>formulae</strong>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">dog_and_side_by_day_f <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(py<span class="sc" style="color: #5E5E5E;">$</span>dog_and_side_by_day)</span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;">colnames</span>(dog_and_side_by_day_f) <span class="ot" style="color: #003B4F;">=</span> py<span class="sc" style="color: #5E5E5E;">$</span>dm<span class="sc" style="color: #5E5E5E;">$</span>group<span class="sc" style="color: #5E5E5E;">$</span>terms[[<span class="st" style="color: #20794D;">"Dog:Side|day"</span>]]<span class="sc" style="color: #5E5E5E;">$</span>labels</span>
<span id="cb33-3">side <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">"R"</span>), <span class="at" style="color: #657422;">each =</span> <span class="dv" style="color: #AD0000;">3</span>), <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb33-4">dog <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb33-5">day <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"2.0"</span>, <span class="st" style="color: #20794D;">"4.0"</span>, <span class="st" style="color: #20794D;">"6.0"</span>), <span class="at" style="color: #657422;">each =</span> <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb33-6">names_lme4_order <span class="ot" style="color: #003B4F;">=</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"Dog[{dog}]:Side[{side}]|day[{day}]"</span>)</span>
<span id="cb33-7">dog_and_side_by_day_f <span class="ot" style="color: #003B4F;">=</span> dog_and_side_by_day_f[names_lme4_order] <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb33-8">  <span class="fu" style="color: #4758AB;">as.matrix</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb33-9">  <span class="fu" style="color: #4758AB;">unname</span>()</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid figure-img" style="width:95.0%"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;">all</span>(dog_and_side_by_day_f <span class="sc" style="color: #5E5E5E;">==</span> dog_and_side_by_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Although <strong>formulae</strong> works differently than <strong>lme4</strong>, and has different goals, we showed that <strong>formulae</strong> produces the same design matrices as <strong>lme4</strong> for the variety of examples we covered. While case-based comparisons like these are not what one should rely on when writing software, the examples here were really helpful when working on the implementation in <strong>formulae</strong> and writing the corresponding tests. And if this post helps someone to better understand what’s going on when working with design matrices associated with group-specific effects, it will have been even more worth it!</p>


</section>


<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I was undoubtedly talking to myself was quite disappointed at this time, wondering what I did wrong. Suffering the consequences of mistakes I wasn’t even aware I made. Well, not that dramatic. But now I’m happy the problem wasn’t real 😅↩︎</p></li>
<li id="fn2"><p>We have six 2s, six 4s and six 6s in both cases↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-06-08_group-specific-effects-matrix/index.html</guid>
  <pubDate>Tue, 08 Jun 2021 03:00:00 GMT</pubDate>
</item>
<item>
  <title>Why Bambi?</title>
  <link>https://tomicapretto.github.io/posts/2021-05-24_why-bambi/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’ve been thinking about writing a new blog post for a while now but honestly, there was nothing coming to my mind that made me think “Oh, yeah, this is interesting, it can be useful for someone else”. And it was just a few hours ago that I realized I could write about something quite curious that happened to me while trying to replicate a Bambi model with PyMC3.</p>
<p><a href="https://docs.pymc.io/">PyMC3</a> is a Python package for Bayesian statistical modeling that implements advanced Markov chain Monte Carlo algorithms, such as the No-U-Turn sampler (NUTS). <a href="https://bambinos.github.io/bambi/">Bambi</a> is a high-level Bayesian model-building interface in Python. It is built on top of PyMC3 and allows users to specify and fit Generalized Linear Models (GLMs) and Generalized Linear Mixed Models (GLMMs) very easily using a model formula much similar to the popular model formulas in R.</p>
<p>A couple of weeks ago <a href="https://twitter.com/AgustinaArroyu1">Agustina Arroyuelo</a> told me she was trying to replicate a <a href="https://bambinos.github.io/bambi/master/notebooks/wald_gamma_glm.html#Wald">model</a> in one of the example notebooks we have in Bambi and wanted my opinion on what she was doing. After many attempts, neither of us could replicate the model successfully. It turned out to be we were messing up with the shapes of the priors and also had some troubles with the design matrix.</p>
<p>The point of this post is not about good practices when doing Bayesian modeling neither about modeling techniques. This post aims to show how Bambi can save you effort, code, and prevent us from making some mistakes when fitting not-so-trivial GLMs in Python.</p>
<p>Well, I think this is quite enough for an introduction. Let’s better have a look at the problem at hand.</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> arviz <span class="im" style="color: #00769E;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> bambi <span class="im" style="color: #00769E;">as</span> bmb</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> pymc3 <span class="im" style="color: #00769E;">as</span> pm</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> theano.tensor <span class="im" style="color: #00769E;">as</span> tt</span></code></pre></div>
</div>
</section>
<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The problem</h2>
<p>In this problem we use a data set consisting of 67856 insurance policies and 4624 (6.8%) claims in Australia between 2004 and 2005. The original source of this dataset is the book <a href="http://www.businessandeconomics.mq.edu.au/our_departments/Applied_Finance_and_Actuarial_Studies/research/books/GLMsforInsuranceData">Generalized Linear Models for Insurance Data</a> by Piet de Jong and Gillian Z. Heller.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"https://courses.ms.ut.ee/2020/glm/spring/uploads/Main/carclaims.csv"</span></span>
<span id="cb2-2">data <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(url)</span>
<span id="cb2-3">data <span class="op" style="color: #5E5E5E;">=</span> data[data[<span class="st" style="color: #20794D;">"claimcst0"</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
</div>
<p>The age (binned), the gender, and the area of residence are used to predict the amount of the claim, conditional on the existence of the claim because we are only working with observations where there is a claim.</p>
<p>We use a Wald regression model. This is a GLM where the random component follows a <a href="https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution">Wald distribution</a>. The link function we choose is the natural logarithm.</p>
</section>
<section id="pymc3-model" class="level2">
<h2 class="anchored" data-anchor-id="pymc3-model">PyMC3 model</h2>
<section id="data-preparation" class="level3">
<h3 class="anchored" data-anchor-id="data-preparation">Data preparation</h3>
<p>To fit the model with PyMC3 we first need to create the model matrix. We need to represent <code>age</code>, <code>area</code>, and <code>gender</code> with dummy variables because they are categorical. We can think of the following objects as sub-matrices of the design matrix in the model.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">intercept <span class="op" style="color: #5E5E5E;">=</span> np.ones((<span class="bu" style="color: null;">len</span>(data), <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb3-2">age <span class="op" style="color: #5E5E5E;">=</span> pd.get_dummies(data[<span class="st" style="color: #20794D;">"agecat"</span>], drop_first<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).to_numpy()</span>
<span id="cb3-3">area <span class="op" style="color: #5E5E5E;">=</span> pd.get_dummies(data[<span class="st" style="color: #20794D;">"area"</span>], drop_first<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).to_numpy()</span>
<span id="cb3-4">gender <span class="op" style="color: #5E5E5E;">=</span> pd.get_dummies(data[<span class="st" style="color: #20794D;">"gender"</span>], drop_first<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).to_numpy()</span></code></pre></div>
</div>
<p>Note we have used <code>drop_first=True</code>. This means that we use <code>n_levels - 1</code> dummies to represent each categorical variable, and the first level is taken as reference. This ensures the resulting design matrix is of full rank.</p>
<p>Next, we stack these sub-matrices horizontally and convert the result to a Theano tensor variable so we can compute the dot product between this matrix and the vector of coefficients when writing our model in PyMC3.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">X <span class="op" style="color: #5E5E5E;">=</span> np.hstack([intercept, age, gender, area])</span>
<span id="cb4-2">X <span class="op" style="color: #5E5E5E;">=</span> tt.as_tensor_variable(X)</span></code></pre></div>
</div>
</section>
<section id="fit" class="level3">
<h3 class="anchored" data-anchor-id="fit">Fit</h3>
<p>We start declaring the priors for each of the predictors in the model. They are all independent Gaussian distributions. You may wonder where I took the values for the parameters of these distributions. I’ve just copied Bambi’s default values for this particular problem.</p>
<p>At this stage, it is <strong>very important</strong> to give appropriate shapes to all the objects we create in the model. For example, <code>β_age</code> is a random variable that represents the coefficients for the age variable. Since 5 dummy variables are used to represent the age, both <code>β_age</code> and the values passed to <code>mu</code> and <code>sigma</code> must have <code>shape=(5, 1)</code>. <a href="https://discourse.pymc.io/t/create-model-matrix/7429">I’ve failed here many times</a> when trying to replicate the model, so, unfortunately, I know what I’m talking about 😅</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Create model and sample posterior</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;">with</span> pm.Model() <span class="im" style="color: #00769E;">as</span> model_pymc3:</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;"># Build predictors</span></span>
<span id="cb5-4">    β_0 <span class="op" style="color: #5E5E5E;">=</span> pm.Normal(<span class="st" style="color: #20794D;">"β_0"</span>, mu<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, shape<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb5-5">    β_gender <span class="op" style="color: #5E5E5E;">=</span> pm.Normal(<span class="st" style="color: #20794D;">"β_gender"</span>, mu<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, shape<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb5-6">    β_age <span class="op" style="color: #5E5E5E;">=</span> pm.Normal(</span>
<span id="cb5-7">        <span class="st" style="color: #20794D;">"β_age"</span>,</span>
<span id="cb5-8">        mu<span class="op" style="color: #5E5E5E;">=</span>np.array([<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb5-9">        sigma<span class="op" style="color: #5E5E5E;">=</span>np.array([<span class="fl" style="color: #AD0000;">0.32</span>, <span class="fl" style="color: #AD0000;">6.94</span>, <span class="fl" style="color: #AD0000;">1.13</span>, <span class="fl" style="color: #AD0000;">5.44</span>, <span class="fl" style="color: #AD0000;">9.01</span>]),</span>
<span id="cb5-10">        shape<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb5-11">    )</span>
<span id="cb5-12">    β_area <span class="op" style="color: #5E5E5E;">=</span> pm.Normal(</span>
<span id="cb5-13">      <span class="st" style="color: #20794D;">"β_area"</span>,</span>
<span id="cb5-14">      mu<span class="op" style="color: #5E5E5E;">=</span>np.array([<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb5-15">      sigma<span class="op" style="color: #5E5E5E;">=</span>np.array([<span class="fl" style="color: #AD0000;">0.86</span>, <span class="fl" style="color: #AD0000;">0.25</span>, <span class="fl" style="color: #AD0000;">1.3</span>, <span class="fl" style="color: #AD0000;">0.76</span>, <span class="fl" style="color: #AD0000;">5.33</span>]),</span>
<span id="cb5-16">      shape<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb5-17">    )</span>
<span id="cb5-18">    </span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;"># Concatenate the vectors for the coefficients into a single vector</span></span>
<span id="cb5-20">    β <span class="op" style="color: #5E5E5E;">=</span> tt.concatenate([β_0, β_age, β_gender, β_area], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb5-21">    </span>
<span id="cb5-22">    <span class="co" style="color: #5E5E5E;"># Compute and transform linear predictor</span></span>
<span id="cb5-23">    mu <span class="op" style="color: #5E5E5E;">=</span> tt.exp(X.dot(β))</span>
<span id="cb5-24">      </span>
<span id="cb5-25">    lam <span class="op" style="color: #5E5E5E;">=</span> pm.HalfCauchy(<span class="st" style="color: #20794D;">"claim_lam"</span>, beta<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb5-26">    pm.Wald(<span class="st" style="color: #20794D;">"claim"</span>, mu<span class="op" style="color: #5E5E5E;">=</span>mu, lam<span class="op" style="color: #5E5E5E;">=</span>lam, observed<span class="op" style="color: #5E5E5E;">=</span>data[<span class="st" style="color: #20794D;">"claimcst0"</span>])</span>
<span id="cb5-27">    </span>
<span id="cb5-28">    idata_pymc <span class="op" style="color: #5E5E5E;">=</span> pm.sample( </span>
<span id="cb5-29">      draws<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2000</span>, </span>
<span id="cb5-30">      target_accept<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.9</span>, </span>
<span id="cb5-31">      random_seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1234</span>,</span>
<span id="cb5-32">      return_inferencedata<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb5-33">    )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [claim_lam, β_area, β_gender, β_age, β_0]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="6000" class="" max="6000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [6000/6000 00:25&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 2_000 draw iterations (2_000 + 4_000 draws total) took 26 seconds.</code></pre>
</div>
</div>
</section>
</section>
<section id="bambi-model" class="level2">
<h2 class="anchored" data-anchor-id="bambi-model">Bambi model</h2>
<p>As you can see below, we don’t need to do any data preparation, or even specify priors by hand. Bambi automatically obtains sensible default priors when they are not specified, and also knows how to handle each variable type very well.</p>
<p>The model is specified using a model formula, quite similar to model formulas in R. The left-hand side of <code>~</code> is the response variable, and the rest are the predictors. Here <code>C(agecat)</code> tells Bambi that <code>agecat</code> should be interpreted as categorical. The <code>family</code> argument indicates the conditional distribution for the response, and the <code>link</code> tells Bambi which function of the mean is being modeled by the linear predictor. More information about how they work can be found <a href="https://bambinos.github.io/bambi/master/notebooks/getting_started.html#Families">here</a>.</p>
<p>Then we have the <code>.fit()</code> method, where you can pass arguments to the <code>pm.sample()</code> function that’s running in the background.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">model_bambi <span class="op" style="color: #5E5E5E;">=</span> bmb.Model(</span>
<span id="cb8-2">  <span class="st" style="color: #20794D;">"claimcst0 ~ C(agecat) + gender + area"</span>, </span>
<span id="cb8-3">  data, </span>
<span id="cb8-4">  family <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"wald"</span>, </span>
<span id="cb8-5">  link <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"log"</span></span>
<span id="cb8-6">)</span>
<span id="cb8-7">idata_bambi <span class="op" style="color: #5E5E5E;">=</span> model_bambi.fit(draws<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2000</span>, target_accept<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.9</span>, random_seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1234</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [claimcst0_lam, area, gender, C(agecat), Intercept]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="6000" class="" max="6000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [6000/6000 00:18&lt;00:00 Sampling 2 chains, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 2_000 draw iterations (2_000 + 4_000 draws total) took 19 seconds.</code></pre>
</div>
</div>
<p>And that’s it! A model that took several lines of codes to specify in PyMC3 only took a few lines of code in Bambi. Quite an advantage, right?</p>
</section>
<section id="check-results" class="level2">
<h2 class="anchored" data-anchor-id="check-results">Check results</h2>
<p>The simplicity we gain with Bambi would be worthless if the results turned out to be different. We want an interface that makes our job easier, without affecting the quality of the inference. The following is a forest plot where the point gives the posterior mean and the bars indicate a 94% HDI.</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">summary_pymc <span class="op" style="color: #5E5E5E;">=</span> az.summary(idata_pymc)</span>
<span id="cb11-2">summary_bambi <span class="op" style="color: #5E5E5E;">=</span> az.summary(idata_bambi)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">summary_pymc[<span class="st" style="color: #20794D;">"row"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">13</span>))</span>
<span id="cb12-2">summary_pymc[<span class="st" style="color: #20794D;">"panel"</span>] <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"1-Intercept"</span>] <span class="op" style="color: #5E5E5E;">+</span> [<span class="st" style="color: #20794D;">"2-Effects"</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">11</span> <span class="op" style="color: #5E5E5E;">+</span> [<span class="st" style="color: #20794D;">"3-Dispersion"</span>]</span>
<span id="cb12-3"></span>
<span id="cb12-4">summary_bambi[<span class="st" style="color: #20794D;">"row"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">13</span>))</span>
<span id="cb12-5">summary_bambi[<span class="st" style="color: #20794D;">"panel"</span>] <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"1-Intercept"</span>] <span class="op" style="color: #5E5E5E;">+</span> [<span class="st" style="color: #20794D;">"2-Effects"</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">11</span> <span class="op" style="color: #5E5E5E;">+</span> [<span class="st" style="color: #20794D;">"3-Dispersion"</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="fl" style="color: #AD0000;">5.33</span>), sharey<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">120</span>)</span>
<span id="cb13-2">fig.subplots_adjust(left<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.13</span>, right<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.975</span>, wspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, bottom<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.12</span>, top<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.925</span>)</span>
<span id="cb13-3">fig.set_facecolor(<span class="st" style="color: #20794D;">"w"</span>)</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="cf" style="color: #003B4F;">for</span> i, (ax, panel) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(<span class="bu" style="color: null;">zip</span>(axes, [<span class="st" style="color: #20794D;">"1-Intercept"</span>, <span class="st" style="color: #20794D;">"2-Effects"</span>, <span class="st" style="color: #20794D;">"3-Dispersion"</span>])):</span>
<span id="cb13-6">    plt_data <span class="op" style="color: #5E5E5E;">=</span> summary_bambi[summary_bambi[<span class="st" style="color: #20794D;">"panel"</span>] <span class="op" style="color: #5E5E5E;">==</span> panel]</span>
<span id="cb13-7">    ax.scatter(plt_data[<span class="st" style="color: #20794D;">"mean"</span>], plt_data[<span class="st" style="color: #20794D;">"row"</span>] <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.25</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">40</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Bambi"</span>)</span>
<span id="cb13-8">    ax.hlines(plt_data[<span class="st" style="color: #20794D;">"row"</span>] <span class="op" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.25</span>, plt_data[<span class="st" style="color: #20794D;">"hdi_3%"</span>], plt_data[<span class="st" style="color: #20794D;">"hdi_97%"</span>], lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb13-9">    </span>
<span id="cb13-10">    plt_data <span class="op" style="color: #5E5E5E;">=</span> summary_pymc[summary_pymc[<span class="st" style="color: #20794D;">"panel"</span>] <span class="op" style="color: #5E5E5E;">==</span> panel]</span>
<span id="cb13-11">    ax.scatter(plt_data[<span class="st" style="color: #20794D;">"mean"</span>], plt_data[<span class="st" style="color: #20794D;">"row"</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.25</span>, s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">40</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"PyMC3"</span>)</span>
<span id="cb13-12">    ax.hlines(plt_data[<span class="st" style="color: #20794D;">"row"</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.25</span>, plt_data[<span class="st" style="color: #20794D;">"hdi_3%"</span>], plt_data[<span class="st" style="color: #20794D;">"hdi_97%"</span>], lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"C1"</span>)</span>
<span id="cb13-13">    </span>
<span id="cb13-14">    ax.set_title(panel)</span>
<span id="cb13-15">    ax.tick_params(<span class="st" style="color: #20794D;">"y"</span>, length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb13-16"></span>
<span id="cb13-17">axes[<span class="dv" style="color: #AD0000;">0</span>].legend()</span>
<span id="cb13-18">ax.set_yticks(<span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(summary_bambi.index)))</span>
<span id="cb13-19">ax.set_yticklabels(<span class="bu" style="color: null;">list</span>(summary_bambi.index))</span>
<span id="cb13-20"></span>
<span id="cb13-21">fig.text(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.025</span>, <span class="st" style="color: #20794D;">"Marginal posterior"</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12</span>, ha<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>)</span>
<span id="cb13-22">fig.text(<span class="fl" style="color: #AD0000;">0.02</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">"Parameter"</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12</span>, va<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"center"</span>, rotation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb13-23"></span>
<span id="cb13-24">fig.savefig(<span class="st" style="color: #20794D;">"imgs/plot.png"</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">120</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://tomicapretto.github.io/posts/2021-05-24_why-bambi/index_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>While most of the marginal posteriors match very well, we can clearly see the ones for <code>β_area[3]</code> and <code>β_area[4]</code> don’t overlap as much as the others. One of the possible explanations for this difference is related to the MCMC algorithm. While we know both models are indeed the same model, their internal representation is not exactly the same. For example, the model we wrote in pure PyMC3 computes a unique dot product between a matrix of shape <code>(n, p)</code> a vector of shape <code>(p, 1)</code>, while the model in Bambi is computing the sum of many smaller dot products. As the internal representations are not exactly the same, the sampling spaces differ and the sampling algorithm obtained slightly different results.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this post, we saw how the same GLM can be expressed in both PyMC3 and Bambi. PyMC3 allowed us to control every fine-grained detail of the model specification, while Bambi allowed us to express the same model in a much more concise manner.</p>
<p>Bambi’s advantages in these types of scenarios aren’t only related to the amount of code one has to write. Bambi also prevents us from making mistakes when writing the PyMC3 model, such as the mistakes I was making when specifying the shapes for the distributions. Or one could just simply don’t know how correctly prepare the data that should go in the design matrix, such as the conversion of the categorical data to numeric matrices in such a way that the information is retained without introducing structural redundancies.</p>
<p>Nevertheless, this doesn’t mean we should always favor Bambi over PyMC3. Whether Bambi or PyMC3 is appropriate for you actually depends on your use case. If you’re someone who mainly needs to fit GLMs or GLMMs, Bambi is the way to go and it would be nice you give it a chance. There are a <a href="https://bambinos.github.io/bambi/main/examples.html">bunch of examples</a> showing how to specify and fit different GLMs with Bambi. On the other hand, if you’re someone who writes a lot of custom models, PyMC3 will be your best friend when it comes to working with Bayesian models in Python.</p>
<p>Bambi is a community project and welcomes contributions such as bug fixes, examples, issues related to bugs or desired enhancements, etc. Want to know more? Visit the <a href="https://bambinos.github.io/bambi/main/index.html">official docs</a> or explore the <a href="https://github.com/bambinos/bambi">Github repo</a>. Also, if you have any doubts about whether the feature you want is available or going to be developed, feel free to reach out to us! You can always open a new issue to request a feature or leave feedback about the library, and we welcome them a lot 😁.</p>
</section>
<section id="acknowledgments" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgments">Acknowledgments</h2>
<p>I want to thank <a href="https://twitter.com/AgustinaArroyu1">Agustina</a>, <a href="https://twitter.com/canyon289">Ravin</a>, and <a href="https://twitter.com/aloctavodia">Osvaldo</a> for very useful comments and feedback on an earlier version of this post. They helped me to make this post much nicer than what it was originally.</p>


</section>

 ]]></description>
  <guid>https://tomicapretto.github.io/posts/2021-05-24_why-bambi/index.html</guid>
  <pubDate>Mon, 24 May 2021 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2021-05-24_why-bambi/imgs/plot.png" medium="image" type="image/png" height="77" width="144"/>
</item>
<item>
  <title>How to generate bingo cards in R</title>
  <link>https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/index.html</link>
  <description><![CDATA[ 



<p>Hello wor… Well, my first hello world post appeared about a year ago, but this site had the same fate as many of my othe side-projects… abandonment.</p>
<p>Until now.</p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Today I’m going to show you how I came up with “an algorithm” to generate random bingo cards and some utility functions to print them on a nice looking (?) .pdf file.</p>
<p>First of all, what type of bingo card I’m referring to? As an Argentine, the only bingo cards I’ve ever heard of are bingo cards like this one</p>
<center>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/bingo_card.png" class="img-fluid figure-img"></p>
<p></p><p></p>
</figure>
</div>
</center>
<p>It contains fifteen numbers from 1 to 90 that are divided in three rows and nine columns. The first column contains numbers between 1 and 9, the second column numbers between 10 and 20, and so on until the last column that contains numbers between 80 and 90. The type of bingo that you play with this bingo card is known as the <a href="https://en.wikipedia.org/wiki/Bingo_(British_version)">90-ball bingo game</a> or British bingo. As I said, this is the only version I knew before this project <sup>1</sup> and I think it is the only bingo version you’ll find here in Argentina (I also bet you’ll find some fellow Argentine confirming this a national invention).</p>
<p>So, if you entered this post thinking you’ll find how to print those bingo cards that are popular in places like United States, I’m sorry, this is not for you <sup>2</sup>. Fortunately, other people have invented a tool for you even before I wondered how to generate bingo cards. If you are interested, have a look at <a href="https://github.com/jennybc/bingo">this package</a> and the Shiny app introduced there.</p>
<p>Now, let’s go back to our business.</p>
<p>Anyone who has gone to one of those events where people gather to play bingo <sup>3</sup> knows that bingo cards don’t usually come separated in individual pieces of paper. Sellers usually have strips of six bingo cards in their hands. In some events, you can buy bingo cards directly. In others, you have to buy the entire strip.</p>
<p>Since this is a 90-ball bingo game and each card contains fifteen numbers, six bingo cards with no repeated numbers is all we need to have all the numbers of the game in a single strip. You see where it is going?. Yes, we won’t generate isolated cards, we’ll generate entire strips. This is how a bingo strip looks like (just imagine them vertically stacked on a single strip)</p>
<center>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/bingo_strip.PNG" class="img-fluid figure-img"></p>
<p></p><p></p>
</figure>
</div>
</center>
</section>
<section id="valid-cards-and-valid-strips" class="level2">
<h2 class="anchored" data-anchor-id="valid-cards-and-valid-strips">Valid cards and valid strips</h2>
<p>Bingo cards are not just a bunch of numbers thrown at a piece of paper. All valid strips are composed of six valid cards each made of three valid rows. But not any combinations of three valid rows make up a valid card nor any combinations of six valid cards make up a valid strip. What a shame!</p>
<p>But what is a valid row, a valid card, a va… whatever. Let’s just get to the point and list the rules that will govern how we generate bingo cards.</p>
<section id="valid-row" class="level3">
<h3 class="anchored" data-anchor-id="valid-row">Valid row</h3>
<p>We’re going to think that a row is a numeric vector of length nine where some elements are empty and some are filled with numbers.</p>
<ul>
<li>Exactly five elements are numbers, and four are empty.</li>
<li>There can’t be more than two consecutive empty elements, which is equivalent to having at most three consecutive numbers.</li>
</ul>
<p><strong>Example valid rows</strong></p>
<center>
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/valid_row_1.PNG" class="img-fluid"> <img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/valid_row_2.PNG" class="img-fluid"></p>
</center>
<p><strong>Example invalid rows</strong></p>
<center>
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/invalid_row_1.PNG" class="img-fluid"> <img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/invalid_row_2.PNG" class="img-fluid"></p>
</center>
</section>
<section id="valid-card" class="level3">
<h3 class="anchored" data-anchor-id="valid-card">Valid card</h3>
<p>We can think that a bingo card is a matrix of three rows and nine columns. Each row must be a valid row as specified in the previous point, plus</p>
<ul>
<li>No column can be completely empty.</li>
<li>No column can be completely filled with numbers.</li>
<li>Numbers are sorted in ascending order within columns.</li>
</ul>
<p><strong>Example valid card</strong></p>
<center>
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/valid_card_1.PNG" class="img-fluid"></p>
</center>
</section>
<section id="valid-strip" class="level3">
<h3 class="anchored" data-anchor-id="valid-strip">Valid strip</h3>
<p>A valid strip contains six valid cards that satisfy the following conditions</p>
<ul>
<li>The first column must have <strong>nine</strong> numbers and nine empty slots.</li>
<li>Columns 2 to 8 must have <strong>ten</strong> numbers and eight empty slots.</li>
<li>Column 9 must have <strong>eleven</strong> numbers and seven empty slots.</li>
</ul>
<p>In total, we have <img src="https://latex.codecogs.com/png.latex?6%5Ctimes3%5Ctimes9%20=%20162"> slots in a strip. 90 of them are filled with numbers, 72 are not.</p>
</section>
</section>
<section id="sample-this-sample-that-ive-got-no-need-to-compute-them-all" class="level2">
<h2 class="anchored" data-anchor-id="sample-this-sample-that-ive-got-no-need-to-compute-them-all">Sample this, sample that, I’ve got no need to compute them all<sup>4</sup></h2>
<p>One approach to generate bingo cards would be to get all possible combinations of row layouts, bingo layouts, number arrangements, etc. But the <a href="https://math.stackexchange.com/questions/510693/how-many-90-ball-bingo-cards-are-there">number of cards you could generate is huge</a> and the task wouldn’t be easy at all.</p>
<p>The approach used here is one that mixes some simple combinatorics and random sampling. We use permutations to compute all the possible row layouts. Then, we sample rows to create cards and sample cards to create strips<sup>5</sup>.</p>
<p>First of all, we are going to find valid layouts (i.e.&nbsp;the skeleton of our bingo strips). Once we have them, we are going to fill them with numbers.</p>
<section id="finding-valid-rows" class="level3">
<h3 class="anchored" data-anchor-id="finding-valid-rows">Finding valid rows</h3>
<p>If we represent empty slots with a 0 and filled slots with a 1, getting all permutations between four 0s and five 1s is as simple as calling <code>combinat::permn(c(rep(0, 4), rep(1, 5)))</code>. However, this is not what we want because not all the returned layouts are valid rows. We need to select only those row layouts that are valid in a bingo card.</p>
<p>The following function, <code>find_window()</code>, receives a numeric vector <code>x</code> and looks for find windows of length <code>width</code> where all the elements are equal to <code>what</code>. If such a window is found, the function returns <code>TRUE</code>, otherwise it returns <code>FALSE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">find_window <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, width, what) {</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>(<span class="fu" style="color: #4758AB;">length</span>(x) <span class="sc" style="color: #5E5E5E;">-</span> width)) {</span>
<span id="cb1-3">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">all</span>(x[i<span class="sc" style="color: #5E5E5E;">:</span>(i <span class="sc" style="color: #5E5E5E;">+</span> width)] <span class="sc" style="color: #5E5E5E;">==</span> what)) {</span>
<span id="cb1-4">            <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-5">        }</span>
<span id="cb1-6">    }</span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb1-8">}</span></code></pre></div>
</div>
<p>Then we write a function called <code>get_rows()</code> that generates all the possible row layouts and uses <code>find_window()</code> to select the layouts that satisfy our conditions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">get_rows <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;"># Get all row layouts</span></span>
<span id="cb2-3">    rows <span class="ot" style="color: #003B4F;">&lt;-</span> combinat<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">permn</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">4</span>), <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>)))</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;"># Keep rows with at most two consecutive empty slots</span></span>
<span id="cb2-5">    rows <span class="ot" style="color: #003B4F;">&lt;-</span> rows[<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">vapply</span>(rows, find_window, <span class="fu" style="color: #4758AB;">logical</span>(<span class="dv" style="color: #AD0000;">1</span>), <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>)]</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;"># Keep rows with at most three consecutive filled slots</span></span>
<span id="cb2-7">    rows <span class="ot" style="color: #003B4F;">&lt;-</span> rows[<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">vapply</span>(rows, find_window, <span class="fu" style="color: #4758AB;">logical</span>(<span class="dv" style="color: #AD0000;">1</span>), <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>)]</span>
<span id="cb2-8">    <span class="fu" style="color: #4758AB;">return</span>(rows)</span>
<span id="cb2-9">}</span></code></pre></div>
</div>
</section>
<section id="sampling-valid-cards" class="level3">
<h3 class="anchored" data-anchor-id="sampling-valid-cards">Sampling valid cards</h3>
<p>We noted that a valid card is made of three valid rows, but not all combinations of three valid rows make up a valid card. What if we sample three row layouts and keep/discard the combination based on whether they make up a valid card or not? We can repeat this until we have some desired number of card layours. The process is as follows</p>
<ul>
<li>Let <img src="https://latex.codecogs.com/png.latex?N"> be the number of cards we want to generate.</li>
<li>While the number of cards generated is smaller than <img src="https://latex.codecogs.com/png.latex?N">, do:
<ul>
<li>Sample three rows and make up the card.</li>
<li>Count the number of filled slots per column.</li>
<li>If all the counts are between 1 and 3, keep the card, else discard it.</li>
</ul></li>
</ul>
<p>Once we’re done, we end up with <img src="https://latex.codecogs.com/png.latex?N"> bingo card layouts that are valid in terms of our requirements above.</p>
<p>This idea is implemented in a function called <code>get_cards()</code>. It receives the rows we generate with <code>get_rows()</code> and the number of card layouts we want to generate. Finally it returns a list whose elements are vectors of length 3 with the row indexes<sup>6</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">get_cards <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(rows, <span class="at" style="color: #657422;">cards_n =</span> <span class="dv" style="color: #AD0000;">2000</span>) {</span>
<span id="cb3-2">    rows_n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(rows)</span>
<span id="cb3-3">    cards <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vector</span>(<span class="st" style="color: #20794D;">"list"</span>, cards_n)</span>
<span id="cb3-4"></span>
<span id="cb3-5">    attempts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-6">    card_idx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;">while</span> (card_idx <span class="sc" style="color: #5E5E5E;">&lt;</span> cards_n) {</span>
<span id="cb3-9">        attempts <span class="ot" style="color: #003B4F;">&lt;-</span> attempts <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-10">        <span class="co" style="color: #5E5E5E;"># Sample three rows</span></span>
<span id="cb3-11">        row_idxs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(rows_n, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb3-12">        mm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">unlist</span>(rows[row_idxs]), <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">9</span>, <span class="at" style="color: #657422;">byrow =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-13">        col_sums <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">colSums</span>(mm)</span>
<span id="cb3-14"></span>
<span id="cb3-15">        <span class="co" style="color: #5E5E5E;"># Select valid cards.</span></span>
<span id="cb3-16">        <span class="co" style="color: #5E5E5E;"># These have between 1 and 3 numbers per column.</span></span>
<span id="cb3-17">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">all</span>(col_sums <span class="sc" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;">all</span>(col_sums <span class="sc" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">3</span>)) {</span>
<span id="cb3-18">            card_idx <span class="ot" style="color: #003B4F;">&lt;-</span> card_idx <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-19">            cards[[card_idx]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(row_idxs, col_sums)</span>
<span id="cb3-20">        }</span>
<span id="cb3-21">        <span class="co" style="color: #5E5E5E;"># Print message every 1000 attempts</span></span>
<span id="cb3-22">        <span class="cf" style="color: #003B4F;">if</span> (attempts <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">1000</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb3-23">            <span class="fu" style="color: #4758AB;">message</span>(<span class="st" style="color: #20794D;">"Attempt "</span>, attempts, <span class="st" style="color: #20794D;">" | Cards built:"</span>, card_idx, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb3-24">        }</span>
<span id="cb3-25">    }</span>
<span id="cb3-26">    <span class="co" style="color: #5E5E5E;"># Check duplicates</span></span>
<span id="cb3-27">    dups <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">duplicated</span>(<span class="fu" style="color: #4758AB;">lapply</span>(cards, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">[[</span><span class="st" style="color: #20794D;">`</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb3-28">    <span class="fu" style="color: #4758AB;">message</span>(<span class="st" style="color: #20794D;">"There are "</span>, <span class="fu" style="color: #4758AB;">sum</span>(dups), <span class="st" style="color: #20794D;">" duplicated cards."</span>)</span>
<span id="cb3-29">    <span class="fu" style="color: #4758AB;">return</span>(cards)</span>
<span id="cb3-30">}</span></code></pre></div>
</div>
</section>
<section id="sampling-valid-strips" class="level3">
<h3 class="anchored" data-anchor-id="sampling-valid-strips">Sampling valid strips</h3>
<p>This is the much like what we did above, with two differences. Instead of sampling three row layouts, we sample six card layouts. Instead of checking if the number of filled slots per column are between 1 and 3, we check if they match a number between 9 and 11 specific to each of them.</p>
<p>Then, we have <code>get_strips()</code>. It receives a list called <code>cards</code> where each element contains the three row indexes corresponding to each card layout. <code>rows</code> is a list of row layouts and <code>strips_n</code> controls how many strip layouts we want to generate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">get_strips <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(cards, rows, <span class="at" style="color: #657422;">strips_n =</span> <span class="dv" style="color: #AD0000;">100</span>) {</span>
<span id="cb4-2">    valid_counts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">9</span>, <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="dv" style="color: #AD0000;">11</span>)</span>
<span id="cb4-3">    cards_n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(cards)</span>
<span id="cb4-4">    strips <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vector</span>(<span class="st" style="color: #20794D;">"list"</span>, strips_n)</span>
<span id="cb4-5"></span>
<span id="cb4-6">    attempts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-7">    strip_idx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-8"></span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;">while</span> (strip_idx <span class="sc" style="color: #5E5E5E;">&lt;</span> strips_n) {</span>
<span id="cb4-10">        attempts <span class="ot" style="color: #003B4F;">&lt;-</span> attempts <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-11"></span>
<span id="cb4-12">        <span class="co" style="color: #5E5E5E;"># Sample 6 cards</span></span>
<span id="cb4-13">        cards_idxs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(cards_n, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb4-14">        strip <span class="ot" style="color: #003B4F;">&lt;-</span> cards[cards_idxs]</span>
<span id="cb4-15"></span>
<span id="cb4-16">        <span class="co" style="color: #5E5E5E;"># Contains column counts by card</span></span>
<span id="cb4-17">        card_counts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(</span>
<span id="cb4-18">            <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">lapply</span>(strip, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">[[</span><span class="st" style="color: #20794D;">`</span>, <span class="dv" style="color: #AD0000;">2</span>)),</span>
<span id="cb4-19">            <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">9</span>, <span class="at" style="color: #657422;">byrow =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb4-20">        )</span>
<span id="cb4-21"></span>
<span id="cb4-22">        <span class="co" style="color: #5E5E5E;"># Check if strip column counts are valid</span></span>
<span id="cb4-23">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">all</span>(<span class="fu" style="color: #4758AB;">colSums</span>(card_counts) <span class="sc" style="color: #5E5E5E;">==</span> valid_counts)) {</span>
<span id="cb4-24">            strip_idx <span class="ot" style="color: #003B4F;">&lt;-</span> strip_idx <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-25">            <span class="co" style="color: #5E5E5E;"># Get row indexes contained in the selected card indexes</span></span>
<span id="cb4-26">            rows_idxs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">lapply</span>(cards[cards_idxs], <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">[[</span><span class="st" style="color: #20794D;">`</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb4-27">            strips[[strip_idx]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(</span>
<span id="cb4-28">                <span class="fu" style="color: #4758AB;">unlist</span>(rows[rows_idxs]),</span>
<span id="cb4-29">                <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">9</span>, <span class="at" style="color: #657422;">byrow =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb4-30">            )</span>
<span id="cb4-31">        }</span>
<span id="cb4-32">        <span class="co" style="color: #5E5E5E;"># Print message every 1000 attempts</span></span>
<span id="cb4-33">        <span class="cf" style="color: #003B4F;">if</span> (attempts <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">1000</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-34">            <span class="fu" style="color: #4758AB;">message</span>(<span class="st" style="color: #20794D;">"Attempt "</span>, attempts, <span class="st" style="color: #20794D;">" | Strips built:"</span>, strip_idx, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb4-35">        }</span>
<span id="cb4-36">    }</span>
<span id="cb4-37">    dups <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">duplicated</span>(strips)</span>
<span id="cb4-38">    <span class="fu" style="color: #4758AB;">message</span>(<span class="st" style="color: #20794D;">"There are "</span>, <span class="fu" style="color: #4758AB;">sum</span>(dups), <span class="st" style="color: #20794D;">" duplicatd layouts.</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb4-39">    <span class="fu" style="color: #4758AB;">return</span>(strips)</span>
<span id="cb4-40">}</span></code></pre></div>
</div>
</section>
<section id="a-last-but-not-least-step" class="level3">
<h3 class="anchored" data-anchor-id="a-last-but-not-least-step">A last but not least step</h3>
<p>I’ve never seen a bingo game where you are given empty layouts and are asked to put numbers yourself. So let’s wrap this up and fill our empty cards!</p>
<p><code>fill_strips()</code> receives the strip layouts we generated, randomly selects <code>n</code> of them, and, also randomly, fills the slots the cards with numbers. Of course, the first column contains numbers from 1 to 9, the second column contains numbers from 10 to 19… and so on until the last column, that has numbers from 80 to 90.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">fill_strips <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(strips, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">100</span>) {</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;"># Numbers that go in each column</span></span>
<span id="cb5-3">    numbers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">19</span>, <span class="dv" style="color: #AD0000;">20</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">29</span>, <span class="dv" style="color: #AD0000;">30</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">49</span>, <span class="dv" style="color: #AD0000;">50</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">59</span>, <span class="dv" style="color: #AD0000;">60</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">69</span>, <span class="dv" style="color: #AD0000;">70</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">79</span>, <span class="dv" style="color: #AD0000;">80</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;"># Row indexes corresponding to each card in the strip</span></span>
<span id="cb5-5">    card_rows <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">13</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">16</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">    fill_strip <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(strip) {</span>
<span id="cb5-8">        <span class="co" style="color: #5E5E5E;"># Put numbers in the slots with a 1 (meaning they must contain a number)</span></span>
<span id="cb5-9">        strip[strip <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unlist</span>(</span>
<span id="cb5-10">            <span class="co" style="color: #5E5E5E;"># This `sample()` reorders the numbers in each column randomly</span></span>
<span id="cb5-11">            <span class="fu" style="color: #4758AB;">mapply</span>(sample, numbers, <span class="fu" style="color: #4758AB;">sapply</span>(numbers, length))</span>
<span id="cb5-12">        )</span>
<span id="cb5-13"></span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">seq_along</span>(card_rows)) {</span>
<span id="cb5-15">            strip_ <span class="ot" style="color: #003B4F;">&lt;-</span> strip[card_rows[[i]], ]</span>
<span id="cb5-16">            <span class="co" style="color: #5E5E5E;"># Numbers in a given column are sorted in ascending order within cards</span></span>
<span id="cb5-17">            x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sort</span>(strip_)</span>
<span id="cb5-18">            strip_[strip_ <span class="sc" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> x[x <span class="sc" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb5-19">            strip[card_rows[[i]], ] <span class="ot" style="color: #003B4F;">&lt;-</span> strip_</span>
<span id="cb5-20">        }</span>
<span id="cb5-21">        <span class="fu" style="color: #4758AB;">return</span>(strip)</span>
<span id="cb5-22">    }</span>
<span id="cb5-23">    <span class="co" style="color: #5E5E5E;"># Strip layouts can be repeated</span></span>
<span id="cb5-24">    strips <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(<span class="fu" style="color: #4758AB;">sample</span>(strips, n, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>), fill_strip)</span>
<span id="cb5-25">    <span class="fu" style="color: #4758AB;">message</span>(<span class="st" style="color: #20794D;">"There are "</span>, <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">duplicated</span>(strips)), <span class="st" style="color: #20794D;">" duplicated strips.</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb5-26">    <span class="fu" style="color: #4758AB;">return</span>(strips)</span>
<span id="cb5-27">}</span></code></pre></div>
</div>
<p>And we finally get our bingo strips :)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">0303456</span>)</span>
<span id="cb6-2">rows <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_rows</span>()</span>
<span id="cb6-3">cards <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_cards</span>(rows, <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb6-4">strips <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_strips</span>(cards, rows, <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb6-5">strips <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fill_strips</span>(strips, <span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;"># Output messages have been suppressed</span></span></code></pre></div>
</div>
<p>Let’s check some of them</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">strips[[<span class="dv" style="color: #AD0000;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    0   11   20    0   48    0    0   74   80
 [2,]    8    0    0   31    0   51   60   78    0
 [3,]    0   19   27   39    0   54   62    0    0
 [4,]    1    0   26    0   42   55    0    0   84
 [5,]    2   14    0   34    0    0   65   77    0
 [6,]    0   17   29    0   43   59    0    0   89
 [7,]    0    0   22   33    0    0   64   75   88
 [8,]    0   15    0   35   45    0    0   79   90
 [9,]    9    0   25    0   49   50   66    0    0
[10,]    3    0   28   30    0    0   61   71    0
[11,]    7    0    0   36   40   58    0    0   81
[12,]    0   10    0    0   44    0   63   76   87
[13,]    0    0   21   37    0   52   68   70    0
[14,]    5   16    0    0   41    0    0   72   82
[15,]    0   18    0   38   47   57    0    0   86
[16,]    0    0   23    0   46   53    0   73   83
[17,]    4   12    0   32    0    0   67    0   85
[18,]    6   13   24    0    0   56   69    0    0</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">strips[[<span class="dv" style="color: #AD0000;">30</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
 [1,]    0    0   25    0   43   50    0   74   80
 [2,]    0   16   26   34    0    0   65   79    0
 [3,]    6   17    0   38    0   58    0    0   86
 [4,]    3    0   27    0   40   51   61    0    0
 [5,]    4    0    0   32   49   59    0    0   81
 [6,]    0   19   29   35    0    0   68   71    0
 [7,]    1   14    0    0   47    0   60   75    0
 [8,]    2    0   20   31    0    0   66    0   83
 [9,]    0    0   24    0   48   55    0   77   89
[10,]    0    0   28   33   42    0   64   76    0
[11,]    5   12    0   39    0    0   67    0   84
[12,]    9   15    0    0   45   54    0    0   87
[13,]    0   13   21    0    0   52    0   73   85
[14,]    0   18   22    0   44    0   63   78    0
[15,]    8    0    0   37   46   56    0    0   90
[16,]    0    0   23   30    0   53   62    0   82
[17,]    7   10    0   36    0    0   69   70    0
[18,]    0   11    0    0   41   57    0   72   88</code></pre>
</div>
</div>
</section>
</section>
<section id="are-we-going-to-play-on-r-consoles" class="level2">
<h2 class="anchored" data-anchor-id="are-we-going-to-play-on-r-consoles">Are we going to play on R consoles?</h2>
<p>All we got so far are matrices that <em>look like</em> a bingo strip. But honestly, without any given context, they just look like a bunch of matrices of the same dimension filled with 0s and other integer numbers. Our last task is to generate a .pdf output where these matrices really look like bingo cards.</p>
<p>In this last part of the post we make use of the <code>grid</code> package. For those who haven’t heard of it, it is the low level plotting library behind <code>ggplot2</code>, for example.</p>
<p>Here we have a little function, <code>make_grid()</code>, that given a number of rows and columns returns the <em>natural parent coordinates</em> of the borders the grid that defines the rectangles within each card.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">make_grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(rows, cols) {</span>
<span id="cb11-2">    lines_rows <span class="ot" style="color: #003B4F;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">unit</span>((<span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span>rows) <span class="sc" style="color: #5E5E5E;">/</span> rows, <span class="st" style="color: #20794D;">"npc"</span>)</span>
<span id="cb11-3">    lines_cols <span class="ot" style="color: #003B4F;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">unit</span>((<span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span>cols) <span class="sc" style="color: #5E5E5E;">/</span> cols, <span class="st" style="color: #20794D;">"npc"</span>)</span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="st" style="color: #20794D;">"row"</span> <span class="ot" style="color: #003B4F;">=</span> lines_rows, <span class="st" style="color: #20794D;">"col"</span> <span class="ot" style="color: #003B4F;">=</span> lines_cols))</span>
<span id="cb11-5">}</span></code></pre></div>
</div>
<p>And now we have the main function used to plot the bingo strips. Since the function is quite large, I prefer to explain how it works with comments in the body.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">plot_strips <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(strips, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"#8e44ad"</span>, <span class="at" style="color: #657422;">width_row =</span> <span class="fl" style="color: #AD0000;">0.925</span>,</span>
<span id="cb12-2">                        <span class="at" style="color: #657422;">width_col =</span> <span class="fl" style="color: #AD0000;">0.975</span>) {</span>
<span id="cb12-3"></span>
<span id="cb12-4">    <span class="co" style="color: #5E5E5E;"># `rows` and `cols` are the dimensions of each card</span></span>
<span id="cb12-5">    rows <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb12-6">    cols <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">9</span></span>
<span id="cb12-7">    g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">make_grid</span>(rows, cols)</span>
<span id="cb12-8">    <span class="co" style="color: #5E5E5E;"># Compute the center of each square in the card grid</span></span>
<span id="cb12-9">    centers_rows <span class="ot" style="color: #003B4F;">&lt;-</span> g<span class="sc" style="color: #5E5E5E;">$</span>row[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">-</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">/</span> (rows <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), <span class="st" style="color: #20794D;">"npc"</span>)</span>
<span id="cb12-10">    centers_cols <span class="ot" style="color: #003B4F;">&lt;-</span> g<span class="sc" style="color: #5E5E5E;">$</span>col[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">-</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">/</span> (cols <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), <span class="st" style="color: #20794D;">"npc"</span>)</span>
<span id="cb12-11">    <span class="co" style="color: #5E5E5E;"># Sort the centers appropiately</span></span>
<span id="cb12-12">    <span class="co" style="color: #5E5E5E;"># This is required because of how we loop over the values in each card</span></span>
<span id="cb12-13">    x_coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(centers_cols, <span class="at" style="color: #657422;">each =</span> rows)</span>
<span id="cb12-14">    y_coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">rev</span>(centers_rows), cols)</span>
<span id="cb12-15"></span>
<span id="cb12-16">    <span class="co" style="color: #5E5E5E;"># Create unique identifiers for the cards</span></span>
<span id="cb12-17">    cards_n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb12-18">        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"CARD N"</span>, <span class="fu" style="color: #4758AB;">intToUtf8</span>(<span class="dv" style="color: #AD0000;">176</span>)),</span>
<span id="cb12-19">        <span class="fu" style="color: #4758AB;">seq_len</span>(<span class="fu" style="color: #4758AB;">length</span>(strips) <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb12-20">    )</span>
<span id="cb12-21">    <span class="co" style="color: #5E5E5E;"># Compute the number of sheets we're going to need.</span></span>
<span id="cb12-22">    <span class="co" style="color: #5E5E5E;"># Each sheet contains two strips</span></span>
<span id="cb12-23">    sheets_n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ceiling</span>(<span class="fu" style="color: #4758AB;">length</span>(strips) <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb12-24"></span>
<span id="cb12-25">    <span class="co" style="color: #5E5E5E;"># Initial numbers</span></span>
<span id="cb12-26">    card_idx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb12-27">    strip_idx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb12-28"></span>
<span id="cb12-29">    <span class="co" style="color: #5E5E5E;"># Loop over sheets</span></span>
<span id="cb12-30">    <span class="cf" style="color: #003B4F;">for</span> (sheet_idx <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">seq_len</span>(sheets_n)) {</span>
<span id="cb12-31">        <span class="co" style="color: #5E5E5E;"># Each sheet is a grid of 6 rows and 3 columns.</span></span>
<span id="cb12-32">        <span class="co" style="color: #5E5E5E;"># Columns 1 and 3 are where we place the strips.</span></span>
<span id="cb12-33">        <span class="co" style="color: #5E5E5E;"># Column 2 just gives vertical separation.</span></span>
<span id="cb12-34">        l <span class="ot" style="color: #003B4F;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.layout</span>(</span>
<span id="cb12-35">            <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb12-36">            <span class="at" style="color: #657422;">widths =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">48.75</span>, <span class="fl" style="color: #AD0000;">2.5</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">3.75</span>, <span class="fl" style="color: #AD0000;">48.75</span>)</span>
<span id="cb12-37">        )</span>
<span id="cb12-38">        <span class="co" style="color: #5E5E5E;"># Start a new page filled with white</span></span>
<span id="cb12-39">        grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.newpage</span>()</span>
<span id="cb12-40">        grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.rect</span>(<span class="at" style="color: #657422;">gp =</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gpar</span>(<span class="at" style="color: #657422;">col =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"white"</span>))</span>
<span id="cb12-41"></span>
<span id="cb12-42">        vp_mid <span class="ot" style="color: #003B4F;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">viewport</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.5</span>, width_row, width_col, <span class="at" style="color: #657422;">layout =</span> l)</span>
<span id="cb12-43">        grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pushViewport</span>(vp_mid)</span>
<span id="cb12-44"></span>
<span id="cb12-45">        <span class="co" style="color: #5E5E5E;"># Loop over columns 1 and 3</span></span>
<span id="cb12-46">        <span class="cf" style="color: #003B4F;">for</span> (j <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>)) {</span>
<span id="cb12-47">            <span class="co" style="color: #5E5E5E;"># Select strip</span></span>
<span id="cb12-48">            strip_idx <span class="ot" style="color: #003B4F;">&lt;-</span> strip_idx <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb12-49">            <span class="cf" style="color: #003B4F;">if</span> (strip_idx <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">length</span>(strips)) <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb12-50">            strip <span class="ot" style="color: #003B4F;">&lt;-</span> strips[[strip_idx]]</span>
<span id="cb12-51"></span>
<span id="cb12-52">            <span class="co" style="color: #5E5E5E;"># Loop over rows (these rows represent the 6 rows assigned to cards)</span></span>
<span id="cb12-53">            <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> 1L<span class="sc" style="color: #5E5E5E;">:</span>l<span class="sc" style="color: #5E5E5E;">$</span>nrow) {</span>
<span id="cb12-54">                card_idx <span class="ot" style="color: #003B4F;">&lt;-</span> card_idx <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb12-55">                vp_inner <span class="ot" style="color: #003B4F;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">viewport</span>(<span class="at" style="color: #657422;">layout.pos.row =</span> i, <span class="at" style="color: #657422;">layout.pos.col =</span> j)</span>
<span id="cb12-56">                grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pushViewport</span>(vp_inner)</span>
<span id="cb12-57"></span>
<span id="cb12-58">                <span class="co" style="color: #5E5E5E;"># Add card identification number on top-left</span></span>
<span id="cb12-59">                grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.text</span>(</span>
<span id="cb12-60">                    <span class="at" style="color: #657422;">label =</span> cards_n[card_idx],</span>
<span id="cb12-61">                    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb12-62">                    <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">0.96</span>,</span>
<span id="cb12-63">                    <span class="at" style="color: #657422;">just =</span> <span class="st" style="color: #20794D;">"left"</span>,</span>
<span id="cb12-64">                    <span class="at" style="color: #657422;">gp =</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gpar</span>(<span class="at" style="color: #657422;">fontsize =</span> <span class="dv" style="color: #AD0000;">9</span>)</span>
<span id="cb12-65">                )</span>
<span id="cb12-66"></span>
<span id="cb12-67">                <span class="co" style="color: #5E5E5E;"># Draw a grill that separates the slots in the card</span></span>
<span id="cb12-68">                vp_mid_inner <span class="ot" style="color: #003B4F;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">viewport</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.80</span>)</span>
<span id="cb12-69">                grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pushViewport</span>(vp_mid_inner)</span>
<span id="cb12-70">                grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.grill</span>(<span class="at" style="color: #657422;">h =</span> g<span class="sc" style="color: #5E5E5E;">$</span>row, <span class="at" style="color: #657422;">v =</span> g<span class="sc" style="color: #5E5E5E;">$</span>col, <span class="at" style="color: #657422;">gp =</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gpar</span>(<span class="at" style="color: #657422;">col =</span> col))</span>
<span id="cb12-71"></span>
<span id="cb12-72">                <span class="co" style="color: #5E5E5E;"># Select the numbers that correspond to this card</span></span>
<span id="cb12-73">                numbers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.vector</span>(strip[(<span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> i <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span>)<span class="sc" style="color: #5E5E5E;">:</span>(<span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> i), ])</span>
<span id="cb12-74">                <span class="co" style="color: #5E5E5E;"># Logical vector that indicates which rectangles are filled</span></span>
<span id="cb12-75">                <span class="co" style="color: #5E5E5E;"># with nunumbers and which rectangles are empty</span></span>
<span id="cb12-76">                lgl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ifelse</span>(numbers <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb12-77"></span>
<span id="cb12-78">                <span class="co" style="color: #5E5E5E;"># Draw the numbers in positions given by the rectangle centers</span></span>
<span id="cb12-79">                grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.text</span>(</span>
<span id="cb12-80">                    <span class="at" style="color: #657422;">label =</span> numbers[lgl],</span>
<span id="cb12-81">                    <span class="at" style="color: #657422;">x =</span> x_coords[lgl],</span>
<span id="cb12-82">                    <span class="at" style="color: #657422;">y =</span> y_coords[lgl],</span>
<span id="cb12-83">                    <span class="at" style="color: #657422;">gp =</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gpar</span>(<span class="at" style="color: #657422;">fontsize =</span> <span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb12-84">                )</span>
<span id="cb12-85"></span>
<span id="cb12-86">                <span class="co" style="color: #5E5E5E;"># Fill empty slots with color</span></span>
<span id="cb12-87">                grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.rect</span>(</span>
<span id="cb12-88">                    <span class="at" style="color: #657422;">x =</span> x_coords[<span class="sc" style="color: #5E5E5E;">!</span>lgl],</span>
<span id="cb12-89">                    <span class="at" style="color: #657422;">y =</span> y_coords[<span class="sc" style="color: #5E5E5E;">!</span>lgl],</span>
<span id="cb12-90">                    <span class="at" style="color: #657422;">height =</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">/</span> rows, <span class="st" style="color: #20794D;">"npc"</span>),</span>
<span id="cb12-91">                    <span class="at" style="color: #657422;">width =</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">/</span> cols, <span class="st" style="color: #20794D;">"npc"</span>),</span>
<span id="cb12-92">                    <span class="at" style="color: #657422;">gp =</span> grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gpar</span>(</span>
<span id="cb12-93">                        <span class="at" style="color: #657422;">col =</span> <span class="cn" style="color: #8f5902;">NA</span>,</span>
<span id="cb12-94">                        <span class="at" style="color: #657422;">fill =</span> farver<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">encode_colour</span>(farver<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">decode_colour</span>(col), <span class="fl" style="color: #AD0000;">0.7</span>)</span>
<span id="cb12-95">                    )</span>
<span id="cb12-96">                )</span>
<span id="cb12-97">                <span class="co" style="color: #5E5E5E;"># End</span></span>
<span id="cb12-98">                grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">popViewport</span>()</span>
<span id="cb12-99">                grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">popViewport</span>()</span>
<span id="cb12-100">            }</span>
<span id="cb12-101">        }</span>
<span id="cb12-102">        grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">popViewport</span>()</span>
<span id="cb12-103">    }</span>
<span id="cb12-104">}</span></code></pre></div>
</div>
<p>Now, all we need is to pass the <code>strips</code> generated above to <code>plot_strips()</code> and wrap that call within <code>grDevices::pdf()</code> and <code>grDevices::dev.off()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Height and width are in inches and here they correspond to legal paper size</span></span>
<span id="cb13-2">grDevices<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pdf</span>(<span class="st" style="color: #20794D;">"imgs/strips.pdf"</span>, <span class="at" style="color: #657422;">height =</span> <span class="dv" style="color: #AD0000;">14</span>, <span class="at" style="color: #657422;">width =</span> <span class="fl" style="color: #AD0000;">8.5</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">plot_strips</span>(strips)</span>
<span id="cb13-4">grDevices<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dev.off</span>()</span></code></pre></div>
</div>
<p>If it works, you’ll have a 25 pages pdf with bingo cards that look like this one</p>
<center>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/bingo_card_own.PNG" class="img-fluid figure-img"></p>
<p></p><p></p>
</figure>
</div>
</center>
<p>If you can’t (or just don’t want to) run the code, <a href="imgs/strips.pdf">here</a> you have the generated pdf.</p>


</section>


<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>How I dare to call this a project?↩︎</p></li>
<li id="fn2"><p>But you should try this bingo, you gonna like it!↩︎</p></li>
<li id="fn3"><p>Some are also known as <em>sobremesa</em>↩︎</p></li>
<li id="fn4"><p>Haven’t you heard <em>Estallando desde el océano</em> by Sumo?↩︎</p></li>
<li id="fn5"><p>If you’ve heard of Sampford’s pps sampling, this is going to be familiar↩︎</p></li>
<li id="fn6"><p>I know that returning row indexes is less intuitive than returning card layouts, but this approach requires less memory because it only stores 3 values per card, instead of 18.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/index.html</guid>
  <pubDate>Tue, 03 Nov 2020 03:00:00 GMT</pubDate>
  <media:content url="https://tomicapretto.github.io/posts/2020-11-03_bingo-cards-in-r/imgs/bingo_card.png" medium="image" type="image/png" height="63" width="144"/>
</item>
</channel>
</rss>
