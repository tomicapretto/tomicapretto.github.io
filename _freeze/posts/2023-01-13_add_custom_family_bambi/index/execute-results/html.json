{
  "hash": "414c9f072b1e6fe96b144256d10f7860",
  "result": {
    "markdown": "---\ntitle: \"How to create a custom family in Bambi?\"\ndate: \"2023-01-13\"\n---\n\nThis is the webpage\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport arviz as az\nimport bambi as bmb\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport pymc as pm\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nrng = np.random.default_rng(1234)\nx = np.concatenate([np.zeros(250), rng.poisson(lam=3, size=750)])\ndf = pd.DataFrame({\"response\": x})\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nvalues, counts = np.unique(x, return_counts=True)\nfig, ax = plt.subplots()\nax.bar(values, counts);\nax.set(xticks=values)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=575 height=412}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfrom bambi.families.univariate import UnivariateFamily\nfrom bambi.families import Family\n\nlikelihood = bmb.Likelihood(\"ZeroInflatedPoisson\", params=[\"mu\", \"psi\"], parent=\"mu\")\nlinks = {\"mu\": \"log\", \"psi\": \"logit\"}\nfamily = Family(\"zero-inflated-poisson\", likelihood, links)\npriors = {\"psi\": bmb.Prior(\"Beta\", alpha=3, beta=3)}\n\nmodel = bmb.Model(\"response ~ 1\", df, family=family, priors=priors)\nmodel\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n       Formula: response ~ 1\n        Family: zero-inflated-poisson\n          Link: mu = log\n  Observations: 1000\n        Priors: \n    target = mu\n        Common-level effects\n            Intercept ~ Normal(mu: 0.0, sigma: 2.5)\n        \n        Auxiliary parameters\n            response_psi ~ Beta(alpha: 3.0, beta: 3.0)\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nmodel.build()\nmodel.graph()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n![](index_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nidata = model.fit()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAuto-assigning NUTS sampler...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nInitializing NUTS using jitter+adapt_diag...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nMultiprocess sampling (2 chains in 2 jobs)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNUTS: [response_psi, Intercept]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n    <div>\n      <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      100.00% [4000/4000 00:03&lt;00:00 Sampling 2 chains, 0 divergences]\n    </div>\n    \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 4 seconds.\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nmodel.predict(idata, kind=\"pps\")\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\naz.plot_ppc(idata);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=556 height=442}\n:::\n:::\n\n\n## What if `psi` also changes?\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nrng = np.random.default_rng(1234)\nx = rng.uniform()\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}